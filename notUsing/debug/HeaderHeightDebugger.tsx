// // Temporary debugging component to measure exact header height

// import { useEffect } from 'react';

// export const HeaderHeightDebugger: React.FC = () => {
//     useEffect(() => {
//         const measureHeader = () => {
//             console.log('üîç Starting header measurement...');

//             // Try to find header elements using specific selectors
//             let headerElement: Element | null = null;

//             // Method 1: Look for elements with minHeight style
//             const styledElements = document.querySelectorAll('[style*="minHeight"]');
//             console.log(`üîç Found ${styledElements.length} elements with minHeight style`);

//             if (styledElements.length > 0) {
//                 headerElement = styledElements[0];
//                 console.log('‚úÖ Using first element with minHeight style');
//             }

//             // Method 2: Look for the navigation element
//             if (!headerElement) {
//                 const navElement = document.querySelector('nav[class*="grid-cols-12"]');
//                 if (navElement && navElement.parentElement) {
//                     headerElement = navElement.parentElement;
//                     console.log('‚úÖ Using TopNavigationBar parent element');
//                 }
//             }

//             // Method 3: Look for flex-shrink-0 with border-b
//             if (!headerElement) {
//                 const flexElements = document.querySelectorAll('.flex-shrink-0');
//                 for (let i = 0; i < flexElements.length; i++) {
//                     const el = flexElements[i];
//                     if (el.className.includes('border-b')) {
//                         headerElement = el;
//                         console.log('‚úÖ Using flex-shrink-0 element with border-b');
//                         break;
//                     }
//                 }
//             }

//             if (!headerElement) {
//                 console.log('‚ùå No header element found. Looking for all elements in top area...');

//                 // Fallback: find the largest element in the top 200px
//                 const allElements = document.querySelectorAll('*');
//                 let largestElement: Element | null = null;
//                 let largestHeight = 0;

//                 for (let i = 0; i < allElements.length; i++) {
//                     const el = allElements[i];
//                     const rect = el.getBoundingClientRect();
//                     if (rect.top >= 0 && rect.top < 200 && rect.height > largestHeight && rect.height < 300) {
//                         largestElement = el;
//                         largestHeight = rect.height;
//                     }
//                 }

//                 if (largestElement) {
//                     headerElement = largestElement;
//                     console.log(`‚úÖ Using largest element in top area: ${largestHeight}px`);
//                 }
//             }

//             if (!headerElement) {
//                 console.log('‚ùå Could not find any suitable header element');
//                 return;
//             }

//             // Measure the header
//             const rect = headerElement.getBoundingClientRect();
//             const computedStyle = window.getComputedStyle(headerElement);

//             console.log('');
//             console.log('üéØ === HEADER MEASUREMENTS ===');
//             console.log(`üìè Element: ${headerElement.tagName}.${headerElement.className}`);
//             console.log(`üìè Total height: ${rect.height}px`);
//             console.log(`üìè Top position: ${rect.top}px`);
//             console.log(`üìè Bottom position: ${rect.bottom}px`);
//             console.log(`üìè CSS minHeight: ${computedStyle.minHeight}`);
//             console.log(`üìè CSS height: ${computedStyle.height}`);
//             console.log(`üìè Padding: ${computedStyle.paddingTop} / ${computedStyle.paddingBottom}`);
//             console.log(`üìè Border: ${computedStyle.borderTopWidth} / ${computedStyle.borderBottomWidth}`);

//             // Find specific sub-elements
//             const nav = document.querySelector('nav[class*="grid-cols-12"]');
//             if (nav) {
//                 const navRect = nav.getBoundingClientRect();
//                 console.log(`üß≠ TopNavigationBar height: ${navRect.height}px`);
//             }

//             const buttonSection = document.querySelector('[class*="border-t"]');
//             if (buttonSection) {
//                 const buttonRect = buttonSection.getBoundingClientRect();
//                 console.log(`üîò Context button section height: ${buttonRect.height}px`);
//             }

//             // Calculate recommendations
//             const actualHeight = Math.ceil(rect.height);
//             const recommendedHeight = actualHeight + 10; // Add some buffer

//             console.log('');
//             console.log('üéØ === RECOMMENDATIONS ===');
//             console.log(`‚úÖ Current header height: ${actualHeight}px`);
//             console.log(`‚úÖ Recommended minHeight: ${recommendedHeight}px`);
//             console.log(`‚úÖ Recommended main content: calc(100vh - ${recommendedHeight}px)`);
//             console.log('');
//             console.log('üìù === CODE TO UPDATE ===');
//             console.log(`style={{ minHeight: '${recommendedHeight}px' }} // Header container`);
//             console.log(`style={{ minHeight: 'calc(100vh - ${recommendedHeight}px)' }} // Main content`);
//             console.log('');

//             // Visual test helper
//             console.log('üé® === VISUAL TEST ===');
//             console.log('Add these temporary styles to see boundaries:');
//             console.log(`Header: outline: '3px solid red'`);
//             console.log(`Main content: outline: '3px solid blue'`);
//             console.log('Red and blue should not overlap!');
//         };

//         // Multiple measurement attempts for reliability
//         const delays = [100, 500, 1000];
//         delays.forEach(delay => {
//             setTimeout(measureHeader, delay);
//         });
//     }, []);

//     return process.env.NODE_ENV === 'development' ? (
//         <div
//             style={{
//                 position: 'fixed',
//                 top: 0,
//                 left: 0,
//                 background: 'linear-gradient(45deg, #ff4500, #ff6347)',
//                 color: 'white',
//                 padding: '8px 12px',
//                 fontSize: '12px',
//                 fontWeight: 'bold',
//                 zIndex: 9999,
//                 fontFamily: 'monospace',
//                 borderRadius: '0 0 8px 0',
//                 boxShadow: '0 2px 8px rgba(0,0,0,0.3)',
//             }}
//         >
//             üìè Header Debug Active - Check Console
//         </div>
//     ) : null;
// };
