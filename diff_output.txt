diff --git a/create.ps1 b/create.ps1
deleted file mode 100644
index 785db75..0000000
--- a/create.ps1
+++ /dev/null
@@ -1,137 +0,0 @@
-# Create Zustand Stores Directory Structure
-# Run this script from the root directory of your audio_transcription_app_typescript project
-
-Write-Host "🚀 Creating Zustand store structure for Audio Transcription App..." -ForegroundColor Green
-Write-Host ""
-
-# Define the base path
-$basePath = "src/stores"
-
-# Create main directories
-Write-Host "📁 Creating main directories..." -ForegroundColor Yellow
-$directories = @(
-    "$basePath",
-    "$basePath/slices",
-    "$basePath/middlewares", 
-    "$basePath/hooks"
-)
-
-foreach ($dir in $directories) {
-    if (!(Test-Path $dir)) {
-        New-Item -ItemType Directory -Path $dir -Force | Out-Null
-        Write-Host "  ✅ Created: $dir" -ForegroundColor Green
-    } else {
-        Write-Host "  ℹ️  Already exists: $dir" -ForegroundColor Cyan
-    }
-}
-
-Write-Host ""
-Write-Host "📄 Creating TypeScript files..." -ForegroundColor Yellow
-
-# Define all files to create
-$files = @(
-    # Main store file
-    @{
-        Path = "$basePath/store.ts"
-        Description = "Main store composition"
-    },
-    
-    # Slice files
-    @{
-        Path = "$basePath/slices/knowledgeSlice.ts"
-        Description = "Document management & vector DB slice"
-    },
-    @{
-        Path = "$basePath/slices/llmSlice.ts"
-        Description = "OpenAI streaming & conversations slice"
-    },
-    @{
-        Path = "$basePath/slices/speechSlice.ts"
-        Description = "Audio recording & transcription slice"
-    },
-    @{
-        Path = "$basePath/slices/interviewSlice.ts"
-        Description = "Interview context & flow slice"
-    },
-    @{
-        Path = "$basePath/slices/uiSlice.ts"
-        Description = "Modals, notifications, theme slice"
-    },
-    @{
-        Path = "$basePath/slices/index.ts"
-        Description = "Export all slices"
-    },
-    
-    # Middleware files
-    @{
-        Path = "$basePath/middlewares/persistenceMiddleware.ts"
-        Description = "Custom persistence middleware"
-    },
-    @{
-        Path = "$basePath/middlewares/errorHandlingMiddleware.ts"
-        Description = "Custom error handling middleware"
-    },
-    @{
-        Path = "$basePath/middlewares/performanceMiddleware.ts"
-        Description = "Custom performance monitoring middleware"
-    },
-    
-    # Hook files
-    @{
-        Path = "$basePath/hooks/useKnowledge.ts"
-        Description = "Optimized knowledge store hooks"
-    },
-    @{
-        Path = "$basePath/hooks/useLLM.ts"
-        Description = "Optimized LLM store hooks"
-    },
-    @{
-        Path = "$basePath/hooks/useSpeech.ts"
-        Description = "Optimized speech store hooks"
-    },
-    @{
-        Path = "$basePath/hooks/useSelectors.ts"
-        Description = "Optimized selector hooks"
-    }
-)
-
-# Create each file
-foreach ($file in $files) {
-    if (!(Test-Path $file.Path)) {
-        New-Item -ItemType File -Path $file.Path -Force | Out-Null
-        Write-Host "  ✅ Created: $($file.Path) - $($file.Description)" -ForegroundColor Green
-    } else {
-        Write-Host "  ℹ️  Already exists: $($file.Path)" -ForegroundColor Cyan
-    }
-}
-
-Write-Host ""
-Write-Host "🎉 Zustand store structure created successfully!" -ForegroundColor Green
-Write-Host ""
-Write-Host "📋 Summary of created structure:" -ForegroundColor White
-Write-Host "  📁 src/stores/" -ForegroundColor Blue
-Write-Host "  │   📄 store.ts (Main store composition)" -ForegroundColor Gray
-Write-Host "  │   📁 slices/" -ForegroundColor Blue
-Write-Host "  │   │   📄 knowledgeSlice.ts (Document management & vector DB)" -ForegroundColor Gray
-Write-Host "  │   │   📄 llmSlice.ts (OpenAI streaming & conversations)" -ForegroundColor Gray
-Write-Host "  │   │   📄 speechSlice.ts (Audio recording & transcription)" -ForegroundColor Gray
-Write-Host "  │   │   📄 interviewSlice.ts (Interview context & flow)" -ForegroundColor Gray
-Write-Host "  │   │   📄 uiSlice.ts (Modals, notifications, theme)" -ForegroundColor Gray
-Write-Host "  │   │   📄 index.ts (Export all slices)" -ForegroundColor Gray
-Write-Host "  │   📁 middlewares/" -ForegroundColor Blue
-Write-Host "  │   │   📄 persistenceMiddleware.ts (Custom persistence)" -ForegroundColor Gray
-Write-Host "  │   │   📄 errorHandlingMiddleware.ts (Custom error handling)" -ForegroundColor Gray
-Write-Host "  │   │   📄 performanceMiddleware.ts (Performance monitoring)" -ForegroundColor Gray
-Write-Host "  │   📁 hooks/" -ForegroundColor Blue
-Write-Host "  │   │   📄 useKnowledge.ts (Knowledge store hooks)" -ForegroundColor Gray
-Write-Host "  │   │   📄 useLLM.ts (LLM store hooks)" -ForegroundColor Gray
-Write-Host "  │   │   📄 useSpeech.ts (Speech store hooks)" -ForegroundColor Gray
-Write-Host "  │   │   📄 useSelectors.ts (Optimized selectors)" -ForegroundColor Gray
-Write-Host ""
-Write-Host "🚀 Next steps:" -ForegroundColor Magenta
-Write-Host "  1. Install Zustand dependencies: npm install zustand immer" -ForegroundColor White
-Write-Host "  2. Create type definitions in src/types/store.ts" -ForegroundColor White
-Write-Host "  3. Implement each slice according to the migration guide" -ForegroundColor White
-Write-Host "  4. Update your components to use the new Zustand stores" -ForegroundColor White
-Write-Host ""
-Write-Host "✨ Happy coding with Zustand! Your state management is about to get much cleaner!" -ForegroundColor Green
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index ccf2ff9..513e50e 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -52,7 +52,6 @@
                 "clsx": "^2.1.1",
                 "formidable": "^3.5.1",
                 "highlight.js": "^11.10.0",
-                "immer": "^10.1.1",
                 "jest": "^29.7.0",
                 "lodash": "^4.17.21",
                 "lucide-react": "^0.436.0",
@@ -82,11 +81,10 @@
                 "uuid": "^10.0.0",
                 "vaul": "^0.9.4",
                 "vosk-browser": "^0.0.8",
-                "zod": "^3.23.8",
-                "zustand": "^5.0.5"
+                "zod": "^3.23.8"
             },
             "devDependencies": {
-                "@types/node": "^20.17.57",
+                "@types/node": "^20",
                 "@types/react": "^18",
                 "@types/react-dom": "^18",
                 "@types/react-speech-recognition": "^3.9.5",
@@ -3780,9 +3778,9 @@
             "license": "MIT"
         },
         "node_modules/@types/node": {
-            "version": "20.17.57",
-            "resolved": "https://registry.npmjs.org/@types/node/-/node-20.17.57.tgz",
-            "integrity": "sha512-f3T4y6VU4fVQDKVqJV4Uppy8c1p/sVvS3peyqxyWnzkqXFJLRU7Y1Bl7rMS1Qe9z0v4M6McY0Fp9yBsgHJUsWQ==",
+            "version": "20.16.1",
+            "resolved": "https://registry.npmjs.org/@types/node/-/node-20.16.1.tgz",
+            "integrity": "sha512-zJDo7wEadFtSyNz5QITDfRcrhqDvQI1xQNQ0VoizPjM/dVAODqqIUWbJPkvsxmTI0MYRGRikcdjMPhOssnPejQ==",
             "license": "MIT",
             "dependencies": {
                 "undici-types": "~6.19.2"
@@ -8397,16 +8395,6 @@
                 "node": ">= 4"
             }
         },
-        "node_modules/immer": {
-            "version": "10.1.1",
-            "resolved": "https://registry.npmjs.org/immer/-/immer-10.1.1.tgz",
-            "integrity": "sha512-s2MPrmjovJcoMaHtx6K11Ra7oD05NT97w1IC5zpMkT6Atjr7H8LjaDd81iIxUYpMKSRRNMJE703M1Fhr/TctHw==",
-            "license": "MIT",
-            "funding": {
-                "type": "opencollective",
-                "url": "https://opencollective.com/immer"
-            }
-        },
         "node_modules/import-fresh": {
             "version": "3.3.0",
             "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
@@ -17215,35 +17203,6 @@
                 "url": "https://github.com/sponsors/colinhacks"
             }
         },
-        "node_modules/zustand": {
-            "version": "5.0.5",
-            "resolved": "https://registry.npmjs.org/zustand/-/zustand-5.0.5.tgz",
-            "integrity": "sha512-mILtRfKW9xM47hqxGIxCv12gXusoY/xTSHBYApXozR0HmQv299whhBeeAcRy+KrPPybzosvJBCOmVjq6x12fCg==",
-            "license": "MIT",
-            "engines": {
-                "node": ">=12.20.0"
-            },
-            "peerDependencies": {
-                "@types/react": ">=18.0.0",
-                "immer": ">=9.0.6",
-                "react": ">=18.0.0",
-                "use-sync-external-store": ">=1.2.0"
-            },
-            "peerDependenciesMeta": {
-                "@types/react": {
-                    "optional": true
-                },
-                "immer": {
-                    "optional": true
-                },
-                "react": {
-                    "optional": true
-                },
-                "use-sync-external-store": {
-                    "optional": true
-                }
-            }
-        },
         "node_modules/zwitch": {
             "version": "2.0.4",
             "resolved": "https://registry.npmjs.org/zwitch/-/zwitch-2.0.4.tgz",
diff --git a/package.json b/package.json
index 4c53a1f..e0349b4 100644
--- a/package.json
+++ b/package.json
@@ -57,7 +57,6 @@
         "clsx": "^2.1.1",
         "formidable": "^3.5.1",
         "highlight.js": "^11.10.0",
-        "immer": "^10.1.1",
         "jest": "^29.7.0",
         "lodash": "^4.17.21",
         "lucide-react": "^0.436.0",
@@ -87,11 +86,10 @@
         "uuid": "^10.0.0",
         "vaul": "^0.9.4",
         "vosk-browser": "^0.0.8",
-        "zod": "^3.23.8",
-        "zustand": "^5.0.5"
+        "zod": "^3.23.8"
     },
     "devDependencies": {
-        "@types/node": "^20.17.57",
+        "@types/node": "^20",
         "@types/react": "^18",
         "@types/react-dom": "^18",
         "@types/react-speech-recognition": "^3.9.5",
diff --git a/src/app/chat/page.tsx b/src/app/chat/page.tsx
index 966aaff..e859c37 100644
--- a/src/app/chat/page.tsx
+++ b/src/app/chat/page.tsx
@@ -5,7 +5,7 @@ import { Button, Card, CardContent, CardHeader, CardTitle, Separator } from '@/c
 import { useKnowledge } from '@/contexts';
 import { CustomSpeechError, useLLMProviderOptimized, useSpeechRecognition, useTranscriptions } from '@/hooks';
 import { logger } from '@/modules';
-import { CallContext, Message } from '@/types';
+import { InitialInterviewContext, Message } from '@/types';
 import { ArrowRight, MessageSquare, X } from 'lucide-react';
 import { useCallback, useEffect, useRef, useState } from 'react';
 import {
@@ -18,13 +18,10 @@ import {
     TopNavigationBar,
     VoiceControls,
 } from './_components';
-// import { InterviewModalProvider } from '@/components/interview-modal/InterviewModalContext';
-// import { InterviewModalTabs } from '@/components/interview-modal/InterviewModalTabs';
-// import { InterviewModalFooter } from '@/components/interview-modal/InterviewModalFooter';
+import { InterviewModalProvider } from '@/components/interview-modal/InterviewModalContext';
+import { InterviewModalTabs } from '@/components/interview-modal/InterviewModalTabs';
+import { InterviewModalFooter } from '@/components/interview-modal/InterviewModalFooter';
 import { AIErrorBoundary, InlineErrorBoundary, SpeechErrorBoundary } from '@/components/error-boundary';
-import { CallModalFooter } from '@/components/call-modal/CallModalFooter';
-import { CallModalProvider } from '@/components/call-modal/CallModalContext';
-import { CallModalTabs } from '@/components/call-modal/CallModalTabs';
 
 export default function ChatPage() {
     // Knowledge context for the optimized system
@@ -47,10 +44,10 @@ export default function ChatPage() {
     const visualizationStartedRef = useRef(false);
 
     // State to manage roleDescription
-    const [initialInterviewContext, setInitialInterviewContext] = useState<CallContext | null>(null);
+    const [initialInterviewContext, setInitialInterviewContext] = useState<InitialInterviewContext | null>(null);
 
     // ADDED: Handle interview start function
-    const handleInterviewStart = useCallback((context: CallContext) => {
+    const handleInterviewStart = useCallback((context: InitialInterviewContext) => {
         logger.info('🚀 Starting interview with context:', context);
         setInitialInterviewContext(context);
         setShowRoleModal(false);
@@ -236,7 +233,7 @@ export default function ChatPage() {
 
     return (
         <div className="flex flex-col h-full overflow-hidden p-1 gap-4">
-            {/* Interview Setup Modal */}
+            {/* Enhanced Interview Setup Modal */}
             {showRoleModal && (
                 <div className="fixed inset-0 z-50 flex items-center justify-center">
                     {/* Backdrop */}
@@ -253,16 +250,16 @@ export default function ChatPage() {
                         </div>
 
                         {/* Modal Body */}
-                        <CallModalProvider onSubmit={handleInterviewStart}>
+                        <InterviewModalProvider onSubmit={handleInterviewStart}>
                             <div className="overflow-y-auto max-h-[calc(90vh-140px)]">
                                 <div className="p-6">
-                                    <CallModalTabs />
+                                    <InterviewModalTabs />
                                     <div className="mt-6">
-                                        <CallModalFooter />
+                                        <InterviewModalFooter />
                                     </div>
                                 </div>
                             </div>
-                        </CallModalProvider>
+                        </InterviewModalProvider>
                     </div>
                 </div>
             )}
diff --git a/src/components/call-modal/CallModalContext.tsx b/src/components/call-modal/CallModalContext.tsx
deleted file mode 100644
index 8066905..0000000
--- a/src/components/call-modal/CallModalContext.tsx
+++ /dev/null
@@ -1,125 +0,0 @@
-// src/components/call-modal/CallModalContext.tsx
-import { createContext, useContext } from 'react';
-import { CallContext, Participant, CallObjective } from '@/types/callContext';
-import { useCallContextForm } from '@/hooks';
-
-interface CallModalContextType {
-    context: CallContext;
-    activeTab: string;
-    setActiveTab: (tab: string) => void;
-    updateField: <K extends keyof CallContext>(field: K, value: CallContext[K]) => void;
-    addToArray: <K extends keyof CallContext>(field: K, value: string) => void;
-    removeFromArray: <K extends keyof CallContext>(field: K, index: number) => void;
-    toggleInArray: <K extends keyof CallContext>(field: K, value: string) => void;
-
-    // Participant management
-    addParticipant: () => void;
-    updateParticipant: (index: number, field: keyof Participant, value: any) => void;
-    removeParticipant: (index: number) => void;
-
-    // Objective management
-    addObjective: () => void;
-    updateObjective: (index: number, field: keyof CallObjective, value: any) => void;
-    removeObjective: (index: number) => void;
-    updateObjectiveArray: (
-        objectiveIndex: number,
-        field: 'success_metrics' | 'potential_obstacles' | 'fallback_strategies',
-        items: string[]
-    ) => void;
-
-    isValid: boolean;
-    handleSubmit: () => void;
-}
-
-const CallModalContext = createContext<CallModalContextType | null>(null);
-
-export function useCallModal() {
-    const context = useContext(CallModalContext);
-    if (!context) {
-        throw new Error('useCallModal must be used within CallModalProvider');
-    }
-    return context;
-}
-
-interface CallModalProviderProps {
-    children: React.ReactNode;
-    onSubmit: (context: CallContext) => void;
-}
-
-export function CallModalProvider({ children, onSubmit }: CallModalProviderProps) {
-    const formMethods = useCallContextForm();
-
-    // Participant management functions
-    const addParticipant = () => {
-        const newParticipant: Participant = {
-            relationship: 'colleague',
-            current_sentiment: 'neutral',
-        };
-        const updatedParticipants = [...(formMethods.context.participants || []), newParticipant];
-        formMethods.updateField('participants', updatedParticipants);
-    };
-
-    const updateParticipant = (index: number, field: keyof Participant, value: any) => {
-        const updatedParticipants = [...(formMethods.context.participants || [])];
-        updatedParticipants[index] = { ...updatedParticipants[index], [field]: value };
-        formMethods.updateField('participants', updatedParticipants);
-    };
-
-    const removeParticipant = (index: number) => {
-        const updatedParticipants = (formMethods.context.participants || []).filter((_, i) => i !== index);
-        formMethods.updateField('participants', updatedParticipants);
-    };
-
-    // Objective management functions
-    const addObjective = () => {
-        const newObjective: CallObjective = {
-            primary_goal: '',
-            success_metrics: [],
-            potential_obstacles: [],
-            fallback_strategies: [],
-        };
-        const updatedObjectives = [...(formMethods.context.objectives || []), newObjective];
-        formMethods.updateField('objectives', updatedObjectives);
-    };
-
-    const updateObjective = (index: number, field: keyof CallObjective, value: any) => {
-        const updatedObjectives = [...(formMethods.context.objectives || [])];
-        updatedObjectives[index] = { ...updatedObjectives[index], [field]: value };
-        formMethods.updateField('objectives', updatedObjectives);
-    };
-
-    const removeObjective = (index: number) => {
-        const updatedObjectives = (formMethods.context.objectives || []).filter((_, i) => i !== index);
-        formMethods.updateField('objectives', updatedObjectives);
-    };
-
-    const updateObjectiveArray = (
-        objectiveIndex: number,
-        field: 'success_metrics' | 'potential_obstacles' | 'fallback_strategies',
-        items: string[]
-    ) => {
-        const updatedObjectives = [...(formMethods.context.objectives || [])];
-        updatedObjectives[objectiveIndex] = { ...updatedObjectives[objectiveIndex], [field]: items };
-        formMethods.updateField('objectives', updatedObjectives);
-    };
-
-    const handleSubmit = () => {
-        if (formMethods.isValid) {
-            onSubmit(formMethods.context);
-        }
-    };
-
-    const value: CallModalContextType = {
-        ...formMethods,
-        addParticipant,
-        updateParticipant,
-        removeParticipant,
-        addObjective,
-        updateObjective,
-        removeObjective,
-        updateObjectiveArray,
-        handleSubmit,
-    };
-
-    return <CallModalContext.Provider value={value}>{children}</CallModalContext.Provider>;
-}
diff --git a/src/components/call-modal/CallModalFooter.tsx b/src/components/call-modal/CallModalFooter.tsx
deleted file mode 100644
index 067bd59..0000000
--- a/src/components/call-modal/CallModalFooter.tsx
+++ /dev/null
@@ -1,104 +0,0 @@
-// src/components/call-modal/CallModalFooter.tsx
-import { Button } from '@/components/ui/button';
-import { useCallModal } from './CallModalContext';
-import { AlertCircle, Phone } from 'lucide-react';
-
-export function CallModalFooter() {
-    const { isValid, handleSubmit, context } = useCallModal();
-
-    const getButtonText = () => {
-        const callTypeLabels: Record<string, string> = {
-            'job-interview': '🚀 Start Interview Prep',
-            'sales-call': '💰 Start Sales Call',
-            'customer-support': '🎧 Start Support Call',
-            'relationship-talk': '❤️ Start Conversation',
-            'family-call': '👨‍👩‍👧‍👦 Start Family Call',
-            'emergency-call': '🚨 Emergency Prep',
-            'technical-support': '🔧 Start Tech Support',
-            'conflict-resolution': '🤝 Start Resolution',
-            'dating-ask': '💕 Prep for Ask',
-            'breakup-call': '💔 Prep Conversation',
-        };
-
-        return callTypeLabels[context.call_type] || '📞 Start Call Preparation';
-    };
-
-    const getValidationErrors = () => {
-        const errors: string[] = [];
-
-        if (!context.call_type) errors.push('Call type is required');
-        if (!context.call_context) errors.push('Call context is required');
-        if (!context.key_points || context.key_points.length === 0) errors.push('At least one key point is required');
-        if (!context.objectives || context.objectives.length === 0) errors.push('At least one objective is required');
-
-        // Check if objectives have primary goals
-        if (context.objectives) {
-            const incompleteObjectives = context.objectives.filter(
-                obj => !obj.primary_goal || obj.primary_goal.trim() === ''
-            );
-            if (incompleteObjectives.length > 0) {
-                errors.push(`${incompleteObjectives.length} objective(s) missing primary goal`);
-            }
-        }
-
-        return errors;
-    };
-
-    const validationErrors = getValidationErrors();
-    const hasErrors = validationErrors.length > 0;
-
-    return (
-        <div className="space-y-3">
-            {/* Validation Errors */}
-            {hasErrors && (
-                <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
-                    <div className="flex items-center gap-2 mb-2">
-                        <AlertCircle className="h-4 w-4 text-red-600" />
-                        <span className="text-sm font-medium text-red-800">Please complete required fields:</span>
-                    </div>
-                    <ul className="text-xs text-red-700 space-y-1">
-                        {validationErrors.map((error, index) => (
-                            <li key={index}>• {error}</li>
-                        ))}
-                    </ul>
-                </div>
-            )}
-
-            {/* Context-specific tips */}
-            {context.call_type && !hasErrors && (
-                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
-                    <div className="text-xs text-blue-700">
-                        {context.call_type === 'emergency-call' && (
-                            <p>⚠️ Remember: For true emergencies, contact emergency services first (911, etc.)</p>
-                        )}
-                        {context.sensitivity_level === 'highly-sensitive' && (
-                            <p>🔒 High sensitivity mode enabled - AI suggestions will be limited for privacy</p>
-                        )}
-                        {context.call_context === 'personal' && (
-                            <p>
-                                👥 Personal call mode - Emotional guidance enabled, professional boundaries maintained
-                            </p>
-                        )}
-                        {context.call_context === 'professional' && (
-                            <p>💼 Professional mode - Full AI assistance and analytics enabled</p>
-                        )}
-                    </div>
-                </div>
-            )}
-
-            {/* Action Buttons */}
-            <div className="flex justify-end space-x-2 pt-4">
-                <Button variant="outline">Cancel</Button>
-                <Button
-                    onClick={handleSubmit}
-                    disabled={!isValid || hasErrors}
-                    variant="default"
-                    className="min-w-[200px]"
-                >
-                    <Phone className="h-4 w-4 mr-2" />
-                    {getButtonText()}
-                </Button>
-            </div>
-        </div>
-    );
-}
diff --git a/src/components/call-modal/CallModalTabs.tsx b/src/components/call-modal/CallModalTabs.tsx
deleted file mode 100644
index 095db8c..0000000
--- a/src/components/call-modal/CallModalTabs.tsx
+++ /dev/null
@@ -1,44 +0,0 @@
-// src/components/call-modal/components/CallModalTabs.tsx
-import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
-import { CallDetailsTab } from './tabs/CallDetailsTab';
-import { ContentStrategyTab } from './tabs/ContentStrategyTab';
-import { ResponseSettingsTab } from './tabs/ResponseSettingsTab';
-import { AdvancedSettingsTab } from './tabs/AdvancedSettingsTab';
-import { useCallModal } from '@/components/call-modal/CallModalContext';
-import { KnowledgeBaseTab } from './tabs/KnowledgeBaseTab';
-
-export function CallModalTabs() {
-    const { activeTab, setActiveTab } = useCallModal();
-
-    return (
-        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
-            <TabsList className="grid w-full grid-cols-5">
-                <TabsTrigger value="details">📞 Call Details</TabsTrigger>
-                <TabsTrigger value="content">📝 Content & Strategy</TabsTrigger>
-                <TabsTrigger value="knowledge">🧠 Knowledge Base</TabsTrigger>
-                <TabsTrigger value="settings">⚙️ Response Settings</TabsTrigger>
-                <TabsTrigger value="advanced">🔧 Advanced</TabsTrigger>
-            </TabsList>
-
-            <TabsContent value="details" className="space-y-4">
-                <CallDetailsTab />
-            </TabsContent>
-
-            <TabsContent value="content" className="space-y-4">
-                <ContentStrategyTab />
-            </TabsContent>
-
-            <TabsContent value="knowledge" className="space-y-4">
-                <KnowledgeBaseTab />
-            </TabsContent>
-
-            <TabsContent value="settings" className="space-y-4">
-                <ResponseSettingsTab />
-            </TabsContent>
-
-            <TabsContent value="advanced" className="space-y-4">
-                <AdvancedSettingsTab />
-            </TabsContent>
-        </Tabs>
-    );
-}
diff --git a/src/components/call-modal/CallSetupModal.tsx b/src/components/call-modal/CallSetupModal.tsx
deleted file mode 100644
index 731d733..0000000
--- a/src/components/call-modal/CallSetupModal.tsx
+++ /dev/null
@@ -1,127 +0,0 @@
-/* eslint-disable @typescript-eslint/no-unused-vars */
-// src/components/call-modal/CallSetupModal.tsx
-'use client';
-import { useState } from 'react';
-import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
-import { Button } from '@/components/ui/button';
-import { CallModalProvider } from './CallModalContext';
-import { CallModalTabs } from './components/CallModalTabs';
-import { CallModalFooter } from './CallModalFooter';
-import { CallContext } from '@/types/callContext';
-import { Progress } from '@/components/ui/progress';
-import { useCallContextForm } from '@/hooks/useCallContextForm';
-import { Phone, Users, Target, Settings, Database } from 'lucide-react';
-
-interface CallSetupModalProps {
-    isOpen: boolean;
-    onClose: () => void;
-    onSubmit: (context: CallContext) => void;
-    initialContext?: Partial<CallContext>;
-}
-
-function CallSetupModalContent({ onSubmit }: { onSubmit: (context: CallContext) => void }) {
-    const { completionPercentage, activeTab } = useCallContextForm();
-
-    const getTabIcon = (tabId: string) => {
-        const icons = {
-            details: <Phone className="h-4 w-4" />,
-            content: <Target className="h-4 w-4" />,
-            knowledge: <Database className="h-4 w-4" />,
-            settings: <Settings className="h-4 w-4" />,
-            advanced: <Settings className="h-4 w-4" />,
-        };
-        return icons[tabId as keyof typeof icons] || <Phone className="h-4 w-4" />;
-    };
-
-    const getTabTitle = (tabId: string) => {
-        const titles = {
-            details: 'Call Details',
-            content: 'Content & Strategy',
-            knowledge: 'Knowledge Base',
-            settings: 'Response Settings',
-            advanced: 'Advanced Settings',
-        };
-        return titles[tabId as keyof typeof titles] || 'Setup';
-    };
-
-    return (
-        <div className="flex flex-col h-full">
-            {/* Header with Progress */}
-            <DialogHeader className="space-y-4 pb-4">
-                <div className="flex items-center justify-between">
-                    <DialogTitle className="flex items-center gap-2 text-xl">
-                        {getTabIcon(activeTab)}
-                        Call Setup - {getTabTitle(activeTab)}
-                    </DialogTitle>
-                    <div className="flex items-center gap-2">
-                        <span className="text-sm text-gray-500">Progress:</span>
-                        <div className="w-24">
-                            <Progress value={completionPercentage} className="h-2" />
-                        </div>
-                        <span className="text-sm font-medium text-gray-700">{completionPercentage}%</span>
-                    </div>
-                </div>
-
-                <div className="text-sm text-gray-600">
-                    Configure your AI assistant for the upcoming call. Complete all required sections to enable full
-                    assistance.
-                </div>
-            </DialogHeader>
-
-            {/* Main Content */}
-            <div className="flex-1 overflow-auto">
-                <CallModalTabs />
-            </div>
-
-            {/* Footer */}
-            <div className="border-t mt-4">
-                <CallModalFooter />
-            </div>
-        </div>
-    );
-}
-
-export function CallSetupModal({ isOpen, onClose, onSubmit, initialContext }: CallSetupModalProps) {
-    return (
-        <Dialog open={isOpen} onOpenChange={onClose}>
-            <DialogContent className="max-w-4xl max-h-[90vh] p-6">
-                <CallModalProvider onSubmit={onSubmit}>
-                    <CallSetupModalContent onSubmit={onSubmit} />
-                </CallModalProvider>
-            </DialogContent>
-        </Dialog>
-    );
-}
-
-// Export a simplified trigger component
-interface CallSetupTriggerProps {
-    onCallConfigured: (context: CallContext) => void;
-    triggerText?: string;
-    variant?: 'default' | 'outline' | 'ghost';
-    className?: string;
-}
-
-export function CallSetupTrigger({
-    onCallConfigured,
-    triggerText = 'Setup Call',
-    variant = 'default',
-    className,
-}: CallSetupTriggerProps) {
-    const [isOpen, setIsOpen] = useState(false);
-
-    const handleSubmit = (context: CallContext) => {
-        onCallConfigured(context);
-        setIsOpen(false);
-    };
-
-    return (
-        <>
-            <Button onClick={() => setIsOpen(true)} variant={variant} className={className}>
-                <Phone className="h-4 w-4 mr-2" />
-                {triggerText}
-            </Button>
-
-            <CallSetupModal isOpen={isOpen} onClose={() => setIsOpen(false)} onSubmit={handleSubmit} />
-        </>
-    );
-}
diff --git a/src/components/call-modal/components/CallModalTabs.tsx b/src/components/call-modal/components/CallModalTabs.tsx
deleted file mode 100644
index 524860b..0000000
--- a/src/components/call-modal/components/CallModalTabs.tsx
+++ /dev/null
@@ -1,44 +0,0 @@
-// src/components/call-modal/components/CallModalTabs.tsx
-import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
-import { CallDetailsTab } from '../tabs/CallDetailsTab';
-import { ContentStrategyTab } from '../tabs/ContentStrategyTab';
-import { ResponseSettingsTab } from '../tabs/ResponseSettingsTab';
-import { AdvancedSettingsTab } from '../tabs/AdvancedSettingsTab';
-import { useCallModal } from '../CallModalContext';
-import { KnowledgeBaseTab } from '../tabs/KnowledgeBaseTab';
-
-export function CallModalTabs() {
-    const { activeTab, setActiveTab } = useCallModal();
-
-    return (
-        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
-            <TabsList className="grid w-full grid-cols-5">
-                <TabsTrigger value="details">📞 Call Details</TabsTrigger>
-                <TabsTrigger value="content">📝 Content & Strategy</TabsTrigger>
-                <TabsTrigger value="knowledge">🧠 Knowledge Base</TabsTrigger>
-                <TabsTrigger value="settings">⚙️ Response Settings</TabsTrigger>
-                <TabsTrigger value="advanced">🔧 Advanced</TabsTrigger>
-            </TabsList>
-
-            <TabsContent value="details" className="space-y-4">
-                <CallDetailsTab />
-            </TabsContent>
-
-            <TabsContent value="content" className="space-y-4">
-                <ContentStrategyTab />
-            </TabsContent>
-
-            <TabsContent value="knowledge" className="space-y-4">
-                <KnowledgeBaseTab />
-            </TabsContent>
-
-            <TabsContent value="settings" className="space-y-4">
-                <ResponseSettingsTab />
-            </TabsContent>
-
-            <TabsContent value="advanced" className="space-y-4">
-                <AdvancedSettingsTab />
-            </TabsContent>
-        </Tabs>
-    );
-}
diff --git a/src/components/call-modal/components/DynamicList.tsx b/src/components/call-modal/components/DynamicList.tsx
deleted file mode 100644
index 4542e08..0000000
--- a/src/components/call-modal/components/DynamicList.tsx
+++ /dev/null
@@ -1,57 +0,0 @@
-// src\components\call-modal\components\DynamicList.tsx
-'use client';
-import { Badge } from '@/components/ui/badge';
-import { Button } from '@/components/ui/button';
-import { Input } from '@/components/ui/input';
-import { useDynamicList } from '@/hooks';
-import { Plus, X } from 'lucide-react';
-import { useEffect } from 'react';
-
-interface DynamicListProps {
-    items: string[];
-    onItemsChange: (items: string[]) => void;
-    placeholder?: string;
-    addButtonText?: string;
-}
-
-export function DynamicList({ items, onItemsChange, placeholder, addButtonText = 'Add' }: DynamicListProps) {
-    const { items: localItems, newItem, setNewItem, addItemFromInput, removeItem } = useDynamicList(items);
-
-    // FIXED: Only call onItemsChange when localItems actually changes
-    useEffect(() => {
-        // Only update if the arrays are actually different
-        if (JSON.stringify(localItems) !== JSON.stringify(items)) {
-            onItemsChange(localItems);
-        }
-    }, [localItems, items, onItemsChange]);
-
-    const handleAddClick = () => {
-        addItemFromInput();
-    };
-
-    return (
-        <div className="space-y-3">
-            <div className="flex gap-2">
-                <Input
-                    value={newItem}
-                    onChange={e => setNewItem(e.target.value)}
-                    placeholder={placeholder}
-                    onKeyDown={e => e.key === 'Enter' && addItemFromInput()}
-                />
-                <Button onClick={handleAddClick} size="sm" variant="outline">
-                    <Plus className="h-4 w-4" />
-                    {addButtonText}
-                </Button>
-            </div>
-
-            <div className="flex flex-wrap gap-2">
-                {localItems.map((item, index) => (
-                    <Badge key={index} variant="outline" className="flex gap-1 items-center">
-                        {item}
-                        <X className="h-3 w-3 cursor-pointer" onClick={() => removeItem(index)} />
-                    </Badge>
-                ))}
-            </div>
-        </div>
-    );
-}
diff --git a/src/components/call-modal/components/FormField.tsx b/src/components/call-modal/components/FormField.tsx
deleted file mode 100644
index 6fe17ef..0000000
--- a/src/components/call-modal/components/FormField.tsx
+++ /dev/null
@@ -1,24 +0,0 @@
-// src/components/interview-modal/components/FormField.tsx
-import { Label } from '@/components/ui/label';
-import { cn } from '@/lib/utils';
-
-interface FormFieldProps {
-    label: string;
-    error?: string;
-    required?: boolean;
-    children: React.ReactNode;
-    className?: string;
-}
-
-export function FormField({ label, error, required, children, className }: FormFieldProps) {
-    return (
-        <div className={cn('space-y-2', className)}>
-            <Label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
-                {label}
-                {required && <span className="text-destructive ml-1">*</span>}
-            </Label>
-            {children}
-            {error && <p className="text-sm text-destructive">{error}</p>}
-        </div>
-    );
-}
diff --git a/src/components/call-modal/tabs/AdvancedSettingsTab.tsx b/src/components/call-modal/tabs/AdvancedSettingsTab.tsx
deleted file mode 100644
index caab1b6..0000000
--- a/src/components/call-modal/tabs/AdvancedSettingsTab.tsx
+++ /dev/null
@@ -1,323 +0,0 @@
-/* eslint-disable @typescript-eslint/no-unused-vars */
-// src/components/call-modal/tabs/AdvancedSettingsTab.tsx
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-import { Input } from '@/components/ui/input';
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
-import { Switch } from '@/components/ui/switch';
-import { FormField } from '@/components/call-modal/components/FormField';
-import { useCallModal } from '@/components/call-modal/CallModalContext';
-import { CallContext } from '@/types/callContext';
-import { Clock, FileText, Database, Shield, Settings2, AlertTriangle } from 'lucide-react';
-
-export function AdvancedSettingsTab() {
-    const { context, updateField } = useCallModal();
-
-    const getPrivacyRecommendation = () => {
-        if (context.sensitivity_level === 'highly-sensitive' || context.call_context === 'personal') {
-            return {
-                knowledge_search_enabled: false,
-                knowledge_search_scope: 'professional-only',
-                message: 'Privacy-first settings recommended for sensitive conversations',
-                color: 'red',
-            };
-        } else if (context.call_context === 'professional') {
-            return {
-                knowledge_search_enabled: true,
-                knowledge_search_scope: 'all',
-                message: 'Full knowledge access recommended for professional calls',
-                color: 'green',
-            };
-        } else {
-            return {
-                knowledge_search_enabled: true,
-                knowledge_search_scope: 'professional-only',
-                message: 'Balanced privacy settings recommended',
-                color: 'blue',
-            };
-        }
-    };
-
-    const privacyRec = getPrivacyRecommendation();
-
-    return (
-        <div className="space-y-6">
-            {/* Session Metadata */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Clock className="h-5 w-5" />
-                        Session Planning
-                    </CardTitle>
-                    <p className="text-sm text-gray-600">Set expectations and planning details for this call</p>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <div className="grid grid-cols-2 gap-4">
-                        <FormField label="Estimated Duration">
-                            <Input
-                                value={context.estimated_duration || ''}
-                                onChange={e => updateField('estimated_duration', e.target.value)}
-                                placeholder="e.g., 30 minutes, 1 hour"
-                            />
-                        </FormField>
-
-                        <div className="space-y-4">
-                            <div className="flex items-center justify-between p-3 border rounded-lg">
-                                <div>
-                                    <label className="text-sm font-medium">Follow-up Required</label>
-                                    <p className="text-xs text-gray-500">Plan for post-call actions</p>
-                                </div>
-                                <Switch
-                                    checked={context.follow_up_required || false}
-                                    onCheckedChange={checked => updateField('follow_up_required', checked)}
-                                />
-                            </div>
-
-                            <div className="flex items-center justify-between p-3 border rounded-lg">
-                                <div>
-                                    <label className="text-sm font-medium">Documentation Needed</label>
-                                    <p className="text-xs text-gray-500">Save conversation notes</p>
-                                </div>
-                                <Switch
-                                    checked={context.documentation_needed || false}
-                                    onCheckedChange={checked => updateField('documentation_needed', checked)}
-                                />
-                            </div>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Knowledge Integration */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Database className="h-5 w-5" />
-                        Knowledge Base Integration
-                    </CardTitle>
-                    <p className="text-sm text-gray-600">Control how your knowledge base is used during this call</p>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <div className="flex items-center justify-between p-4 border rounded-lg">
-                        <div>
-                            <label className="text-sm font-medium">Enable Knowledge Search</label>
-                            <p className="text-xs text-gray-500">
-                                Allow AI to search your uploaded documents and notes
-                            </p>
-                        </div>
-                        <Switch
-                            checked={context.knowledge_search_enabled}
-                            onCheckedChange={checked => updateField('knowledge_search_enabled', checked)}
-                        />
-                    </div>
-
-                    {context.knowledge_search_enabled && (
-                        <FormField label="Knowledge Search Scope">
-                            <Select
-                                value={context.knowledge_search_scope || 'all'}
-                                onValueChange={value =>
-                                    updateField(
-                                        'knowledge_search_scope',
-                                        value as CallContext['knowledge_search_scope']
-                                    )
-                                }
-                            >
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="all">🌐 All Knowledge (Professional + Personal)</SelectItem>
-                                    <SelectItem value="professional-only">💼 Professional Only</SelectItem>
-                                    <SelectItem value="personal-only">👤 Personal Only</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-                    )}
-
-                    {/* Privacy Recommendation */}
-                    <div
-                        className={`p-4 rounded-lg border-2 ${
-                            privacyRec.color === 'red'
-                                ? 'bg-red-50 border-red-200'
-                                : privacyRec.color === 'green'
-                                ? 'bg-green-50 border-green-200'
-                                : 'bg-blue-50 border-blue-200'
-                        }`}
-                    >
-                        <div className="flex items-center gap-2 mb-2">
-                            <Shield
-                                className={`h-4 w-4 ${
-                                    privacyRec.color === 'red'
-                                        ? 'text-red-600'
-                                        : privacyRec.color === 'green'
-                                        ? 'text-green-600'
-                                        : 'text-blue-600'
-                                }`}
-                            />
-                            <span
-                                className={`text-sm font-medium ${
-                                    privacyRec.color === 'red'
-                                        ? 'text-red-800'
-                                        : privacyRec.color === 'green'
-                                        ? 'text-green-800'
-                                        : 'text-blue-800'
-                                }`}
-                            >
-                                Privacy Recommendation
-                            </span>
-                        </div>
-                        <p
-                            className={`text-xs ${
-                                privacyRec.color === 'red'
-                                    ? 'text-red-700'
-                                    : privacyRec.color === 'green'
-                                    ? 'text-green-700'
-                                    : 'text-blue-700'
-                            }`}
-                        >
-                            {privacyRec.message}
-                        </p>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Safety & Privacy Controls */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Shield className="h-5 w-5" />
-                        Safety & Privacy Controls
-                    </CardTitle>
-                    <p className="text-sm text-gray-600">Additional safety measures based on call sensitivity</p>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    {/* Sensitivity-based warnings */}
-                    {context.sensitivity_level === 'highly-sensitive' && (
-                        <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
-                            <div className="flex items-center gap-2 mb-2">
-                                <AlertTriangle className="h-4 w-4 text-yellow-600" />
-                                <span className="text-sm font-medium text-yellow-800">High Sensitivity Mode</span>
-                            </div>
-                            <ul className="text-xs text-yellow-700 space-y-1">
-                                <li>• Consider disabling live AI suggestions</li>
-                                <li>• Limit knowledge base access to essential information only</li>
-                                <li>• Review all AI guidance before using</li>
-                                <li>• Ensure conversation privacy after the call</li>
-                            </ul>
-                        </div>
-                    )}
-
-                    {/* Emergency call warnings */}
-                    {context.call_type === 'emergency-call' && (
-                        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
-                            <div className="flex items-center gap-2 mb-2">
-                                <AlertTriangle className="h-4 w-4 text-red-600" />
-                                <span className="text-sm font-medium text-red-800">Emergency Call Protocol</span>
-                            </div>
-                            <ul className="text-xs text-red-700 space-y-1">
-                                <li>• AI suggestions are automatically disabled for safety</li>
-                                <li>• Focus on clear, direct communication</li>
-                                <li>• Follow established emergency protocols</li>
-                                <li>• Document critical information immediately</li>
-                            </ul>
-                        </div>
-                    )}
-
-                    {/* Personal call privacy */}
-                    {context.call_context === 'personal' && (
-                        <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
-                            <div className="flex items-center gap-2 mb-2">
-                                <Shield className="h-4 w-4 text-purple-600" />
-                                <span className="text-sm font-medium text-purple-800">Personal Privacy Mode</span>
-                            </div>
-                            <ul className="text-xs text-purple-700 space-y-1">
-                                <li>• Conversation insights may be limited</li>
-                                <li>• Consider what information you&apos;re comfortable sharing with AI</li>
-                                <li>• Professional boundaries maintained in all guidance</li>
-                            </ul>
-                        </div>
-                    )}
-                </CardContent>
-            </Card>
-
-            {/* Technical Settings */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Settings2 className="h-5 w-5" />
-                        Technical Preferences
-                    </CardTitle>
-                    <p className="text-sm text-gray-600">Fine-tune technical aspects of AI assistance</p>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <div className="grid grid-cols-2 gap-4">
-                        <div className="p-3 border rounded-lg">
-                            <label className="text-sm font-medium block mb-1">Knowledge Relevance Threshold</label>
-                            <p className="text-xs text-gray-500 mb-2">How closely must content match to be included</p>
-                            <Select defaultValue="medium">
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="low">Low (Include more context)</SelectItem>
-                                    <SelectItem value="medium">Medium (Balanced relevance)</SelectItem>
-                                    <SelectItem value="high">High (Only highly relevant)</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </div>
-
-                        <div className="p-3 border rounded-lg">
-                            <label className="text-sm font-medium block mb-1">Response Timing</label>
-                            <p className="text-xs text-gray-500 mb-2">When to provide AI suggestions</p>
-                            <Select defaultValue="balanced">
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="proactive">Proactive (Anticipate needs)</SelectItem>
-                                    <SelectItem value="balanced">Balanced (Natural timing)</SelectItem>
-                                    <SelectItem value="reactive">Reactive (Only when asked)</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Settings Summary */}
-            <Card className="bg-gray-50 border-gray-200">
-                <CardHeader>
-                    <CardTitle className="text-gray-800">📋 Advanced Settings Summary</CardTitle>
-                </CardHeader>
-                <CardContent className="text-sm text-gray-700">
-                    <div className="grid grid-cols-2 gap-4">
-                        <div className="space-y-1">
-                            <p>
-                                <strong>Duration:</strong> {context.estimated_duration || 'Not specified'}
-                            </p>
-                            <p>
-                                <strong>Follow-up:</strong>{' '}
-                                {context.follow_up_required ? '✅ Required' : '❌ Not needed'}
-                            </p>
-                            <p>
-                                <strong>Documentation:</strong>{' '}
-                                {context.documentation_needed ? '✅ Required' : '❌ Not needed'}
-                            </p>
-                        </div>
-                        <div className="space-y-1">
-                            <p>
-                                <strong>Knowledge Search:</strong>{' '}
-                                {context.knowledge_search_enabled ? '✅ Enabled' : '❌ Disabled'}
-                            </p>
-                            <p>
-                                <strong>Search Scope:</strong> {context.knowledge_search_scope || 'All'}
-                            </p>
-                            <p>
-                                <strong>Privacy Level:</strong> {context.sensitivity_level}
-                            </p>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-        </div>
-    );
-}
diff --git a/src/components/call-modal/tabs/CallDetailsTab.tsx b/src/components/call-modal/tabs/CallDetailsTab.tsx
deleted file mode 100644
index b9644a2..0000000
--- a/src/components/call-modal/tabs/CallDetailsTab.tsx
+++ /dev/null
@@ -1,358 +0,0 @@
-/* eslint-disable @typescript-eslint/no-unused-vars */
-// src/components/call-modal/tabs/CallDetailsTab.tsx
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-import { Input } from '@/components/ui/input';
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
-import { Button } from '@/components/ui/button';
-import { useCallModal } from '../CallModalContext';
-import { CallContext, Participant } from '@/types/callContext';
-import { Plus, Trash2, Users, Phone, Target } from 'lucide-react';
-import { FormField } from '@/components/call-modal/components/FormField';
-
-export function CallDetailsTab() {
-    const { context, updateField, addParticipant, updateParticipant, removeParticipant } = useCallModal();
-
-    const getCallTypesByContext = (callContext: string) => {
-        const allCallTypes = {
-            professional: [
-                { value: 'job-interview', label: '💼 Job Interview' },
-                { value: 'performance-review', label: '📊 Performance Review' },
-                { value: 'sales-call', label: '💰 Sales Call' },
-                { value: 'customer-support', label: '🎧 Customer Support' },
-                { value: 'client-meeting', label: '🤝 Client Meeting' },
-                { value: 'team-meeting', label: '👥 Team Meeting' },
-                { value: 'negotiation', label: '⚖️ Negotiation' },
-                { value: 'project-discussion', label: '📋 Project Discussion' },
-                { value: 'hiring-call', label: '🎯 Hiring Call' },
-                { value: 'termination-call', label: '⚠️ Termination Call' },
-                { value: 'discipline-call', label: '📢 Discipline Call' },
-            ],
-            personal: [
-                { value: 'dating-ask', label: '💕 Dating Ask' },
-                { value: 'relationship-talk', label: '❤️ Relationship Talk' },
-                { value: 'breakup-call', label: '💔 Breakup Call' },
-                { value: 'family-call', label: '👨‍👩‍👧‍👦 Family Call' },
-                { value: 'friend-checkin', label: '👋 Friend Check-in' },
-                { value: 'conflict-resolution', label: '🤝 Conflict Resolution' },
-                { value: 'support-call', label: '🤗 Support Call' },
-                { value: 'celebration-call', label: '🎉 Celebration Call' },
-            ],
-            service: [
-                { value: 'technical-support', label: '🔧 Technical Support' },
-                { value: 'medical-consultation', label: '🏥 Medical Consultation' },
-                { value: 'legal-consultation', label: '⚖️ Legal Consultation' },
-                { value: 'financial-advice', label: '💳 Financial Advice' },
-                { value: 'dispute-resolution', label: '🤝 Dispute Resolution' },
-            ],
-            emergency: [{ value: 'emergency-call', label: '🚨 Emergency Call' }],
-        };
-
-        return allCallTypes[callContext as keyof typeof allCallTypes] || [];
-    };
-
-    return (
-        <div className="space-y-6">
-            {/* Core Call Identification */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Phone className="h-5 w-5" />
-                        Core Call Information
-                    </CardTitle>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <div className="grid grid-cols-2 gap-4">
-                        <FormField label="Call Context" required>
-                            <Select
-                                value={context.call_context}
-                                onValueChange={value =>
-                                    updateField('call_context', value as CallContext['call_context'])
-                                }
-                            >
-                                <SelectTrigger>
-                                    <SelectValue placeholder="Select context" />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="professional">🏢 Professional</SelectItem>
-                                    <SelectItem value="personal">👥 Personal</SelectItem>
-                                    <SelectItem value="service">🛠️ Service</SelectItem>
-                                    <SelectItem value="emergency">🚨 Emergency</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-
-                        <FormField label="Call Type" required>
-                            <Select
-                                value={context.call_type}
-                                onValueChange={value => updateField('call_type', value as CallContext['call_type'])}
-                            >
-                                <SelectTrigger>
-                                    <SelectValue placeholder="Select call type" />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    {getCallTypesByContext(context.call_context).map(type => (
-                                        <SelectItem key={type.value} value={type.value}>
-                                            {type.label}
-                                        </SelectItem>
-                                    ))}
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-                    </div>
-
-                    <div className="grid grid-cols-2 gap-4">
-                        <FormField label="Urgency Level">
-                            <Select
-                                value={context.urgency_level}
-                                onValueChange={value =>
-                                    updateField('urgency_level', value as CallContext['urgency_level'])
-                                }
-                            >
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="low">🟢 Low</SelectItem>
-                                    <SelectItem value="medium">🟡 Medium</SelectItem>
-                                    <SelectItem value="high">🟠 High</SelectItem>
-                                    <SelectItem value="critical">🔴 Critical</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-
-                        <FormField label="Sensitivity Level">
-                            <Select
-                                value={context.sensitivity_level}
-                                onValueChange={value =>
-                                    updateField('sensitivity_level', value as CallContext['sensitivity_level'])
-                                }
-                            >
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="public">📢 Public</SelectItem>
-                                    <SelectItem value="confidential">🔒 Confidential</SelectItem>
-                                    <SelectItem value="personal">👤 Personal</SelectItem>
-                                    <SelectItem value="highly-sensitive">🔐 Highly Sensitive</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Participants */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Users className="h-5 w-5" />
-                        Participants & Relationships
-                    </CardTitle>
-                    <div className="flex items-center justify-between">
-                        <p className="text-sm text-gray-600">Add details about who you&apos;ll be speaking with</p>
-                        <Button onClick={addParticipant} size="sm" variant="outline">
-                            <Plus className="h-4 w-4 mr-1" />
-                            Add Participant
-                        </Button>
-                    </div>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    {context.participants?.length === 0 ? (
-                        <div className="text-center py-8 text-gray-500">
-                            <Users className="h-12 w-12 mx-auto mb-2 opacity-50" />
-                            <p>No participants added yet</p>
-                            <p className="text-sm">Click &quot;Add Participant&quot; to start</p>
-                        </div>
-                    ) : (
-                        context.participants?.map((participant, index) => (
-                            <Card key={index} className="border border-gray-200">
-                                <CardHeader className="pb-4">
-                                    <div className="flex items-center justify-between">
-                                        <h4 className="font-medium">Participant {index + 1}</h4>
-                                        <Button
-                                            variant="ghost"
-                                            size="sm"
-                                            onClick={() => removeParticipant(index)}
-                                            className="text-red-500 hover:text-red-700"
-                                        >
-                                            <Trash2 className="h-4 w-4" />
-                                        </Button>
-                                    </div>
-                                </CardHeader>
-                                <CardContent className="space-y-4">
-                                    <div className="grid grid-cols-2 gap-4">
-                                        <FormField label="Name (Optional)">
-                                            <Input
-                                                value={participant.name || ''}
-                                                onChange={e => updateParticipant(index, 'name', e.target.value)}
-                                                placeholder="Enter participant's name"
-                                            />
-                                        </FormField>
-
-                                        <FormField label="Relationship">
-                                            <Select
-                                                value={participant.relationship}
-                                                onValueChange={value => updateParticipant(index, 'relationship', value)}
-                                            >
-                                                <SelectTrigger>
-                                                    <SelectValue />
-                                                </SelectTrigger>
-                                                <SelectContent>
-                                                    <SelectItem value="colleague">👨‍💼 Colleague</SelectItem>
-                                                    <SelectItem value="manager">👔 Manager</SelectItem>
-                                                    <SelectItem value="direct-report">📊 Direct Report</SelectItem>
-                                                    <SelectItem value="client">🤝 Client</SelectItem>
-                                                    <SelectItem value="prospect">🎯 Prospect</SelectItem>
-                                                    <SelectItem value="customer">🛒 Customer</SelectItem>
-                                                    <SelectItem value="partner">🤝 Partner</SelectItem>
-                                                    <SelectItem value="friend">👫 Friend</SelectItem>
-                                                    <SelectItem value="family">👨‍👩‍👧‍👦 Family</SelectItem>
-                                                    <SelectItem value="romantic-interest">
-                                                        💕 Romantic Interest
-                                                    </SelectItem>
-                                                    <SelectItem value="spouse">💍 Spouse</SelectItem>
-                                                    <SelectItem value="stranger">🤷 Stranger</SelectItem>
-                                                    <SelectItem value="authority">⚖️ Authority</SelectItem>
-                                                </SelectContent>
-                                            </Select>
-                                        </FormField>
-                                    </div>
-
-                                    <FormField label="Current Sentiment">
-                                        <Select
-                                            value={participant.current_sentiment || 'neutral'}
-                                            onValueChange={value =>
-                                                updateParticipant(index, 'current_sentiment', value)
-                                            }
-                                        >
-                                            <SelectTrigger>
-                                                <SelectValue />
-                                            </SelectTrigger>
-                                            <SelectContent>
-                                                <SelectItem value="positive">😊 Positive</SelectItem>
-                                                <SelectItem value="neutral">😐 Neutral</SelectItem>
-                                                <SelectItem value="frustrated">😤 Frustrated</SelectItem>
-                                                <SelectItem value="angry">😠 Angry</SelectItem>
-                                                <SelectItem value="sad">😢 Sad</SelectItem>
-                                                <SelectItem value="unknown">❓ Unknown</SelectItem>
-                                            </SelectContent>
-                                        </Select>
-                                    </FormField>
-                                </CardContent>
-                            </Card>
-                        ))
-                    )}
-
-                    {/* Power Dynamic */}
-                    {context.participants && context.participants.length > 0 && (
-                        <div className="pt-4 border-t">
-                            <FormField label="Power Dynamic">
-                                <Select
-                                    value={context.power_dynamic}
-                                    onValueChange={value =>
-                                        updateField('power_dynamic', value as CallContext['power_dynamic'])
-                                    }
-                                >
-                                    <SelectTrigger>
-                                        <SelectValue />
-                                    </SelectTrigger>
-                                    <SelectContent>
-                                        <SelectItem value="equal">⚖️ Equal</SelectItem>
-                                        <SelectItem value="you-higher">⬆️ You Higher</SelectItem>
-                                        <SelectItem value="them-higher">⬇️ Them Higher</SelectItem>
-                                        <SelectItem value="neutral">➡️ Neutral</SelectItem>
-                                    </SelectContent>
-                                </Select>
-                            </FormField>
-                        </div>
-                    )}
-                </CardContent>
-            </Card>
-
-            {/* Call Tone & Approach */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Target className="h-5 w-5" />
-                        Communication Style
-                    </CardTitle>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <div className="grid grid-cols-2 gap-4">
-                        <FormField label="Desired Tone">
-                            <Select
-                                value={context.desired_tone}
-                                onValueChange={value =>
-                                    updateField('desired_tone', value as CallContext['desired_tone'])
-                                }
-                            >
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="professional">💼 Professional</SelectItem>
-                                    <SelectItem value="friendly">😊 Friendly</SelectItem>
-                                    <SelectItem value="empathetic">❤️ Empathetic</SelectItem>
-                                    <SelectItem value="assertive">💪 Assertive</SelectItem>
-                                    <SelectItem value="casual">😎 Casual</SelectItem>
-                                    <SelectItem value="formal">🎩 Formal</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-
-                        <FormField label="Communication Approach">
-                            <Select
-                                value={context.communication_approach}
-                                onValueChange={value =>
-                                    updateField(
-                                        'communication_approach',
-                                        value as CallContext['communication_approach']
-                                    )
-                                }
-                            >
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="direct">🎯 Direct</SelectItem>
-                                    <SelectItem value="diplomatic">🤝 Diplomatic</SelectItem>
-                                    <SelectItem value="collaborative">👥 Collaborative</SelectItem>
-                                    <SelectItem value="supportive">🤗 Supportive</SelectItem>
-                                    <SelectItem value="persuasive">💡 Persuasive</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Context Tips */}
-            <Card className="bg-blue-50 border-blue-200">
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2 text-blue-800">💡 Context Tips</CardTitle>
-                </CardHeader>
-                <CardContent className="text-sm text-blue-700 space-y-2">
-                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-                        <div className="space-y-2">
-                            <p>
-                                <strong>Professional calls:</strong> Enable full AI assistance and analytics
-                            </p>
-                            <p>
-                                <strong>Personal calls:</strong> Consider privacy mode and emotional guidance
-                            </p>
-                        </div>
-                        <div className="space-y-2">
-                            <p>
-                                <strong>Sensitive topics:</strong> Use higher sensitivity levels for privacy protection
-                            </p>
-                            <p>
-                                <strong>Emergency calls:</strong> Disable AI suggestions for critical safety situations
-                            </p>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-        </div>
-    );
-}
diff --git a/src/components/call-modal/tabs/ContentStrategyTab.tsx b/src/components/call-modal/tabs/ContentStrategyTab.tsx
deleted file mode 100644
index af67681..0000000
--- a/src/components/call-modal/tabs/ContentStrategyTab.tsx
+++ /dev/null
@@ -1,221 +0,0 @@
-/* eslint-disable @typescript-eslint/no-unused-vars */
-// src/components/call-modal/tabs/ContentStrategyTab.tsx
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-import { Input } from '@/components/ui/input';
-import { Textarea } from '@/components/ui/textarea';
-import { Button } from '@/components/ui/button';
-import { useCallModal } from '../CallModalContext';
-import { CallObjective } from '@/types/callContext';
-import { Plus, Trash2, Target, MessageCircle, AlertTriangle, HelpCircle } from 'lucide-react';
-import { FormField } from '../components/FormField';
-import { DynamicList } from '@/components/call-modal/components/DynamicList';
-
-export function ContentStrategyTab() {
-    const { context, updateField, addObjective, updateObjective, removeObjective, updateObjectiveArray } =
-        useCallModal();
-
-    return (
-        <div className="space-y-6">
-            {/* Call Objectives */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Target className="h-5 w-5" />
-                        Call Objectives
-                    </CardTitle>
-                    <div className="flex items-center justify-between">
-                        <p className="text-sm text-gray-600">Define what you want to achieve from this call</p>
-                        <Button onClick={addObjective} size="sm" variant="outline">
-                            <Plus className="h-4 w-4 mr-1" />
-                            Add Objective
-                        </Button>
-                    </div>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    {context.objectives?.length === 0 ? (
-                        <div className="text-center py-8 text-gray-500">
-                            <Target className="h-12 w-12 mx-auto mb-2 opacity-50" />
-                            <p>No objectives defined yet</p>
-                            <p className="text-sm">Click &quot;Add Objective&quot; to set your goals</p>
-                        </div>
-                    ) : (
-                        context.objectives?.map((objective, index) => (
-                            <Card key={index} className="border border-gray-200">
-                                <CardHeader className="pb-4">
-                                    <div className="flex items-center justify-between">
-                                        <h4 className="font-medium">Objective {index + 1}</h4>
-                                        <Button
-                                            variant="ghost"
-                                            size="sm"
-                                            onClick={() => removeObjective(index)}
-                                            className="text-red-500 hover:text-red-700"
-                                        >
-                                            <Trash2 className="h-4 w-4" />
-                                        </Button>
-                                    </div>
-                                </CardHeader>
-                                <CardContent className="space-y-4">
-                                    <FormField label="Primary Goal" required>
-                                        <Textarea
-                                            value={objective.primary_goal}
-                                            onChange={e => updateObjective(index, 'primary_goal', e.target.value)}
-                                            placeholder="Describe the main goal for this objective..."
-                                            rows={2}
-                                        />
-                                    </FormField>
-
-                                    <div className="grid md:grid-cols-2 gap-4">
-                                        <div>
-                                            <FormField label="Success Metrics">
-                                                <DynamicList
-                                                    items={objective.success_metrics || []}
-                                                    onItemsChange={items =>
-                                                        updateObjectiveArray(index, 'success_metrics', items)
-                                                    }
-                                                    placeholder="How will you measure success?"
-                                                    addButtonText="Add Metric"
-                                                />
-                                            </FormField>
-                                        </div>
-
-                                        <div>
-                                            <FormField label="Potential Obstacles">
-                                                <DynamicList
-                                                    items={objective.potential_obstacles || []}
-                                                    onItemsChange={items =>
-                                                        updateObjectiveArray(index, 'potential_obstacles', items)
-                                                    }
-                                                    placeholder="What might get in the way?"
-                                                    addButtonText="Add Obstacle"
-                                                />
-                                            </FormField>
-                                        </div>
-                                    </div>
-
-                                    <FormField label="Fallback Strategies">
-                                        <DynamicList
-                                            items={objective.fallback_strategies || []}
-                                            onItemsChange={items =>
-                                                updateObjectiveArray(index, 'fallback_strategies', items)
-                                            }
-                                            placeholder="What's your plan B if this doesn't work?"
-                                            addButtonText="Add Strategy"
-                                        />
-                                    </FormField>
-                                </CardContent>
-                            </Card>
-                        ))
-                    )}
-                </CardContent>
-            </Card>
-
-            {/* Key Points to Cover */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <MessageCircle className="h-5 w-5" />
-                        Content Planning
-                    </CardTitle>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <FormField label="Key Points to Cover" required>
-                        <p className="text-sm text-gray-600 mb-2">Main topics you need to discuss during the call</p>
-                        <DynamicList
-                            items={context.key_points || []}
-                            onItemsChange={items => updateField('key_points', items)}
-                            placeholder="Add a key point or topic to cover..."
-                            addButtonText="Add Point"
-                        />
-                    </FormField>
-
-                    <FormField label="Sensitive Topics">
-                        <p className="text-sm text-gray-600 mb-2">Topics to handle carefully or avoid entirely</p>
-                        <DynamicList
-                            items={context.sensitive_topics || []}
-                            onItemsChange={items => updateField('sensitive_topics', items)}
-                            placeholder="Add a sensitive topic to be mindful of..."
-                            addButtonText="Add Topic"
-                        />
-                    </FormField>
-
-                    <FormField label="Questions to Ask">
-                        <p className="text-sm text-gray-600 mb-2">
-                            Strategic questions you want to pose during the call
-                        </p>
-                        <DynamicList
-                            items={context.questions_to_ask || []}
-                            onItemsChange={items => updateField('questions_to_ask', items)}
-                            placeholder="Add a question you want to ask..."
-                            addButtonText="Add Question"
-                        />
-                    </FormField>
-                </CardContent>
-            </Card>
-
-            {/* Quick Templates by Call Type */}
-            <Card className="bg-green-50 border-green-200">
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2 text-green-800">🎯 Quick Templates</CardTitle>
-                </CardHeader>
-                <CardContent className="text-sm text-green-700">
-                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
-                        <div className="space-y-2">
-                            <p className="font-medium">Sales Call:</p>
-                            <ul className="text-xs space-y-1">
-                                <li>• Discover current challenges</li>
-                                <li>• Present value proposition</li>
-                                <li>• Handle objections</li>
-                                <li>• Secure next steps</li>
-                            </ul>
-                        </div>
-                        <div className="space-y-2">
-                            <p className="font-medium">Difficult Conversation:</p>
-                            <ul className="text-xs space-y-1">
-                                <li>• Acknowledge their perspective</li>
-                                <li>• Share your concerns</li>
-                                <li>• Find common ground</li>
-                                <li>• Agree on next steps</li>
-                            </ul>
-                        </div>
-                        <div className="space-y-2">
-                            <p className="font-medium">Support Call:</p>
-                            <ul className="text-xs space-y-1">
-                                <li>• Listen actively</li>
-                                <li>• Validate their feelings</li>
-                                <li>• Offer practical help</li>
-                                <li>• Check in regularly</li>
-                            </ul>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Content Tips */}
-            <Card className="bg-purple-50 border-purple-200">
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2 text-purple-800">💡 Content Strategy Tips</CardTitle>
-                </CardHeader>
-                <CardContent className="text-sm text-purple-700 space-y-2">
-                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-                        <div className="space-y-2">
-                            <p>
-                                <strong>Prioritize objectives:</strong> Focus on 1-3 main goals per call
-                            </p>
-                            <p>
-                                <strong>Prepare questions:</strong> Quality questions drive meaningful conversations
-                            </p>
-                        </div>
-                        <div className="space-y-2">
-                            <p>
-                                <strong>Know your sensitive areas:</strong> Plan how to navigate difficult topics
-                            </p>
-                            <p>
-                                <strong>Have fallbacks ready:</strong> Always have a plan B for important conversations
-                            </p>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-        </div>
-    );
-}
diff --git a/src/components/call-modal/tabs/KnowledgeBaseTab.tsx b/src/components/call-modal/tabs/KnowledgeBaseTab.tsx
deleted file mode 100644
index 1af3122..0000000
--- a/src/components/call-modal/tabs/KnowledgeBaseTab.tsx
+++ /dev/null
@@ -1,343 +0,0 @@
-// src/components/call-modal/tabs/KnowledgeBaseTab.tsx
-'use client';
-import { useState } from 'react';
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-import { Badge } from '@/components/ui/badge';
-import { Switch } from '@/components/ui/switch';
-import { useKnowledge } from '@/contexts/KnowledgeProvider';
-import { useCallModal } from '../CallModalContext';
-import { AlertCircle, CheckCircle, Database, FileText, Clock, Shield, Brain } from 'lucide-react';
-import { KnowledgeIndexingButton } from '@/components/KnowledgeIndexingButton';
-import { logger } from '@/modules';
-import { Input } from '@/components/ui/input';
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
-import { Button } from '@/components/ui/button';
-import { FormField } from '@/components/call-modal/components/FormField';
-
-export function KnowledgeBaseTab() {
-    logger.info('🔍 KnowledgeBaseTab component is rendering');
-    const { indexedDocumentsCount, knowledgeBaseName, lastIndexedAt, error, triggerIndexing } = useKnowledge();
-    const { context, updateField } = useCallModal();
-    const [selectedFile, setSelectedFile] = useState<File | null>(null);
-    const [fileTag, setFileTag] = useState('General');
-
-    const handleFileUpload = async () => {
-        if (!selectedFile) return;
-        const formData = new FormData();
-        formData.append('file', selectedFile);
-        formData.append('tag', fileTag);
-        try {
-            await fetch('/api/knowledge/upload', { method: 'POST', body: formData });
-            await triggerIndexing();
-            setSelectedFile(null);
-            console.info('✅ Knowledge file uploaded and indexing triggered.');
-        } catch (err) {
-            console.error('❌ File upload failed:', err);
-        }
-    };
-
-    const getFileTagOptions = () => {
-        const baseTags = ['General', 'Personal Notes', 'Reference Material'];
-
-        if (context.call_context === 'professional') {
-            return [...baseTags, 'Resume/CV', 'Company Info', 'Industry Research', 'Product Info', 'Sales Materials'];
-        } else if (context.call_context === 'personal') {
-            return [...baseTags, 'Relationship History', 'Family Info', 'Personal Goals', 'Conversation Notes'];
-        } else {
-            return [...baseTags, 'Service Protocols', 'Technical Documentation', 'Support Scripts'];
-        }
-    };
-
-    const getKnowledgeFilesByContext = () => {
-        const professionalFiles = [
-            'Career Summary & Achievements',
-            'Company Profile & Research',
-            'Industry Trends & Insights',
-            'Sales Methodology & Scripts',
-            'Product Knowledge Base',
-            'Competitive Intelligence',
-        ];
-
-        const personalFiles = [
-            'Relationship History & Context',
-            'Family Background & Dynamics',
-            'Personal Goals & Values',
-            'Previous Conversation Notes',
-            'Shared Experiences & Memories',
-        ];
-
-        const serviceFiles = [
-            'Service Protocols & Procedures',
-            'Technical Documentation',
-            'Support Scripts & Templates',
-            'Escalation Procedures',
-            'Compliance Guidelines',
-        ];
-
-        switch (context.call_context) {
-            case 'professional':
-                return { core: professionalFiles, variable: [] };
-            case 'personal':
-                return { core: personalFiles, variable: [] };
-            case 'service':
-                return { core: serviceFiles, variable: [] };
-            default:
-                return { core: professionalFiles, variable: personalFiles };
-        }
-    };
-
-    const getStatusInfo = () => {
-        if (error) {
-            return {
-                icon: <AlertCircle className="h-5 w-5 text-red-500" />,
-                status: 'Error',
-                message: 'Knowledge base initialization failed',
-                badgeVariant: 'destructive' as const,
-            };
-        }
-
-        if (indexedDocumentsCount === 0) {
-            return {
-                icon: <Database className="h-5 w-5 text-yellow-500" />,
-                status: 'Empty',
-                message: 'No knowledge indexed yet',
-                badgeVariant: 'secondary' as const,
-            };
-        }
-
-        return {
-            icon: <CheckCircle className="h-5 w-5 text-green-500" />,
-            status: 'Ready',
-            message: `${indexedDocumentsCount} items indexed`,
-            badgeVariant: 'default' as const,
-        };
-    };
-
-    const statusInfo = getStatusInfo();
-    const knowledgeFiles = getKnowledgeFilesByContext();
-
-    return (
-        <div className="space-y-4">
-            {/* Knowledge Integration Settings */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Brain className="h-5 w-5" />
-                        Knowledge Integration Settings
-                    </CardTitle>
-                    <p className="text-sm text-gray-600">
-                        Control how your knowledge base is used for this {context.call_type?.replace('-', ' ')}
-                    </p>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
-                        <div>
-                            <label className="text-sm font-medium">Enable Knowledge Search</label>
-                            <p className="text-xs text-gray-500">
-                                Allow AI to search your uploaded documents during the call
-                            </p>
-                        </div>
-                        <Switch
-                            checked={context.knowledge_search_enabled}
-                            onCheckedChange={checked => updateField('knowledge_search_enabled', checked)}
-                        />
-                    </div>
-
-                    {context.knowledge_search_enabled && (
-                        <FormField label="Knowledge Search Scope">
-                            <Select
-                                value={context.knowledge_search_scope || 'all'}
-                                onValueChange={value => updateField('knowledge_search_scope', value as any)}
-                            >
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="all">🌐 All Knowledge</SelectItem>
-                                    <SelectItem value="professional-only">💼 Professional Only</SelectItem>
-                                    <SelectItem value="personal-only">👤 Personal Only</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-                    )}
-
-                    {/* Privacy notice for sensitive calls */}
-                    {(context.sensitivity_level === 'highly-sensitive' || context.call_context === 'personal') && (
-                        <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
-                            <div className="flex items-center gap-2 mb-1">
-                                <Shield className="h-4 w-4 text-yellow-600" />
-                                <span className="text-sm font-medium text-yellow-800">Privacy Notice</span>
-                            </div>
-                            <p className="text-xs text-yellow-700">
-                                Consider limiting knowledge access for sensitive conversations. Personal information
-                                will be handled with appropriate privacy measures.
-                            </p>
-                        </div>
-                    )}
-                </CardContent>
-            </Card>
-
-            {/* Knowledge Base Status */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Database className="h-5 w-5" />
-                        Knowledge Base Status
-                    </CardTitle>
-                </CardHeader>
-                <CardContent className="space-y-6">
-                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
-                        <div className="flex items-center gap-3">
-                            {statusInfo.icon}
-                            <div>
-                                <div className="flex items-center gap-2">
-                                    <span className="font-medium">Knowledge Base</span>
-                                    <Badge variant={statusInfo.badgeVariant}>{statusInfo.status}</Badge>
-                                </div>
-                                <p className="text-sm text-gray-600 mt-1">{statusInfo.message}</p>
-                                {lastIndexedAt && (
-                                    <div className="flex items-center gap-1 mt-1 text-xs text-gray-500">
-                                        <Clock className="h-3 w-3" />
-                                        Last indexed: {lastIndexedAt.toLocaleString()}
-                                    </div>
-                                )}
-                            </div>
-                        </div>
-                    </div>
-
-                    {error && (
-                        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
-                            <div className="flex items-center gap-2 text-red-700">
-                                <AlertCircle className="h-4 w-4" />
-                                <span className="font-medium">Error Details</span>
-                            </div>
-                            <p className="text-sm text-red-600 mt-1">{error}</p>
-                        </div>
-                    )}
-                </CardContent>
-            </Card>
-
-            {/* File Upload */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <FileText className="h-5 w-5" />
-                        Upload Knowledge Files
-                    </CardTitle>
-                    <p className="text-sm text-gray-600">
-                        Add relevant documents for your {context.call_type?.replace('-', ' ')}
-                    </p>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <div className="flex items-center gap-2">
-                        <Input
-                            type="file"
-                            onChange={e => setSelectedFile(e.target.files?.[0] || null)}
-                            className="flex-1"
-                            accept=".pdf,.doc,.docx,.txt,.md"
-                        />
-                        <Select value={fileTag} onValueChange={setFileTag}>
-                            <SelectTrigger className="w-48">
-                                <SelectValue placeholder="Tag" />
-                            </SelectTrigger>
-                            <SelectContent>
-                                {getFileTagOptions().map(tag => (
-                                    <SelectItem key={tag} value={tag}>
-                                        {tag}
-                                    </SelectItem>
-                                ))}
-                            </SelectContent>
-                        </Select>
-                        <Button onClick={handleFileUpload} disabled={!selectedFile}>
-                            Upload
-                        </Button>
-                    </div>
-
-                    <div className="space-y-4">
-                        <KnowledgeIndexingButton variant="primary" size="md" showProgress={true} className="w-full" />
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Context-Specific Knowledge Overview */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <FileText className="h-5 w-5" />
-                        Recommended Knowledge for {context.call_context} Calls
-                    </CardTitle>
-                </CardHeader>
-                <CardContent>
-                    <div className="space-y-4">
-                        {knowledgeFiles.core.length > 0 && (
-                            <div>
-                                <h4 className="font-medium text-sm mb-2 flex items-center gap-2">
-                                    <FileText className="h-4 w-4 text-blue-500" />
-                                    Core Knowledge Files
-                                </h4>
-                                <div className="space-y-1">
-                                    {knowledgeFiles.core.map((file, index) => (
-                                        <div key={index} className="text-sm text-gray-600 pl-6">
-                                            • {file}
-                                        </div>
-                                    ))}
-                                </div>
-                            </div>
-                        )}
-
-                        {knowledgeFiles.variable.length > 0 && (
-                            <div>
-                                <h4 className="font-medium text-sm mb-2 flex items-center gap-2">
-                                    <FileText className="h-4 w-4 text-orange-500" />
-                                    Additional Context Files
-                                </h4>
-                                <div className="space-y-1">
-                                    {knowledgeFiles.variable.map((file, index) => (
-                                        <div key={index} className="text-sm text-gray-600 pl-6">
-                                            • {file}
-                                        </div>
-                                    ))}
-                                </div>
-                            </div>
-                        )}
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Usage Guidelines */}
-            <Card className="bg-blue-50 border-blue-200">
-                <CardHeader>
-                    <CardTitle className="text-blue-900">💡 Knowledge Base Tips</CardTitle>
-                </CardHeader>
-                <CardContent className="text-sm text-blue-800 space-y-2">
-                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-                        <div className="space-y-2">
-                            <p>
-                                <strong>Professional calls:</strong> Upload company research, role descriptions, and
-                                your background materials
-                            </p>
-                            <p>
-                                <strong>Personal calls:</strong> Consider relationship history, previous conversations,
-                                and context notes
-                            </p>
-                        </div>
-                        <div className="space-y-2">
-                            <p>
-                                <strong>Privacy tip:</strong> Use appropriate search scope for sensitive conversations
-                            </p>
-                            <p>
-                                <strong>Performance:</strong> More relevant documents = better AI responses
-                            </p>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Collection Info */}
-            <div className="text-xs text-gray-500 border-t pt-3">
-                <span className="font-mono">{knowledgeBaseName}</span>
-                {lastIndexedAt && <span> – Last indexed: {lastIndexedAt.toLocaleString()}</span>}
-            </div>
-        </div>
-    );
-}
diff --git a/src/components/call-modal/tabs/ResponseSettingsTab.tsx b/src/components/call-modal/tabs/ResponseSettingsTab.tsx
deleted file mode 100644
index 41132da..0000000
--- a/src/components/call-modal/tabs/ResponseSettingsTab.tsx
+++ /dev/null
@@ -1,249 +0,0 @@
-// src/components/call-modal/tabs/ResponseSettingsTab.tsx
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
-import { Switch } from '@/components/ui/switch';
-import { FormField } from '@/components/call-modal/components/FormField';
-import { useCallModal } from '@/components/call-modal/CallModalContext';
-import { CallContext } from '@/types/callContext';
-import { Settings, MessageSquare, Heart, Briefcase } from 'lucide-react';
-
-export function ResponseSettingsTab() {
-    const { context, updateField } = useCallModal();
-
-    return (
-        <div className="space-y-6">
-            {/* Core Response Style */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <MessageSquare className="h-5 w-5" />
-                        Response Style & Format
-                    </CardTitle>
-                    <p className="text-sm text-gray-600">Control how AI responses are formatted and delivered</p>
-                </CardHeader>
-                <CardContent className="space-y-4">
-                    <div className="grid grid-cols-2 gap-4">
-                        <FormField label="Response Style">
-                            <Select
-                                value={context.response_style}
-                                onValueChange={value =>
-                                    updateField('response_style', value as CallContext['response_style'])
-                                }
-                            >
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="structured">📋 Structured (Clear sections)</SelectItem>
-                                    <SelectItem value="conversational">💬 Conversational (Natural flow)</SelectItem>
-                                    <SelectItem value="bullet-points">• Bullet Points (Quick scan)</SelectItem>
-                                    <SelectItem value="script-like">📝 Script-like (Detailed prompts)</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-
-                        <FormField label="Verbosity Level">
-                            <Select
-                                value={context.verbosity}
-                                onValueChange={value => updateField('verbosity', value as CallContext['verbosity'])}
-                            >
-                                <SelectTrigger>
-                                    <SelectValue />
-                                </SelectTrigger>
-                                <SelectContent>
-                                    <SelectItem value="brief">⚡ Brief (Key points only)</SelectItem>
-                                    <SelectItem value="moderate">📄 Moderate (Balanced detail)</SelectItem>
-                                    <SelectItem value="detailed">📚 Detailed (Comprehensive)</SelectItem>
-                                </SelectContent>
-                            </Select>
-                        </FormField>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* AI Guidance Settings */}
-            <Card>
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2">
-                        <Settings className="h-5 w-5" />
-                        AI Guidance Types
-                    </CardTitle>
-                    <p className="text-sm text-gray-600">Choose what type of guidance you want from the AI assistant</p>
-                </CardHeader>
-                <CardContent className="space-y-6">
-                    <div className="grid md:grid-cols-2 gap-6">
-                        <div className="flex items-center justify-between p-4 border rounded-lg">
-                            <div className="flex items-center gap-3">
-                                <Heart className="h-5 w-5 text-pink-500" />
-                                <div>
-                                    <label className="text-sm font-medium">Emotional Guidance</label>
-                                    <p className="text-xs text-gray-500">
-                                        Help with emotional tone, empathy, and sensitivity
-                                    </p>
-                                </div>
-                            </div>
-                            <Switch
-                                checked={context.include_emotional_guidance}
-                                onCheckedChange={checked => updateField('include_emotional_guidance', checked)}
-                            />
-                        </div>
-
-                        <div className="flex items-center justify-between p-4 border rounded-lg">
-                            <div className="flex items-center gap-3">
-                                <Briefcase className="h-5 w-5 text-blue-500" />
-                                <div>
-                                    <label className="text-sm font-medium">Professional Tips</label>
-                                    <p className="text-xs text-gray-500">
-                                        Business etiquette, legal considerations, best practices
-                                    </p>
-                                </div>
-                            </div>
-                            <Switch
-                                checked={context.include_professional_tips}
-                                onCheckedChange={checked => updateField('include_professional_tips', checked)}
-                            />
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Response Recommendations by Call Type */}
-            <Card className="bg-blue-50 border-blue-200">
-                <CardHeader>
-                    <CardTitle className="flex items-center gap-2 text-blue-800">🎯 Recommended Settings</CardTitle>
-                </CardHeader>
-                <CardContent className="text-sm text-blue-700">
-                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-                        <div className="space-y-3">
-                            <div>
-                                <p className="font-medium mb-1">Professional Calls:</p>
-                                <ul className="text-xs space-y-1">
-                                    <li>• Structured or conversational style</li>
-                                    <li>• Professional tips enabled</li>
-                                    <li>• Moderate to detailed verbosity</li>
-                                </ul>
-                            </div>
-                            <div>
-                                <p className="font-medium mb-1">Sales/Negotiation:</p>
-                                <ul className="text-xs space-y-1">
-                                    <li>• Bullet points for quick reference</li>
-                                    <li>• Both guidance types enabled</li>
-                                    <li>• Detailed verbosity for preparation</li>
-                                </ul>
-                            </div>
-                        </div>
-                        <div className="space-y-3">
-                            <div>
-                                <p className="font-medium mb-1">Personal/Emotional:</p>
-                                <ul className="text-xs space-y-1">
-                                    <li>• Conversational style</li>
-                                    <li>• Emotional guidance enabled</li>
-                                    <li>• Brief to moderate verbosity</li>
-                                </ul>
-                            </div>
-                            <div>
-                                <p className="font-medium mb-1">Emergency/Critical:</p>
-                                <ul className="text-xs space-y-1">
-                                    <li>• Bullet points for clarity</li>
-                                    <li>• Professional tips only</li>
-                                    <li>• Brief verbosity for speed</li>
-                                </ul>
-                            </div>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-
-            {/* Context-Aware Recommendations */}
-            {context.call_type && (
-                <Card className="bg-green-50 border-green-200">
-                    <CardHeader>
-                        <CardTitle className="flex items-center gap-2 text-green-800">
-                            💡 Suggestions for{' '}
-                            {context.call_type.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}
-                        </CardTitle>
-                    </CardHeader>
-                    <CardContent className="text-sm text-green-700">
-                        {context.call_type === 'sales-call' && (
-                            <div className="space-y-2">
-                                <p>
-                                    <strong>Recommended:</strong> Bullet points + Professional tips + Detailed verbosity
-                                </p>
-                                <p>
-                                    Sales calls benefit from quick-reference formatting and comprehensive business
-                                    guidance.
-                                </p>
-                            </div>
-                        )}
-                        {context.call_type === 'relationship-talk' && (
-                            <div className="space-y-2">
-                                <p>
-                                    <strong>Recommended:</strong> Conversational + Emotional guidance + Moderate
-                                    verbosity
-                                </p>
-                                <p>Personal conversations need natural flow and emotional intelligence support.</p>
-                            </div>
-                        )}
-                        {context.call_type === 'customer-support' && (
-                            <div className="space-y-2">
-                                <p>
-                                    <strong>Recommended:</strong> Structured + Both guidance types + Moderate verbosity
-                                </p>
-                                <p>Support calls need clear structure with both professional and emotional support.</p>
-                            </div>
-                        )}
-                        {context.call_type === 'emergency-call' && (
-                            <div className="space-y-2">
-                                <p>
-                                    <strong>Recommended:</strong> Bullet points + Professional tips only + Brief
-                                    verbosity
-                                </p>
-                                <p>Emergency situations require clear, concise, action-oriented guidance.</p>
-                            </div>
-                        )}
-                        {!['sales-call', 'relationship-talk', 'customer-support', 'emergency-call'].includes(
-                            context.call_type
-                        ) && (
-                            <div className="space-y-2">
-                                <p>
-                                    <strong>Recommended:</strong> Start with conversational style and moderate
-                                    verbosity.
-                                </p>
-                                <p>Adjust based on your comfort level and the specific needs of this call type.</p>
-                            </div>
-                        )}
-                    </CardContent>
-                </Card>
-            )}
-
-            {/* Settings Summary */}
-            <Card className="bg-gray-50 border-gray-200">
-                <CardHeader>
-                    <CardTitle className="text-gray-800">📋 Current Settings Summary</CardTitle>
-                </CardHeader>
-                <CardContent className="text-sm text-gray-700">
-                    <div className="grid grid-cols-2 gap-4">
-                        <div>
-                            <p>
-                                <strong>Style:</strong> {context.response_style?.replace('-', ' ') || 'Not set'}
-                            </p>
-                            <p>
-                                <strong>Verbosity:</strong> {context.verbosity || 'Not set'}
-                            </p>
-                        </div>
-                        <div>
-                            <p>
-                                <strong>Emotional Guidance:</strong>{' '}
-                                {context.include_emotional_guidance ? '✅ Enabled' : '❌ Disabled'}
-                            </p>
-                            <p>
-                                <strong>Professional Tips:</strong>{' '}
-                                {context.include_professional_tips ? '✅ Enabled' : '❌ Disabled'}
-                            </p>
-                        </div>
-                    </div>
-                </CardContent>
-            </Card>
-        </div>
-    );
-}
diff --git a/src/components/error-boundary/index.tsx b/src/components/error-boundary/index.tsx
index 91b7e28..8fe760f 100644
--- a/src/components/error-boundary/index.tsx
+++ b/src/components/error-boundary/index.tsx
@@ -1,5 +1,5 @@
 // src/components/error-boundary/index.ts
-'use client';
+
 // Core exports
 export { ErrorBoundary, withErrorBoundary, useErrorBoundary } from './ErrorBoundary';
 export { ErrorFallback, InlineErrorFallback } from './ErrorFallback';
diff --git a/src/components/interview-modal/InterviewModalContext.tsx b/src/components/interview-modal/InterviewModalContext.tsx
index 0db684f..d649d65 100644
--- a/src/components/interview-modal/InterviewModalContext.tsx
+++ b/src/components/interview-modal/InterviewModalContext.tsx
@@ -1,59 +1,59 @@
-// // src/components/interview-modal/InterviewModalContext.tsx
-// import { createContext, useContext } from 'react';
-// import { InitialInterviewContext } from '@/types';
-// import { useInterviewContextForm } from '@/hooks';
-
-// interface InterviewModalContextType {
-//     context: InitialInterviewContext;
-//     activeTab: string;
-//     setActiveTab: (tab: string) => void;
-//     updateField: <K extends keyof InitialInterviewContext>(
-//         field: K,
-//         value: InitialInterviewContext[K]
-//     ) => void;
-//     addToArray: <K extends keyof InitialInterviewContext>(field: K, value: string) => void;
-//     removeFromArray: <K extends keyof InitialInterviewContext>(field: K, index: number) => void;
-//     toggleInArray: <K extends keyof InitialInterviewContext>(field: K, value: string) => void;
-//     isValid: boolean;
-//     handleSubmit: () => void;
-// }
-
-// const InterviewModalContext = createContext<InterviewModalContextType | null>(null);
-
-// export function useInterviewModal() {
-//     const context = useContext(InterviewModalContext);
-//     if (!context) {
-//         throw new Error('useInterviewModal must be used within InterviewModalProvider');
-//     }
-//     return context;
-// }
-
-// interface InterviewModalProviderProps {
-//     children: React.ReactNode;
-//     onSubmit: (context: InitialInterviewContext) => void;
-// }
-
-// export function InterviewModalProvider({ children, onSubmit }: InterviewModalProviderProps) {
-//     const formMethods = useInterviewContextForm();
-
-//     const handleSubmit = () => {
-//         if (formMethods.isValid) {
-//             // Auto-generate role description
-//             const roleDescription = `You are generating responses for ${formMethods.context.targetRole} at ${formMethods.context.targetCompany}...`;
-
-//             onSubmit({
-//                 ...formMethods.context,
-//                 roleDescription,
-//             });
-//         }
-//     };
-
-//     const value: InterviewModalContextType = {
-//         ...formMethods,
-//         handleSubmit,
-//     };
-
-//     return (
-//         <InterviewModalContext.Provider value={value}>{children}</InterviewModalContext.Provider>
-//     );
-// }
+// src/components/interview-modal/InterviewModalContext.tsx
+import { createContext, useContext } from 'react';
+import { InitialInterviewContext } from '@/types';
+import { useInterviewContextForm } from '@/hooks';
+
+interface InterviewModalContextType {
+    context: InitialInterviewContext;
+    activeTab: string;
+    setActiveTab: (tab: string) => void;
+    updateField: <K extends keyof InitialInterviewContext>(
+        field: K,
+        value: InitialInterviewContext[K]
+    ) => void;
+    addToArray: <K extends keyof InitialInterviewContext>(field: K, value: string) => void;
+    removeFromArray: <K extends keyof InitialInterviewContext>(field: K, index: number) => void;
+    toggleInArray: <K extends keyof InitialInterviewContext>(field: K, value: string) => void;
+    isValid: boolean;
+    handleSubmit: () => void;
+}
+
+const InterviewModalContext = createContext<InterviewModalContextType | null>(null);
+
+export function useInterviewModal() {
+    const context = useContext(InterviewModalContext);
+    if (!context) {
+        throw new Error('useInterviewModal must be used within InterviewModalProvider');
+    }
+    return context;
+}
+
+interface InterviewModalProviderProps {
+    children: React.ReactNode;
+    onSubmit: (context: InitialInterviewContext) => void;
+}
+
+export function InterviewModalProvider({ children, onSubmit }: InterviewModalProviderProps) {
+    const formMethods = useInterviewContextForm();
+
+    const handleSubmit = () => {
+        if (formMethods.isValid) {
+            // Auto-generate role description
+            const roleDescription = `You are generating responses for ${formMethods.context.targetRole} at ${formMethods.context.targetCompany}...`;
+
+            onSubmit({
+                ...formMethods.context,
+                roleDescription,
+            });
+        }
+    };
+
+    const value: InterviewModalContextType = {
+        ...formMethods,
+        handleSubmit,
+    };
+
+    return (
+        <InterviewModalContext.Provider value={value}>{children}</InterviewModalContext.Provider>
+    );
+}
diff --git a/src/components/interview-modal/InterviewModalFooter.tsx b/src/components/interview-modal/InterviewModalFooter.tsx
index bb38694..15a7e7e 100644
--- a/src/components/interview-modal/InterviewModalFooter.tsx
+++ b/src/components/interview-modal/InterviewModalFooter.tsx
@@ -1,16 +1,16 @@
-// // src/components/interview-modal/InterviewModalFooter.tsx
-// import { Button } from '@/components/ui/button';
-// import { useInterviewModal } from './InterviewModalContext';
+// src/components/interview-modal/InterviewModalFooter.tsx
+import { Button } from '@/components/ui/button';
+import { useInterviewModal } from './InterviewModalContext';
 
-// export function InterviewModalFooter() {
-//     const { isValid, handleSubmit } = useInterviewModal();
+export function InterviewModalFooter() {
+    const { isValid, handleSubmit } = useInterviewModal();
 
-//     return (
-//         <div className="flex justify-end space-x-2 pt-4">
-//             <Button variant="outline">Cancel</Button>
-//             <Button onClick={handleSubmit} disabled={!isValid} variant="default">
-//                 🚀 Start Live Interview
-//             </Button>
-//         </div>
-//     );
-// }
+    return (
+        <div className="flex justify-end space-x-2 pt-4">
+            <Button variant="outline">Cancel</Button>
+            <Button onClick={handleSubmit} disabled={!isValid} variant="default">
+                🚀 Start Live Interview
+            </Button>
+        </div>
+    );
+}
diff --git a/src/components/interview-modal/InterviewModalTabs.tsx b/src/components/interview-modal/InterviewModalTabs.tsx
index 076f50b..186cd81 100644
--- a/src/components/interview-modal/InterviewModalTabs.tsx
+++ b/src/components/interview-modal/InterviewModalTabs.tsx
@@ -1,44 +1,38 @@
-// // src\components\interview-modal\components\InterviewModalTabs.tsx
-// import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
-// import { InterviewDetailsTab } from './tabs/InterviewDetailsTab';
-// import { ResponseSettingsTab } from './tabs/ResponseSettingsTab';
-// import { ExperienceFocusTab } from './tabs/ExperienceFocusTab';
-// import { InterviewStrategyTab } from './tabs/InterviewStrategyTab';
-// import { useInterviewModal } from './InterviewModalContext';
-// import { KnowledgeBaseTab } from './tabs/KnowledgeBaseTab';
+// src\components\interview-modal\components\InterviewModalTabs.tsx
+import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
+import { InterviewDetailsTab } from './tabs/InterviewDetailsTab';
+import { ResponseSettingsTab } from './tabs/ResponseSettingsTab';
+import { ExperienceFocusTab } from './tabs/ExperienceFocusTab';
+import { useInterviewModal } from './InterviewModalContext';
+import { KnowledgeBaseTab } from './tabs/KnowledgeBaseTab';
 
-// export function InterviewModalTabs() {
-//     const { activeTab, setActiveTab } = useInterviewModal();
+export function InterviewModalTabs() {
+    const { activeTab, setActiveTab } = useInterviewModal();
 
-//     return (
-//         <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
-//             <TabsList className="grid w-full grid-cols-5">
-//                 <TabsTrigger value="interview">Interview Details</TabsTrigger>
-//                 <TabsTrigger value="experience">Experience Focus</TabsTrigger>
-//                 <TabsTrigger value="knowledge">Knowledge Base</TabsTrigger>
-//                 <TabsTrigger value="settings">Response Settings</TabsTrigger>
-//                 <TabsTrigger value="strategy">Interview Strategy</TabsTrigger>
-//             </TabsList>
+    return (
+        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
+            <TabsList className="grid w-full grid-cols-4">
+                <TabsTrigger value="interview">Interview Details</TabsTrigger>
+                <TabsTrigger value="knowledge">Knowledge Base</TabsTrigger> {/* NEW TAB */}
+                <TabsTrigger value="settings">Response Settings</TabsTrigger>
+                <TabsTrigger value="experience">Experience Focus</TabsTrigger>
+            </TabsList>
 
-//             <TabsContent value="interview" className="space-y-4">
-//                 <InterviewDetailsTab />
-//             </TabsContent>
+            <TabsContent value="interview" className="space-y-4">
+                <InterviewDetailsTab />
+            </TabsContent>
 
-//             <TabsContent value="experience" className="space-y-4">
-//                 <ExperienceFocusTab />
-//             </TabsContent>
+            <TabsContent value="knowledge" className="space-y-4">
+                <KnowledgeBaseTab />
+            </TabsContent>
 
-//             <TabsContent value="knowledge" className="space-y-4">
-//                 <KnowledgeBaseTab />
-//             </TabsContent>
+            <TabsContent value="settings" className="space-y-4">
+                <ResponseSettingsTab />
+            </TabsContent>
 
-//             <TabsContent value="settings" className="space-y-4">
-//                 <ResponseSettingsTab />
-//             </TabsContent>
-
-//             <TabsContent value="strategy" className="space-y-4">
-//                 <InterviewStrategyTab />
-//             </TabsContent>
-//         </Tabs>
-//     );
-// }
+            <TabsContent value="experience" className="space-y-4">
+                <ExperienceFocusTab />
+            </TabsContent>
+        </Tabs>
+    );
+}
diff --git a/src/components/interview-modal/components/CreativePredefinedSelector.tsx b/src/components/interview-modal/components/CreativePredefinedSelector.tsx
deleted file mode 100644
index d853c8f..0000000
--- a/src/components/interview-modal/components/CreativePredefinedSelector.tsx
+++ /dev/null
@@ -1,220 +0,0 @@
-// // src\components\interview-modal\components\CreativePredefinedSelector.tsx
-// import { useState } from 'react';
-// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-// import { Input } from '@/components/ui/input';
-// import { Button } from '@/components/ui/button';
-// import { Badge } from '@/components/ui/badge';
-// import { ChevronDown, ChevronRight, Search, Plus, X } from 'lucide-react';
-
-// interface CreativePredefinedSelectorProps {
-//     title: string;
-//     description: string;
-//     icon: string;
-//     predefinedOptions: Record<string, string[]>;
-//     selectedItems: string[];
-//     onItemsChange: (items: string[]) => void;
-//     placeholder: string;
-// }
-
-// export function CreativePredefinedSelector({
-//     title,
-//     description,
-//     icon,
-//     predefinedOptions,
-//     selectedItems,
-//     onItemsChange,
-//     placeholder,
-// }: CreativePredefinedSelectorProps) {
-//     const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());
-//     const [searchTerm, setSearchTerm] = useState('');
-//     const [customInput, setCustomInput] = useState('');
-
-//     const toggleCategory = (category: string) => {
-//         const newExpanded = new Set(expandedCategories);
-//         if (newExpanded.has(category)) {
-//             newExpanded.delete(category);
-//         } else {
-//             newExpanded.add(category);
-//         }
-//         setExpandedCategories(newExpanded);
-//     };
-
-//     const addItem = (item: string) => {
-//         if (!selectedItems.includes(item)) {
-//             onItemsChange([...selectedItems, item]);
-//         }
-//     };
-
-//     const removeItem = (item: string) => {
-//         onItemsChange(selectedItems.filter(i => i !== item));
-//     };
-
-//     const addCustomItem = () => {
-//         if (customInput.trim() && !selectedItems.includes(customInput.trim())) {
-//             onItemsChange([...selectedItems, customInput.trim()]);
-//             setCustomInput('');
-//         }
-//     };
-
-//     const handleKeyDown = (e: React.KeyboardEvent) => {
-//         if (e.key === 'Enter') {
-//             e.preventDefault();
-//             addCustomItem();
-//         }
-//     };
-
-//     // Filter options based on search
-//     const filteredOptions = Object.entries(predefinedOptions).reduce((acc, [category, options]) => {
-//         const filteredCategoryOptions = options.filter(option =>
-//             option.toLowerCase().includes(searchTerm.toLowerCase())
-//         );
-//         if (filteredCategoryOptions.length > 0) {
-//             acc[category] = filteredCategoryOptions;
-//         }
-//         return acc;
-//     }, {} as Record<string, string[]>);
-
-//     return (
-//         <Card>
-//             <CardHeader>
-//                 <CardTitle className="flex items-center gap-2">
-//                     {icon} {title}
-//                 </CardTitle>
-//                 <p className="text-sm text-gray-600">{description}</p>
-//             </CardHeader>
-//             <CardContent className="space-y-4">
-//                 {/* Search Bar */}
-//                 <div className="relative">
-//                     <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
-//                     <Input
-//                         value={searchTerm}
-//                         onChange={e => setSearchTerm(e.target.value)}
-//                         placeholder="Search predefined options..."
-//                         className="pl-10"
-//                     />
-//                 </div>
-
-//                 {/* Selected Items */}
-//                 {selectedItems.length > 0 && (
-//                     <div className="space-y-2">
-//                         <h4 className="text-sm font-medium text-gray-700">Selected ({selectedItems.length}):</h4>
-//                         <div className="flex flex-wrap gap-2">
-//                             {selectedItems.map((item, index) => (
-//                                 <Badge
-//                                     key={index}
-//                                     variant="default"
-//                                     className="px-3 py-1 bg-blue-100 text-blue-800 hover:bg-blue-200 transition-colors cursor-pointer group"
-//                                     onClick={() => removeItem(item)}
-//                                 >
-//                                     <span className="max-w-[200px] truncate">{item}</span>
-//                                     <X className="ml-2 h-3 w-3 opacity-60 group-hover:opacity-100" />
-//                                 </Badge>
-//                             ))}
-//                         </div>
-//                     </div>
-//                 )}
-
-//                 {/* Predefined Categories */}
-//                 <div className="space-y-3">
-//                     <h4 className="text-sm font-medium text-gray-700">Browse by Category:</h4>
-//                     {Object.entries(filteredOptions).map(([category, options]) => (
-//                         <Card key={category} className="border border-gray-200">
-//                             <CardHeader
-//                                 className="py-3 cursor-pointer hover:bg-gray-50 transition-colors"
-//                                 onClick={() => toggleCategory(category)}
-//                             >
-//                                 <div className="flex items-center justify-between">
-//                                     <h5 className="text-sm font-medium text-gray-800">{category}</h5>
-//                                     <div className="flex items-center gap-2">
-//                                         <Badge variant="outline" className="text-xs">
-//                                             {options.length} options
-//                                         </Badge>
-//                                         {expandedCategories.has(category) ? (
-//                                             <ChevronDown className="h-4 w-4" />
-//                                         ) : (
-//                                             <ChevronRight className="h-4 w-4" />
-//                                         )}
-//                                     </div>
-//                                 </div>
-//                             </CardHeader>
-
-//                             {expandedCategories.has(category) && (
-//                                 <CardContent className="pt-0 pb-3">
-//                                     <div className="grid gap-2">
-//                                         {options.map((option, index) => {
-//                                             const isSelected = selectedItems.includes(option);
-//                                             return (
-//                                                 <div
-//                                                     key={index}
-//                                                     className={`p-3 rounded-lg border-2 cursor-pointer transition-all duration-200 group ${
-//                                                         isSelected
-//                                                             ? 'border-blue-300 bg-blue-50 shadow-sm'
-//                                                             : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
-//                                                     }`}
-//                                                     onClick={() => (isSelected ? removeItem(option) : addItem(option))}
-//                                                 >
-//                                                     <div className="flex items-center justify-between">
-//                                                         <span
-//                                                             className={`text-sm ${
-//                                                                 isSelected
-//                                                                     ? 'text-blue-800 font-medium'
-//                                                                     : 'text-gray-700'
-//                                                             }`}
-//                                                         >
-//                                                             {option}
-//                                                         </span>
-//                                                         <Button
-//                                                             size="sm"
-//                                                             variant={isSelected ? 'default' : 'outline'}
-//                                                             className={`opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 ${
-//                                                                 isSelected
-//                                                                     ? 'opacity-100 bg-blue-600 hover:bg-blue-700'
-//                                                                     : ''
-//                                                             }`}
-//                                                         >
-//                                                             {isSelected ? (
-//                                                                 <X className="h-3 w-3" />
-//                                                             ) : (
-//                                                                 <Plus className="h-3 w-3" />
-//                                                             )}
-//                                                         </Button>
-//                                                     </div>
-//                                                 </div>
-//                                             );
-//                                         })}
-//                                     </div>
-//                                 </CardContent>
-//                             )}
-//                         </Card>
-//                     ))}
-//                 </div>
-
-//                 {/* Custom Input */}
-//                 <div className="border-t pt-4">
-//                     <h4 className="text-sm font-medium text-gray-700 mb-2">Add Custom Option:</h4>
-//                     <div className="flex gap-2">
-//                         <Input
-//                             value={customInput}
-//                             onChange={e => setCustomInput(e.target.value)}
-//                             placeholder={placeholder}
-//                             onKeyDown={handleKeyDown}
-//                         />
-//                         <Button
-//                             onClick={addCustomItem}
-//                             size="sm"
-//                             disabled={!customInput.trim() || selectedItems.includes(customInput.trim())}
-//                         >
-//                             <Plus className="h-4 w-4" />
-//                         </Button>
-//                     </div>
-//                 </div>
-
-//                 {/* Quick Stats */}
-//                 <div className="flex items-center justify-between text-xs text-gray-500 pt-2 border-t">
-//                     <span>{selectedItems.length} items selected</span>
-//                     <span>{Object.values(filteredOptions).flat().length} options available</span>
-//                 </div>
-//             </CardContent>
-//         </Card>
-//     );
-// }
diff --git a/src/components/interview-modal/components/DynamicList.tsx b/src/components/interview-modal/components/DynamicList.tsx
index ad222de..6ec84e1 100644
--- a/src/components/interview-modal/components/DynamicList.tsx
+++ b/src/components/interview-modal/components/DynamicList.tsx
@@ -1,68 +1,68 @@
-// // src/components/interview-modal/components/DynamicList.tsx
-// 'use client';
-// import { Badge } from '@/components/ui/badge';
-// import { Button } from '@/components/ui/button';
-// import { Input } from '@/components/ui/input';
-// import { useDynamicList } from '@/hooks';
-// import { Plus, X } from 'lucide-react';
-// import { useEffect } from 'react';
+// src/components/interview-modal/components/DynamicList.tsx
+'use client';
+import { Badge } from '@/components/ui/badge';
+import { Button } from '@/components/ui/button';
+import { Input } from '@/components/ui/input';
+import { useDynamicList } from '@/hooks';
+import { Plus, X } from 'lucide-react';
+import { useEffect } from 'react';
 
-// interface DynamicListProps {
-//     items: string[];
-//     onItemsChange: (items: string[]) => void;
-//     placeholder?: string;
-//     addButtonText?: string;
-// }
+interface DynamicListProps {
+    items: string[];
+    onItemsChange: (items: string[]) => void;
+    placeholder?: string;
+    addButtonText?: string;
+}
 
-// export function DynamicList({
-//     items,
-//     onItemsChange,
-//     placeholder,
-//     addButtonText = 'Add',
-// }: DynamicListProps) {
-//     const {
-//         items: localItems,
-//         newItem,
-//         setNewItem,
-//         addItemFromInput,
-//         removeItem,
-//     } = useDynamicList(items);
+export function DynamicList({
+    items,
+    onItemsChange,
+    placeholder,
+    addButtonText = 'Add',
+}: DynamicListProps) {
+    const {
+        items: localItems,
+        newItem,
+        setNewItem,
+        addItemFromInput,
+        removeItem,
+    } = useDynamicList(items);
 
-//     // FIXED: Only call onItemsChange when localItems actually changes
-//     useEffect(() => {
-//         // Only update if the arrays are actually different
-//         if (JSON.stringify(localItems) !== JSON.stringify(items)) {
-//             onItemsChange(localItems);
-//         }
-//     }, [localItems, items, onItemsChange]);
+    // FIXED: Only call onItemsChange when localItems actually changes
+    useEffect(() => {
+        // Only update if the arrays are actually different
+        if (JSON.stringify(localItems) !== JSON.stringify(items)) {
+            onItemsChange(localItems);
+        }
+    }, [localItems, items, onItemsChange]);
 
-//     const handleAddClick = () => {
-//         addItemFromInput();
-//     };
+    const handleAddClick = () => {
+        addItemFromInput();
+    };
 
-//     return (
-//         <div className="space-y-3">
-//             <div className="flex gap-2">
-//                 <Input
-//                     value={newItem}
-//                     onChange={e => setNewItem(e.target.value)}
-//                     placeholder={placeholder}
-//                     onKeyDown={e => e.key === 'Enter' && addItemFromInput()}
-//                 />
-//                 <Button onClick={handleAddClick} size="sm" variant="outline">
-//                     <Plus className="h-4 w-4" />
-//                     {addButtonText}
-//                 </Button>
-//             </div>
+    return (
+        <div className="space-y-3">
+            <div className="flex gap-2">
+                <Input
+                    value={newItem}
+                    onChange={e => setNewItem(e.target.value)}
+                    placeholder={placeholder}
+                    onKeyDown={e => e.key === 'Enter' && addItemFromInput()}
+                />
+                <Button onClick={handleAddClick} size="sm" variant="outline">
+                    <Plus className="h-4 w-4" />
+                    {addButtonText}
+                </Button>
+            </div>
 
-//             <div className="flex flex-wrap gap-2">
-//                 {localItems.map((item, index) => (
-//                     <Badge key={index} variant="outline" className="flex gap-1 items-center">
-//                         {item}
-//                         <X className="h-3 w-3 cursor-pointer" onClick={() => removeItem(index)} />
-//                     </Badge>
-//                 ))}
-//             </div>
-//         </div>
-//     );
-// }
+            <div className="flex flex-wrap gap-2">
+                {localItems.map((item, index) => (
+                    <Badge key={index} variant="outline" className="flex gap-1 items-center">
+                        {item}
+                        <X className="h-3 w-3 cursor-pointer" onClick={() => removeItem(index)} />
+                    </Badge>
+                ))}
+            </div>
+        </div>
+    );
+}
diff --git a/src/components/interview-modal/components/FormField.tsx b/src/components/interview-modal/components/FormField.tsx
index e020779..6fe17ef 100644
--- a/src/components/interview-modal/components/FormField.tsx
+++ b/src/components/interview-modal/components/FormField.tsx
@@ -1,24 +1,24 @@
-// // src/components/interview-modal/components/FormField.tsx
-// import { Label } from '@/components/ui/label';
-// import { cn } from '@/lib/utils';
+// src/components/interview-modal/components/FormField.tsx
+import { Label } from '@/components/ui/label';
+import { cn } from '@/lib/utils';
 
-// interface FormFieldProps {
-//     label: string;
-//     error?: string;
-//     required?: boolean;
-//     children: React.ReactNode;
-//     className?: string;
-// }
+interface FormFieldProps {
+    label: string;
+    error?: string;
+    required?: boolean;
+    children: React.ReactNode;
+    className?: string;
+}
 
-// export function FormField({ label, error, required, children, className }: FormFieldProps) {
-//     return (
-//         <div className={cn('space-y-2', className)}>
-//             <Label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
-//                 {label}
-//                 {required && <span className="text-destructive ml-1">*</span>}
-//             </Label>
-//             {children}
-//             {error && <p className="text-sm text-destructive">{error}</p>}
-//         </div>
-//     );
-// }
+export function FormField({ label, error, required, children, className }: FormFieldProps) {
+    return (
+        <div className={cn('space-y-2', className)}>
+            <Label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
+                {label}
+                {required && <span className="text-destructive ml-1">*</span>}
+            </Label>
+            {children}
+            {error && <p className="text-sm text-destructive">{error}</p>}
+        </div>
+    );
+}
diff --git a/src/components/interview-modal/tabs/EnhancedExperienceFocusTab.tsx b/src/components/interview-modal/tabs/EnhancedExperienceFocusTab.tsx
index 36ea09b..0ad4068 100644
--- a/src/components/interview-modal/tabs/EnhancedExperienceFocusTab.tsx
+++ b/src/components/interview-modal/tabs/EnhancedExperienceFocusTab.tsx
@@ -1,140 +1,176 @@
-// // src/components/interview-modal/tabs/ExperienceFocusTab.tsx
-// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-// import { Checkbox } from '@/components/ui/checkbox';
-// import { Textarea } from '@/components/ui/textarea';
-// import { FormField } from '../components/FormField';
-// import { useInterviewModal } from '../InterviewModalContext';
-// import { DynamicList } from '../components/DynamicList';
+// src/components/interview-modal/tabs/ExperienceFocusTab.tsx
+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
+import { Checkbox } from '@/components/ui/checkbox';
+import { Textarea } from '@/components/ui/textarea';
+import { FormField } from '../components/FormField';
+import { useInterviewModal } from '../InterviewModalContext';
+import { DynamicList } from '../components/DynamicList';
 
-// interface CheckboxSectionProps {
-//     title: string;
-//     description?: string;
-//     icon: string;
-//     predefinedOptions: string[];
-//     selectedItems: string[];
-//     onItemsChange: (items: string[]) => void;
-//     dynamicListPlaceholder: string;
-// }
+// Predefined options for each category
+const PREDEFINED_INTERVIEW_GOALS = [
+    'Understand company culture and values',
+    'Learn about growth and advancement opportunities',
+    'Assess role requirements and expectations',
+    'Demonstrate my expertise and value',
+    'Build rapport with the interview team',
+    'Understand reporting structure and team dynamics',
+    'Learn about current challenges and priorities',
+    'Explore potential for impact and contribution',
+];
 
-// function CheckboxSection({
-//     title,
-//     description,
-//     icon,
-//     predefinedOptions,
-//     selectedItems,
-//     onItemsChange,
-//     dynamicListPlaceholder,
-// }: CheckboxSectionProps) {
-//     const togglePredefinedOption = (option: string) => {
-//         if (selectedItems.includes(option)) {
-//             onItemsChange(selectedItems.filter(item => item !== option));
-//         } else {
-//             onItemsChange([...selectedItems, option]);
-//         }
-//     };
+const PREDEFINED_EXPERIENCES = [
+    'Sales achievements and revenue growth',
+    'Team leadership and management',
+    'Process improvement and optimization',
+    'Client relationship management',
+    'Cross-functional collaboration',
+    'Technical expertise and innovation',
+    'Problem solving and crisis management',
+    'Strategic planning and execution',
+    'Training and development',
+    'Regulatory compliance and quality',
+];
 
-//     return (
-//         <Card>
-//             <CardHeader>
-//                 <CardTitle className="flex items-center gap-2">
-//                     {icon} {title}
-//                 </CardTitle>
-//                 {description && <p className="text-sm text-gray-600">{description}</p>}
-//             </CardHeader>
-//             <CardContent className="space-y-4">
-//                 {/* Predefined Checkboxes */}
-//                 <FormField label="Select from common options:">
-//                     <div className="grid grid-cols-1 gap-3">
-//                         {predefinedOptions.map((option, index) => (
-//                             <div key={index} className="flex items-center space-x-2">
-//                                 <Checkbox
-//                                     id={`${title.toLowerCase().replace(/\s+/g, '-')}-${index}`}
-//                                     checked={selectedItems.includes(option)}
-//                                     onCheckedChange={() => togglePredefinedOption(option)}
-//                                 />
-//                                 <label
-//                                     htmlFor={`${title.toLowerCase().replace(/\s+/g, '-')}-${index}`}
-//                                     className="text-sm cursor-pointer leading-relaxed"
-//                                 >
-//                                     {option}
-//                                 </label>
-//                             </div>
-//                         ))}
-//                     </div>
-//                 </FormField>
+const PREDEFINED_CHALLENGES = [
+    'Difficult client or stakeholder situations',
+    'Tight deadlines and resource constraints',
+    'Budget limitations and cost optimization',
+    'Team conflicts and performance issues',
+    'Technical obstacles and system limitations',
+    'Organizational change and restructuring',
+    'Market competition and positioning',
+    'Regulatory or compliance challenges',
+];
 
-//                 {/* Your existing DynamicList for custom additions */}
-//                 <FormField label="Add your own:">
-//                     <DynamicList
-//                         items={selectedItems.filter(item => !predefinedOptions.includes(item))}
-//                         onItemsChange={customItems => {
-//                             // Combine predefined selections with custom items
-//                             const predefinedSelected = selectedItems.filter(item => predefinedOptions.includes(item));
-//                             onItemsChange([...predefinedSelected, ...customItems]);
-//                         }}
-//                         placeholder={dynamicListPlaceholder}
-//                         addButtonText="Add"
-//                     />
-//                 </FormField>
-//             </CardContent>
-//         </Card>
-//     );
-// }
+interface CheckboxSectionProps {
+    title: string;
+    description?: string;
+    icon: string;
+    predefinedOptions: string[];
+    selectedItems: string[];
+    onItemsChange: (items: string[]) => void;
+    dynamicListPlaceholder: string;
+}
 
-// export function ExperienceFocusTab() {
-//     const { context, updateField } = useInterviewModal();
+function CheckboxSection({
+    title,
+    description,
+    icon,
+    predefinedOptions,
+    selectedItems,
+    onItemsChange,
+    dynamicListPlaceholder,
+}: CheckboxSectionProps) {
+    const togglePredefinedOption = (option: string) => {
+        if (selectedItems.includes(option)) {
+            onItemsChange(selectedItems.filter(item => item !== option));
+        } else {
+            onItemsChange([...selectedItems, option]);
+        }
+    };
 
-//     return (
-//         <div className="space-y-4">
-//             {/* Interview Goals */}
-//             <CheckboxSection
-//                 title="Interview Goals"
-//                 description="What do you want to achieve or learn from this interview?"
-//                 icon="🎯"
-//                 predefinedOptions={PREDEFINED_INTERVIEW_GOALS}
-//                 selectedItems={context.goals}
-//                 onItemsChange={items => updateField('goals', items)}
-//                 dynamicListPlaceholder="Add a specific interview goal..."
-//             />
+    return (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    {icon} {title}
+                </CardTitle>
+                {description && <p className="text-sm text-gray-600">{description}</p>}
+            </CardHeader>
+            <CardContent className="space-y-4">
+                {/* Predefined Checkboxes */}
+                <FormField label="Select from common options:">
+                    <div className="grid grid-cols-1 gap-3">
+                        {predefinedOptions.map((option, index) => (
+                            <div key={index} className="flex items-center space-x-2">
+                                <Checkbox
+                                    id={`${title.toLowerCase().replace(/\s+/g, '-')}-${index}`}
+                                    checked={selectedItems.includes(option)}
+                                    onCheckedChange={() => togglePredefinedOption(option)}
+                                />
+                                <label
+                                    htmlFor={`${title.toLowerCase().replace(/\s+/g, '-')}-${index}`}
+                                    className="text-sm cursor-pointer leading-relaxed"
+                                >
+                                    {option}
+                                </label>
+                            </div>
+                        ))}
+                    </div>
+                </FormField>
 
-//             {/* Key Experiences */}
-//             <CheckboxSection
-//                 title="Key Experiences to Emphasize"
-//                 description="Which experiences should be highlighted in your responses?"
-//                 icon="💼"
-//                 predefinedOptions={PREDEFINED_EXPERIENCES}
-//                 selectedItems={context.emphasizedExperiences}
-//                 onItemsChange={items => updateField('emphasizedExperiences', items)}
-//                 dynamicListPlaceholder="Add a specific experience to highlight..."
-//             />
+                {/* Your existing DynamicList for custom additions */}
+                <FormField label="Add your own:">
+                    <DynamicList
+                        items={selectedItems.filter(item => !predefinedOptions.includes(item))}
+                        onItemsChange={customItems => {
+                            // Combine predefined selections with custom items
+                            const predefinedSelected = selectedItems.filter(item => predefinedOptions.includes(item));
+                            onItemsChange([...predefinedSelected, ...customItems]);
+                        }}
+                        placeholder={dynamicListPlaceholder}
+                        addButtonText="Add"
+                    />
+                </FormField>
+            </CardContent>
+        </Card>
+    );
+}
 
-//             {/* Specific Challenges */}
-//             <CheckboxSection
-//                 title="Challenges to Address"
-//                 description="What types of challenges can you speak to confidently?"
-//                 icon="⚡"
-//                 predefinedOptions={PREDEFINED_CHALLENGES}
-//                 selectedItems={context.specificChallenges}
-//                 onItemsChange={items => updateField('specificChallenges', items)}
-//                 dynamicListPlaceholder="Add a specific challenge you've overcome..."
-//             />
+export function ExperienceFocusTab() {
+    const { context, updateField } = useInterviewModal();
 
-//             {/* Additional Context */}
-//             <Card>
-//                 <CardHeader>
-//                     <CardTitle>📝 Additional Context</CardTitle>
-//                 </CardHeader>
-//                 <CardContent>
-//                     <FormField label="Additional Context">
-//                         <Textarea
-//                             value={context.industry}
-//                             onChange={e => updateField('industry', e.target.value)}
-//                             placeholder="Any additional context about the role, company, or industry..."
-//                             rows={3}
-//                         />
-//                     </FormField>
-//                 </CardContent>
-//             </Card>
-//         </div>
-//     );
-// }
+    return (
+        <div className="space-y-4">
+            {/* Interview Goals */}
+            <CheckboxSection
+                title="Interview Goals"
+                description="What do you want to achieve or learn from this interview?"
+                icon="🎯"
+                predefinedOptions={PREDEFINED_INTERVIEW_GOALS}
+                selectedItems={context.goals}
+                onItemsChange={items => updateField('goals', items)}
+                dynamicListPlaceholder="Add a specific interview goal..."
+            />
+
+            {/* Key Experiences */}
+            <CheckboxSection
+                title="Key Experiences to Emphasize"
+                description="Which experiences should be highlighted in your responses?"
+                icon="💼"
+                predefinedOptions={PREDEFINED_EXPERIENCES}
+                selectedItems={context.emphasizedExperiences}
+                onItemsChange={items => updateField('emphasizedExperiences', items)}
+                dynamicListPlaceholder="Add a specific experience to highlight..."
+            />
+
+            {/* Specific Challenges */}
+            <CheckboxSection
+                title="Challenges to Address"
+                description="What types of challenges can you speak to confidently?"
+                icon="⚡"
+                predefinedOptions={PREDEFINED_CHALLENGES}
+                selectedItems={context.specificChallenges}
+                onItemsChange={items => updateField('specificChallenges', items)}
+                dynamicListPlaceholder="Add a specific challenge you've overcome..."
+            />
+
+            {/* Additional Context */}
+            <Card>
+                <CardHeader>
+                    <CardTitle>📝 Additional Context</CardTitle>
+                </CardHeader>
+                <CardContent>
+                    <FormField label="Additional Context">
+                        <Textarea
+                            value={context.industry}
+                            onChange={e => updateField('industry', e.target.value)}
+                            placeholder="Any additional context about the role, company, or industry..."
+                            rows={3}
+                        />
+                    </FormField>
+                </CardContent>
+            </Card>
+        </div>
+    );
+}
diff --git a/src/components/interview-modal/tabs/ExperienceFocusTab.tsx b/src/components/interview-modal/tabs/ExperienceFocusTab.tsx
index bd4c13d..fc09fa9 100644
--- a/src/components/interview-modal/tabs/ExperienceFocusTab.tsx
+++ b/src/components/interview-modal/tabs/ExperienceFocusTab.tsx
@@ -1,264 +1,204 @@
-// // src/components/interview-modal/tabs/ExperienceFocusTab.tsx
-// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-// import { Checkbox } from '@/components/ui/checkbox';
-// import { Input } from '@/components/ui/input';
-// import { Button } from '@/components/ui/button';
-// import { useInterviewModal } from '../InterviewModalContext';
-// import { Plus } from 'lucide-react';
-// import { useState } from 'react';
-// import {
-//     PREDEFINED_CHALLENGES,
-//     PREDEFINED_EXPERIENCES,
-//     PREDEFINED_INTERVIEW_GOALS,
-//     ACHIEVEMENT_CATEGORIES,
-//     SKILL_CATEGORIES,
-// } from '@/lib/predefinedFields';
-// import { DynamicList } from '../components/DynamicList';
-
-// interface CheckboxWithCustomInputProps {
-//     title: string;
-//     description?: string;
-//     icon: string;
-//     predefinedOptions: readonly string[];
-//     selectedItems: string[];
-//     onToggleItem: (item: string) => void;
-//     onAddCustomItem: (item: string) => void;
-//     customPlaceholder: string;
-// }
-
-// function CheckboxWithCustomInput({
-//     title,
-//     description,
-//     icon,
-//     predefinedOptions,
-//     selectedItems,
-//     onToggleItem,
-//     onAddCustomItem,
-//     customPlaceholder,
-// }: CheckboxWithCustomInputProps) {
-//     const [customInput, setCustomInput] = useState('');
-
-//     const handleAddCustom = () => {
-//         if (customInput.trim() && !selectedItems.includes(customInput.trim())) {
-//             onAddCustomItem(customInput.trim());
-//             setCustomInput('');
-//         }
-//     };
-
-//     const handleKeyDown = (e: React.KeyboardEvent) => {
-//         if (e.key === 'Enter') {
-//             e.preventDefault();
-//             handleAddCustom();
-//         }
-//     };
-
-//     // Separate custom items for display
-//     const customSelected = selectedItems.filter(item => !predefinedOptions.includes(item));
-
-//     return (
-//         <Card>
-//             <CardHeader>
-//                 <CardTitle className="flex items-center gap-2">
-//                     {icon} {title}
-//                 </CardTitle>
-//                 {description && <p className="text-sm text-gray-600">{description}</p>}
-//             </CardHeader>
-//             <CardContent className="space-y-4">
-//                 {/* Predefined Options */}
-//                 <div>
-//                     <label className="text-sm font-medium mb-3 block">Select from common options:</label>
-//                     <div className="grid grid-cols-1 gap-3">
-//                         {predefinedOptions.map((option, index) => (
-//                             <div key={index} className="flex items-center space-x-2">
-//                                 <Checkbox
-//                                     id={`${title.toLowerCase().replace(/\s+/g, '-')}-${index}`}
-//                                     checked={selectedItems.includes(option)}
-//                                     onCheckedChange={_checked => {
-//                                         onToggleItem(option);
-//                                     }}
-//                                 />
-//                                 <label
-//                                     htmlFor={`${title.toLowerCase().replace(/\s+/g, '-')}-${index}`}
-//                                     className="text-sm cursor-pointer leading-relaxed"
-//                                 >
-//                                     {option}
-//                                 </label>
-//                             </div>
-//                         ))}
-//                     </div>
-//                 </div>
-
-//                 {/* Custom Input */}
-//                 <div>
-//                     <label className="text-sm font-medium mb-2 block">Add custom option:</label>
-//                     <div className="flex gap-2">
-//                         <Input
-//                             value={customInput}
-//                             onChange={e => setCustomInput(e.target.value)}
-//                             placeholder={customPlaceholder}
-//                             onKeyDown={handleKeyDown}
-//                         />
-//                         <Button
-//                             onClick={handleAddCustom}
-//                             size="sm"
-//                             disabled={!customInput.trim() || selectedItems.includes(customInput.trim())}
-//                         >
-//                             <Plus className="h-4 w-4" />
-//                         </Button>
-//                     </div>
-//                 </div>
-
-//                 {/* Show custom selections if any */}
-//                 {customSelected.length > 0 && (
-//                     <div>
-//                         <label className="text-sm font-medium mb-2 block">Your custom additions:</label>
-//                         <div className="space-y-2">
-//                             {customSelected.map((item, index) => (
-//                                 <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
-//                                     <span className="text-sm">{item}</span>
-//                                     <Button
-//                                         variant="ghost"
-//                                         size="sm"
-//                                         onClick={() => onToggleItem(item)}
-//                                         className="text-red-500 hover:text-red-700"
-//                                     >
-//                                         Remove
-//                                     </Button>
-//                                 </div>
-//                             ))}
-//                         </div>
-//                     </div>
-//                 )}
-//             </CardContent>
-//         </Card>
-//     );
-// }
-
-// export function ExperienceFocusTab() {
-//     const { context, toggleInArray, updateField } = useInterviewModal();
-
-//     const handleAddCustomGoal = (goal: string) => {
-//         toggleInArray('goals', goal);
-//     };
-
-//     const handleAddCustomExperience = (experience: string) => {
-//         toggleInArray('emphasizedExperiences', experience);
-//     };
-
-//     const handleAddCustomChallenge = (challenge: string) => {
-//         toggleInArray('specificChallenges', challenge);
-//     };
-
-//     const handleAddCustomAchievement = (achievement: string) => {
-//         toggleInArray('keyAchievements', achievement);
-//     };
-
-//     const handleAddCustomSkill = (skill: string) => {
-//         toggleInArray('coreSkills', skill);
-//     };
-
-//     return (
-//         <div className="space-y-6">
-//             {/* Interview Goals & Strategy */}
-//             <div className="space-y-4">
-//                 <div className="border-l-4 border-blue-500 pl-4">
-//                     <h3 className="text-lg font-semibold text-gray-900">Interview Goals & Strategy</h3>
-//                     <p className="text-sm text-gray-600">
-//                         Define what you want to achieve and learn from this interview
-//                     </p>
-//                 </div>
-
-//                 <CheckboxWithCustomInput
-//                     title="Interview Goals"
-//                     description="What do you want to achieve or learn from this interview?"
-//                     icon="🎯"
-//                     predefinedOptions={PREDEFINED_INTERVIEW_GOALS}
-//                     selectedItems={context.goals}
-//                     onToggleItem={item => toggleInArray('goals', item)}
-//                     onAddCustomItem={handleAddCustomGoal}
-//                     customPlaceholder="Add a specific interview goal..."
-//                 />
-//             </div>
-
-//             {/* Experience & Background */}
-//             <div className="space-y-4">
-//                 <div className="border-l-4 border-green-500 pl-4">
-//                     <h3 className="text-lg font-semibold text-gray-900">Experience & Background</h3>
-//                     <p className="text-sm text-gray-600">
-//                         Select experiences and challenges to emphasize in your responses
-//                     </p>
-//                 </div>
-
-//                 <CheckboxWithCustomInput
-//                     title="Key Experiences to Emphasize"
-//                     description="Which experiences should be highlighted in your responses?"
-//                     icon="💼"
-//                     predefinedOptions={PREDEFINED_EXPERIENCES}
-//                     selectedItems={context.emphasizedExperiences}
-//                     onToggleItem={item => toggleInArray('emphasizedExperiences', item)}
-//                     onAddCustomItem={handleAddCustomExperience}
-//                     customPlaceholder="Add a specific experience to highlight..."
-//                 />
-
-//                 <CheckboxWithCustomInput
-//                     title="Challenges to Address"
-//                     description="What types of challenges can you speak to confidently?"
-//                     icon="⚡"
-//                     predefinedOptions={PREDEFINED_CHALLENGES}
-//                     selectedItems={context.specificChallenges}
-//                     onToggleItem={item => toggleInArray('specificChallenges', item)}
-//                     onAddCustomItem={handleAddCustomChallenge}
-//                     customPlaceholder="Add a specific challenge you've overcome..."
-//                 />
-
-//                 {/* Company Context */}
-//                 <Card>
-//                     <CardHeader>
-//                         <CardTitle className="flex items-center gap-2">🏢 Company Context</CardTitle>
-//                         <p className="text-sm text-gray-600">
-//                             Key context areas from your background that should inform responses
-//                         </p>
-//                     </CardHeader>
-//                     <CardContent>
-//                         <DynamicList
-//                             items={context.companyContext}
-//                             onItemsChange={items => updateField('companyContext', items)}
-//                             placeholder="Add company context (e.g., sales_methodology, startup_experience)"
-//                             addButtonText="Add Context"
-//                         />
-//                     </CardContent>
-//                 </Card>
-//             </div>
-
-//             {/* Achievements & Skills */}
-//             <div className="space-y-4">
-//                 <div className="border-l-4 border-purple-500 pl-4">
-//                     <h3 className="text-lg font-semibold text-gray-900">Achievements & Skills</h3>
-//                     <p className="text-sm text-gray-600">Highlight your key accomplishments and core competencies</p>
-//                 </div>
-
-//                 <CheckboxWithCustomInput
-//                     title="Key Achievements"
-//                     description="Notable accomplishments, awards, or metrics you want to highlight"
-//                     icon="🏆"
-//                     predefinedOptions={ACHIEVEMENT_CATEGORIES}
-//                     selectedItems={context.keyAchievements}
-//                     onToggleItem={item => toggleInArray('keyAchievements', item)}
-//                     onAddCustomItem={handleAddCustomAchievement}
-//                     customPlaceholder="Add a key achievement (e.g., Exceeded sales quota by 30%)"
-//                 />
-
-//                 <CheckboxWithCustomInput
-//                     title="Core Skills"
-//                     description="Core strengths or skills you want to emphasize"
-//                     icon="💪"
-//                     predefinedOptions={SKILL_CATEGORIES}
-//                     selectedItems={context.coreSkills}
-//                     onToggleItem={item => toggleInArray('coreSkills', item)}
-//                     onAddCustomItem={handleAddCustomSkill}
-//                     customPlaceholder="Add a skill or expertise (e.g., Negotiation, SaaS Sales)"
-//                 />
-//             </div>
-//         </div>
-//     );
-// }
+// src/components/interview-modal/tabs/ExperienceFocusTab.tsx
+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
+import { Textarea } from '@/components/ui/textarea';
+import { Checkbox } from '@/components/ui/checkbox';
+import { Input } from '@/components/ui/input';
+import { Button } from '@/components/ui/button';
+import { FormField } from '../components/FormField';
+import { useInterviewModal } from '../InterviewModalContext';
+import { Plus } from 'lucide-react';
+import { useState } from 'react';
+import { PREDEFINED_CHALLENGES, PREDEFINED_EXPERIENCES } from '@/lib/predefinedFields';
+import { PREDEFINED_INTERVIEW_GOALS } from '@/lib/predefinedFields';
+
+interface CheckboxWithCustomInputProps {
+    title: string;
+    description?: string;
+    icon: string;
+    predefinedOptions: string[];
+    selectedItems: string[];
+    onToggleItem: (item: string) => void;
+    onAddCustomItem: (item: string) => void;
+    customPlaceholder: string;
+}
+
+function CheckboxWithCustomInput({
+    title,
+    description,
+    icon,
+    predefinedOptions,
+    selectedItems,
+    onToggleItem,
+    onAddCustomItem,
+    customPlaceholder,
+}: CheckboxWithCustomInputProps) {
+    const [customInput, setCustomInput] = useState('');
+
+    const handleAddCustom = () => {
+        if (customInput.trim() && !selectedItems.includes(customInput.trim())) {
+            onAddCustomItem(customInput.trim());
+            setCustomInput('');
+        }
+    };
+
+    const handleKeyDown = (e: React.KeyboardEvent) => {
+        if (e.key === 'Enter') {
+            e.preventDefault();
+            handleAddCustom();
+        }
+    };
+
+    // Separate custom items for display
+    const customSelected = selectedItems.filter(item => !predefinedOptions.includes(item));
+
+    return (
+        <Card>
+            <CardHeader>
+                <CardTitle className="flex items-center gap-2">
+                    {icon} {title}
+                </CardTitle>
+                {description && <p className="text-sm text-gray-600">{description}</p>}
+            </CardHeader>
+            <CardContent className="space-y-4">
+                {/* Predefined Options */}
+                <div>
+                    <label className="text-sm font-medium mb-3 block">Select from common options:</label>
+                    <div className="grid grid-cols-1 gap-3">
+                        {predefinedOptions.map((option, index) => (
+                            <div key={index} className="flex items-center space-x-2">
+                                <Checkbox
+                                    id={`${title.toLowerCase().replace(/\s+/g, '-')}-${index}`}
+                                    checked={selectedItems.includes(option)}
+                                    onCheckedChange={_checked => {
+                                        onToggleItem(option);
+                                    }}
+                                />
+                                <label
+                                    htmlFor={`${title.toLowerCase().replace(/\s+/g, '-')}-${index}`}
+                                    className="text-sm cursor-pointer"
+                                >
+                                    {option}
+                                </label>
+                            </div>
+                        ))}
+                    </div>
+                </div>
+
+                {/* Custom Input */}
+                <div>
+                    <label className="text-sm font-medium mb-2 block">Add custom option:</label>
+                    <div className="flex gap-2">
+                        <Input
+                            value={customInput}
+                            onChange={e => setCustomInput(e.target.value)}
+                            placeholder={customPlaceholder}
+                            onKeyDown={handleKeyDown}
+                        />
+                        <Button
+                            onClick={handleAddCustom}
+                            size="sm"
+                            disabled={!customInput.trim() || selectedItems.includes(customInput.trim())}
+                        >
+                            <Plus className="h-4 w-4" />
+                        </Button>
+                    </div>
+                </div>
+
+                {/* Show custom selections if any */}
+                {customSelected.length > 0 && (
+                    <div>
+                        <label className="text-sm font-medium mb-2 block">Your custom additions:</label>
+                        <div className="space-y-2">
+                            {customSelected.map((item, index) => (
+                                <div key={index} className="flex items-center justify-between bg-gray-50 p-2 rounded">
+                                    <span className="text-sm">{item}</span>
+                                    <Button
+                                        variant="ghost"
+                                        size="sm"
+                                        onClick={() => onToggleItem(item)}
+                                        className="text-red-500 hover:text-red-700"
+                                    >
+                                        Remove
+                                    </Button>
+                                </div>
+                            ))}
+                        </div>
+                    </div>
+                )}
+            </CardContent>
+        </Card>
+    );
+}
+
+export function ExperienceFocusTab() {
+    const { context, toggleInArray, updateField } = useInterviewModal();
+
+    const handleAddCustomGoal = (goal: string) => {
+        toggleInArray('goals', goal);
+    };
+
+    const handleAddCustomExperience = (experience: string) => {
+        toggleInArray('emphasizedExperiences', experience);
+    };
+
+    const handleAddCustomChallenge = (challenge: string) => {
+        toggleInArray('specificChallenges', challenge);
+    };
+
+    return (
+        <div className="space-y-4">
+            {/* Interview Goals */}
+            <CheckboxWithCustomInput
+                title="Interview Goals"
+                description="What do you want to achieve or learn from this interview?"
+                icon="🎯"
+                predefinedOptions={PREDEFINED_INTERVIEW_GOALS}
+                selectedItems={context.goals}
+                onToggleItem={item => toggleInArray('goals', item)}
+                onAddCustomItem={handleAddCustomGoal}
+                customPlaceholder="Add a specific interview goal..."
+            />
+
+            {/* Key Experiences */}
+            <CheckboxWithCustomInput
+                title="Key Experiences to Emphasize"
+                description="Which experiences should be highlighted in your responses?"
+                icon="💼"
+                predefinedOptions={PREDEFINED_EXPERIENCES}
+                selectedItems={context.emphasizedExperiences}
+                onToggleItem={item => toggleInArray('emphasizedExperiences', item)}
+                onAddCustomItem={handleAddCustomExperience}
+                customPlaceholder="Add a specific experience to highlight..."
+            />
+
+            {/* Specific Challenges */}
+            <CheckboxWithCustomInput
+                title="Challenges to Address"
+                description="What types of challenges can you speak to confidently?"
+                icon="⚡"
+                predefinedOptions={PREDEFINED_CHALLENGES}
+                selectedItems={context.specificChallenges}
+                onToggleItem={item => toggleInArray('specificChallenges', item)}
+                onAddCustomItem={handleAddCustomChallenge}
+                customPlaceholder="Add a specific challenge you've overcome..."
+            />
+
+            {/* Additional Context */}
+            <Card>
+                <CardHeader>
+                    <CardTitle>📝 Additional Context</CardTitle>
+                </CardHeader>
+                <CardContent>
+                    <FormField label="Additional Context">
+                        <Textarea
+                            value={context.industry}
+                            onChange={e => updateField('industry', e.target.value)}
+                            placeholder="Any additional context about the role, company, or industry..."
+                            rows={3}
+                        />
+                    </FormField>
+                </CardContent>
+            </Card>
+        </div>
+    );
+}
diff --git a/src/components/interview-modal/tabs/InterviewDetailsTab.tsx b/src/components/interview-modal/tabs/InterviewDetailsTab.tsx
index f42f55a..722b0a3 100644
--- a/src/components/interview-modal/tabs/InterviewDetailsTab.tsx
+++ b/src/components/interview-modal/tabs/InterviewDetailsTab.tsx
@@ -1,295 +1,103 @@
-// // src/components/interview-modal/tabs/InterviewDetailsTab.tsx
-// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-// import { Input } from '@/components/ui/input';
-// import { Textarea } from '@/components/ui/textarea';
-// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
-// import { FormField } from '../components/FormField';
-// import { useInterviewModal } from '../InterviewModalContext';
-// import { InitialInterviewContext } from '@/types';
+// src/components/interview-modal/tabs/InterviewDetailsTab.tsx (FIXED)
+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
+import { Input } from '@/components/ui/input';
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
+import { FormField } from '../components/FormField';
+import { useInterviewModal } from '../InterviewModalContext';
+import { InitialInterviewContext } from '@/types';
 
-// export function InterviewDetailsTab() {
-//     const { context, updateField } = useInterviewModal();
+export function InterviewDetailsTab() {
+    const { context, updateField } = useInterviewModal();
 
-//     return (
-//         <div className="space-y-6">
-//             {/* Core Interview Information */}
-//             <Card>
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2">🎯 Core Interview Information</CardTitle>
-//                 </CardHeader>
-//                 <CardContent className="space-y-4">
-//                     <div className="grid grid-cols-2 gap-4">
-//                         <FormField label="Interview Type" required>
-//                             <Select
-//                                 value={context.interviewType}
-//                                 onValueChange={value =>
-//                                     updateField('interviewType', value as InitialInterviewContext['interviewType'])
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="behavioral">Behavioral</SelectItem>
-//                                     <SelectItem value="technical">Technical</SelectItem>
-//                                     <SelectItem value="case-study">Case Study</SelectItem>
-//                                     <SelectItem value="sales">Sales/Commercial</SelectItem>
-//                                     <SelectItem value="leadership">Leadership</SelectItem>
-//                                     <SelectItem value="mixed">Mixed</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
+    return (
+        <div className="space-y-4">
+            <Card>
+                <CardHeader>
+                    <CardTitle>🎪 Target Interview Details</CardTitle>
+                </CardHeader>
+                <CardContent className="space-y-4">
+                    <div className="grid grid-cols-2 gap-4">
+                        <FormField label="Interview Type">
+                            <Select
+                                value={context.interviewType}
+                                onValueChange={value =>
+                                    updateField('interviewType', value as InitialInterviewContext['interviewType'])
+                                }
+                            >
+                                <SelectTrigger>
+                                    <SelectValue />
+                                </SelectTrigger>
+                                <SelectContent>
+                                    <SelectItem value="behavioral">Behavioral</SelectItem>
+                                    <SelectItem value="technical">Technical</SelectItem>
+                                    <SelectItem value="case-study">Case Study</SelectItem>
+                                    <SelectItem value="sales">Sales/Commercial</SelectItem>
+                                    <SelectItem value="leadership">Leadership</SelectItem>
+                                    <SelectItem value="mixed">Mixed</SelectItem>
+                                </SelectContent>
+                            </Select>
+                        </FormField>
 
-//                         <FormField label="Target Company">
-//                             <Input
-//                                 value={context.targetCompany}
-//                                 onChange={e => updateField('targetCompany', e.target.value)}
-//                                 placeholder="e.g., Salesforce, Microsoft, Apple"
-//                             />
-//                         </FormField>
-//                     </div>
+                        <FormField label="Seniority Level">
+                            <Select
+                                value={context.seniorityLevel}
+                                onValueChange={value =>
+                                    updateField('seniorityLevel', value as InitialInterviewContext['seniorityLevel'])
+                                }
+                            >
+                                <SelectTrigger>
+                                    <SelectValue />
+                                </SelectTrigger>
+                                <SelectContent>
+                                    <SelectItem value="senior-ic">Senior IC</SelectItem>
+                                    <SelectItem value="lead">Team Lead</SelectItem>
+                                    <SelectItem value="manager">Manager</SelectItem>
+                                    <SelectItem value="director">Director</SelectItem>
+                                    <SelectItem value="vp">VP</SelectItem>
+                                    <SelectItem value="c-level">C-Level</SelectItem>
+                                </SelectContent>
+                            </Select>
+                        </FormField>
+                    </div>
 
-//                     <FormField label="Target Role" required>
-//                         <Input
-//                             value={context.targetRole}
-//                             onChange={e => updateField('targetRole', e.target.value)}
-//                             placeholder="e.g., VP of Sales - Enterprise, Senior Sales Director, Product Manager"
-//                         />
-//                     </FormField>
+                    <FormField label="Target Role" required>
+                        <Input
+                            value={context.targetRole}
+                            onChange={e => updateField('targetRole', e.target.value)}
+                            placeholder="e.g., VP of Sales - Enterprise, Senior Sales Director"
+                        />
+                    </FormField>
 
-//                     <FormField label="Role Description">
-//                         <Textarea
-//                             value={context.roleDescription}
-//                             onChange={e => updateField('roleDescription', e.target.value)}
-//                             placeholder="Brief description of the role, key responsibilities, or any specific requirements mentioned..."
-//                             rows={3}
-//                         />
-//                     </FormField>
-//                 </CardContent>
-//             </Card>
+                    <div className="grid grid-cols-2 gap-4">
+                        <FormField label="Target Company">
+                            <Input
+                                value={context.targetCompany}
+                                onChange={e => updateField('targetCompany', e.target.value)}
+                                placeholder="e.g., Salesforce, Microsoft, Siemens"
+                            />
+                        </FormField>
 
-//             {/* Company & Industry Context */}
-//             <Card>
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2">🏢 Company & Industry Context</CardTitle>
-//                 </CardHeader>
-//                 <CardContent className="space-y-4">
-//                     <div className="grid grid-cols-2 gap-4">
-//                         <FormField label="Company Size">
-//                             <Select
-//                                 value={context.companySizeType}
-//                                 onValueChange={value =>
-//                                     updateField('companySizeType', value as InitialInterviewContext['companySizeType'])
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="startup">Startup (&lt;100)</SelectItem>
-//                                     <SelectItem value="scaleup">Scale-up (100-1K)</SelectItem>
-//                                     <SelectItem value="mid-market">Mid-market (1K-10K)</SelectItem>
-//                                     <SelectItem value="large-enterprise">Large Enterprise (10K-50K)</SelectItem>
-//                                     <SelectItem value="mega-corp">Mega Corp (50K+)</SelectItem>
-//                                     <SelectItem value="public-company">Public Company</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-
-//                         <FormField label="Industry Vertical">
-//                             <Select
-//                                 value={context.industryVertical}
-//                                 onValueChange={value =>
-//                                     updateField(
-//                                         'industryVertical',
-//                                         value as InitialInterviewContext['industryVertical']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select industry" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="saas-software">SaaS/Software</SelectItem>
-//                                     <SelectItem value="enterprise-technology">Enterprise Technology</SelectItem>
-//                                     <SelectItem value="financial-services">Financial Services</SelectItem>
-//                                     <SelectItem value="healthcare-biotech">Healthcare/Biotech</SelectItem>
-//                                     <SelectItem value="manufacturing">Manufacturing</SelectItem>
-//                                     <SelectItem value="consulting">Consulting</SelectItem>
-//                                     <SelectItem value="media-entertainment">Media/Entertainment</SelectItem>
-//                                     <SelectItem value="retail-ecommerce">Retail/E-commerce</SelectItem>
-//                                     <SelectItem value="energy">Energy</SelectItem>
-//                                     <SelectItem value="real-estate">Real Estate</SelectItem>
-//                                     <SelectItem value="education">Education</SelectItem>
-//                                     <SelectItem value="government-public-sector">Government/Public Sector</SelectItem>
-//                                     <SelectItem value="other">Other</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                     </div>
-
-//                     <div className="grid grid-cols-2 gap-4">
-//                         <FormField label="Seniority Level">
-//                             <Select
-//                                 value={context.seniorityLevel}
-//                                 onValueChange={value =>
-//                                     updateField('seniorityLevel', value as InitialInterviewContext['seniorityLevel'])
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="senior-ic">Senior IC</SelectItem>
-//                                     <SelectItem value="lead">Team Lead</SelectItem>
-//                                     <SelectItem value="manager">Manager</SelectItem>
-//                                     <SelectItem value="director">Director</SelectItem>
-//                                     <SelectItem value="vp">VP</SelectItem>
-//                                     <SelectItem value="c-level">C-Level</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                         <div></div> {/* Empty div for grid alignment */}
-//                     </div>
-
-//                     <FormField label="Additional Industry Context">
-//                         <Textarea
-//                             value={context.industry}
-//                             onChange={e => updateField('industry', e.target.value)}
-//                             placeholder="Any additional context about the industry, market conditions, or company specifics..."
-//                             rows={2}
-//                         />
-//                     </FormField>
-//                 </CardContent>
-//             </Card>
-
-//             {/* Interview Logistics */}
-//             <Card>
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2">📅 Interview Logistics</CardTitle>
-//                 </CardHeader>
-//                 <CardContent className="space-y-4">
-//                     <div className="grid grid-cols-3 gap-4">
-//                         <FormField label="Interview Round">
-//                             <Select
-//                                 value={context.interviewRound}
-//                                 onValueChange={value =>
-//                                     updateField('interviewRound', value as InitialInterviewContext['interviewRound'])
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select round" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="initial">Initial Screen</SelectItem>
-//                                     <SelectItem value="second">Second Round</SelectItem>
-//                                     <SelectItem value="final">Final Round</SelectItem>
-//                                     <SelectItem value="panel">Panel Interview</SelectItem>
-//                                     <SelectItem value="technical-deep-dive">Technical Deep-dive</SelectItem>
-//                                     <SelectItem value="presentation">Presentation</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-
-//                         <FormField label="Duration">
-//                             <Select
-//                                 value={context.interviewDuration}
-//                                 onValueChange={value =>
-//                                     updateField(
-//                                         'interviewDuration',
-//                                         value as InitialInterviewContext['interviewDuration']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select duration" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="30min">30 minutes</SelectItem>
-//                                     <SelectItem value="45min">45 minutes</SelectItem>
-//                                     <SelectItem value="60min">60 minutes</SelectItem>
-//                                     <SelectItem value="90min">90 minutes</SelectItem>
-//                                     <SelectItem value="half-day">Half day</SelectItem>
-//                                     <SelectItem value="full-day">Full day</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-
-//                         <FormField label="Format">
-//                             <Select
-//                                 value={context.interviewFormat}
-//                                 onValueChange={value =>
-//                                     updateField('interviewFormat', value as InitialInterviewContext['interviewFormat'])
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select format" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="video-call">Video Call</SelectItem>
-//                                     <SelectItem value="phone">Phone</SelectItem>
-//                                     <SelectItem value="in-person">In-Person</SelectItem>
-//                                     <SelectItem value="presentation">Presentation</SelectItem>
-//                                     <SelectItem value="case-study">Case Study</SelectItem>
-//                                     <SelectItem value="working-session">Working Session</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                     </div>
-//                 </CardContent>
-//             </Card>
-
-//             {/* Strategic Context */}
-//             <Card>
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2">🎭 Strategic Context</CardTitle>
-//                 </CardHeader>
-//                 <CardContent className="space-y-4">
-//                     <div className="grid grid-cols-2 gap-4">
-//                         <FormField label="Competitive Context">
-//                             <Select
-//                                 value={context.competitiveContext}
-//                                 onValueChange={value =>
-//                                     updateField(
-//                                         'competitiveContext',
-//                                         value as InitialInterviewContext['competitiveContext']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select context" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="direct-competitor">Direct Competitor</SelectItem>
-//                                     <SelectItem value="adjacent-industry">Adjacent Industry</SelectItem>
-//                                     <SelectItem value="career-pivot">Career Pivot</SelectItem>
-//                                     <SelectItem value="internal-transfer">Internal Transfer</SelectItem>
-//                                     <SelectItem value="first-role">First Role in Field</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-
-//                         <FormField label="Opportunity Priority">
-//                             <Select
-//                                 value={context.urgencyLevel}
-//                                 onValueChange={value =>
-//                                     updateField('urgencyLevel', value as InitialInterviewContext['urgencyLevel'])
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select priority" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="exploratory">Exploratory</SelectItem>
-//                                     <SelectItem value="active">Active Interest</SelectItem>
-//                                     <SelectItem value="urgent">Urgent Need</SelectItem>
-//                                     <SelectItem value="dream-opportunity">Dream Opportunity</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                     </div>
-//                 </CardContent>
-//             </Card>
-//         </div>
-//     );
-// }
+                        <FormField label="Company Size">
+                            <Select
+                                value={context.companySizeType}
+                                onValueChange={value =>
+                                    updateField('companySizeType', value as InitialInterviewContext['companySizeType'])
+                                }
+                            >
+                                <SelectTrigger>
+                                    <SelectValue />
+                                </SelectTrigger>
+                                <SelectContent>
+                                    <SelectItem value="scaleup">Scale-up (100-1K)</SelectItem>
+                                    <SelectItem value="mid-market">Mid-market (1K-10K)</SelectItem>
+                                    <SelectItem value="enterprise">Enterprise (10K+)</SelectItem>
+                                    <SelectItem value="public">Public Company</SelectItem>
+                                </SelectContent>
+                            </Select>
+                        </FormField>
+                    </div>
+                </CardContent>
+            </Card>
+        </div>
+    );
+}
diff --git a/src/components/interview-modal/tabs/InterviewStrategyTab.tsx b/src/components/interview-modal/tabs/InterviewStrategyTab.tsx
deleted file mode 100644
index daff48d..0000000
--- a/src/components/interview-modal/tabs/InterviewStrategyTab.tsx
+++ /dev/null
@@ -1,326 +0,0 @@
-// // src/components/interview-modal/tabs/InterviewStrategyTab.tsx
-// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
-// import { Input } from '@/components/ui/input';
-// import { Textarea } from '@/components/ui/textarea';
-// import { Button } from '@/components/ui/button';
-// import { FormField } from '../components/FormField';
-// import { DynamicList } from '../components/DynamicList';
-// import { useInterviewModal } from '../InterviewModalContext';
-// import { InitialInterviewContext, InterviewerProfile } from '@/types';
-// import { Plus, Trash2 } from 'lucide-react';
-// import { PREDEFINED_DIFFERENTIATORS, PREDEFINED_RISK_MITIGATIONS, PREDEFINED_QUESTIONS } from '@/lib/predefinedFields';
-// import { CreativePredefinedSelector } from '../components/CreativePredefinedSelector';
-
-// export function InterviewStrategyTab() {
-//     const { context, updateField } = useInterviewModal();
-
-//     // Ensure interviewStrategy exists with default values
-//     const interviewStrategy = context.interviewStrategy || {
-//         primaryPositioning: undefined,
-//         keyDifferentiators: [],
-//         riskMitigation: [],
-//         questionsToAsk: [],
-//         followUpStrategy: undefined,
-//     };
-
-//     const interviewerProfiles = context.interviewerProfiles || [];
-
-//     // Helper functions for nested interviewer profiles
-//     const addInterviewerProfile = () => {
-//         const newProfile: InterviewerProfile = {
-//             role: 'hiring-manager',
-//             name: '',
-//             background: '',
-//             priorities: [],
-//             communicationStyle: 'collaborative',
-//         };
-//         const updatedProfiles = [...interviewerProfiles, newProfile];
-//         updateField('interviewerProfiles', updatedProfiles);
-//     };
-
-//     const updateInterviewerProfile = (index: number, field: keyof InterviewerProfile, value: any) => {
-//         const updatedProfiles = [...interviewerProfiles];
-//         updatedProfiles[index] = { ...updatedProfiles[index], [field]: value };
-//         updateField('interviewerProfiles', updatedProfiles);
-//     };
-
-//     const removeInterviewerProfile = (index: number) => {
-//         const updatedProfiles = interviewerProfiles.filter((_, i) => i !== index);
-//         updateField('interviewerProfiles', updatedProfiles);
-//     };
-
-//     const updateInterviewerPriorities = (index: number, priorities: string[]) => {
-//         updateInterviewerProfile(index, 'priorities', priorities);
-//     };
-
-//     // Helper functions for strategy fields
-//     const updateStrategyField = (field: keyof InitialInterviewContext['interviewStrategy'], value: any) => {
-//         const updatedStrategy = { ...interviewStrategy, [field]: value };
-//         updateField('interviewStrategy', updatedStrategy);
-//     };
-
-//     return (
-//         <div className="space-y-6">
-//             {/* Strategic Positioning */}
-//             <div className="space-y-4">
-//                 <div className="border-l-4 border-orange-500 pl-4">
-//                     <h3 className="text-lg font-semibold text-gray-900">Strategic Positioning</h3>
-//                     <p className="text-sm text-gray-600">Define how you want to position yourself competitively</p>
-//                 </div>
-
-//                 <Card>
-//                     <CardHeader>
-//                         <CardTitle className="flex items-center gap-2">🎯 Primary Positioning</CardTitle>
-//                         <p className="text-sm text-gray-600">Choose your primary value proposition for this role</p>
-//                     </CardHeader>
-//                     <CardContent>
-//                         <FormField label="Primary Positioning">
-//                             <Select
-//                                 value={interviewStrategy.primaryPositioning || ''}
-//                                 onValueChange={value =>
-//                                     updateStrategyField(
-//                                         'primaryPositioning',
-//                                         value as InitialInterviewContext['interviewStrategy']['primaryPositioning']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select positioning" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="problem-solver">Problem Solver</SelectItem>
-//                                     <SelectItem value="growth-driver">Growth Driver</SelectItem>
-//                                     <SelectItem value="efficiency-expert">Efficiency Expert</SelectItem>
-//                                     <SelectItem value="transformation-leader">Transformation Leader</SelectItem>
-//                                     <SelectItem value="innovation-catalyst">Innovation Catalyst</SelectItem>
-//                                     <SelectItem value="customer-champion">Customer Champion</SelectItem>
-//                                     <SelectItem value="technical-expert">Technical Expert</SelectItem>
-//                                     <SelectItem value="strategic-advisor">Strategic Advisor</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                     </CardContent>
-//                 </Card>
-
-//                 <CreativePredefinedSelector
-//                     title="Key Differentiators"
-//                     description="What sets you apart from other candidates"
-//                     icon="⭐"
-//                     predefinedOptions={PREDEFINED_DIFFERENTIATORS}
-//                     selectedItems={interviewStrategy.keyDifferentiators}
-//                     onItemsChange={items => updateStrategyField('keyDifferentiators', items)}
-//                     placeholder="Add a custom differentiator..."
-//                 />
-
-//                 <CreativePredefinedSelector
-//                     title="Risk Mitigation"
-//                     description="Address potential concerns or weaknesses proactively"
-//                     icon="🛡️"
-//                     predefinedOptions={PREDEFINED_RISK_MITIGATIONS}
-//                     selectedItems={interviewStrategy.riskMitigation}
-//                     onItemsChange={items => updateStrategyField('riskMitigation', items)}
-//                     placeholder="Add a custom risk to address..."
-//                 />
-//             </div>
-
-//             {/* Interviewer Context */}
-//             <div className="space-y-4">
-//                 <div className="border-l-4 border-blue-500 pl-4">
-//                     <h3 className="text-lg font-semibold text-gray-900">Interviewer Intelligence</h3>
-//                     <p className="text-sm text-gray-600">Research and prepare for specific interviewers</p>
-//                 </div>
-
-//                 <Card>
-//                     <CardHeader>
-//                         <CardTitle className="flex items-center gap-2">👥 Interviewer Profiles</CardTitle>
-//                         <div className="flex items-center justify-between">
-//                             <p className="text-sm text-gray-600">
-//                                 Add details about each interviewer to tailor your approach
-//                             </p>
-//                             <Button onClick={addInterviewerProfile} size="sm">
-//                                 <Plus className="h-4 w-4 mr-1" />
-//                                 Add Interviewer
-//                             </Button>
-//                         </div>
-//                     </CardHeader>
-//                     <CardContent className="space-y-4">
-//                         {interviewerProfiles.length === 0 ? (
-//                             <div className="text-center py-8 text-gray-500">
-//                                 <p>No interviewers added yet</p>
-//                                 <p className="text-sm">
-//                                     Click &quot;Add Interviewer&quot; to start building interviewer profiles
-//                                 </p>
-//                             </div>
-//                         ) : (
-//                             interviewerProfiles.map((interviewer, index) => (
-//                                 <Card key={index} className="border border-gray-200">
-//                                     <CardHeader className="pb-4">
-//                                         <div className="flex items-center justify-between">
-//                                             <h4 className="font-medium">Interviewer {index + 1}</h4>
-//                                             <Button
-//                                                 variant="ghost"
-//                                                 size="sm"
-//                                                 onClick={() => removeInterviewerProfile(index)}
-//                                                 className="text-red-500 hover:text-red-700"
-//                                             >
-//                                                 <Trash2 className="h-4 w-4" />
-//                                             </Button>
-//                                         </div>
-//                                     </CardHeader>
-//                                     <CardContent className="space-y-4">
-//                                         <div className="grid grid-cols-2 gap-4">
-//                                             <FormField label="Role">
-//                                                 <Select
-//                                                     value={interviewer.role}
-//                                                     onValueChange={value =>
-//                                                         updateInterviewerProfile(index, 'role', value)
-//                                                     }
-//                                                 >
-//                                                     <SelectTrigger>
-//                                                         <SelectValue />
-//                                                     </SelectTrigger>
-//                                                     <SelectContent>
-//                                                         <SelectItem value="hiring-manager">Hiring Manager</SelectItem>
-//                                                         <SelectItem value="peer">Peer/Colleague</SelectItem>
-//                                                         <SelectItem value="senior-executive">
-//                                                             Senior Executive
-//                                                         </SelectItem>
-//                                                         <SelectItem value="hr">HR Representative</SelectItem>
-//                                                         <SelectItem value="technical-lead">Technical Lead</SelectItem>
-//                                                         <SelectItem value="panel-member">Panel Member</SelectItem>
-//                                                     </SelectContent>
-//                                                 </Select>
-//                                             </FormField>
-
-//                                             <FormField label="Communication Style">
-//                                                 <Select
-//                                                     value={interviewer.communicationStyle}
-//                                                     onValueChange={value =>
-//                                                         updateInterviewerProfile(index, 'communicationStyle', value)
-//                                                     }
-//                                                 >
-//                                                     <SelectTrigger>
-//                                                         <SelectValue />
-//                                                     </SelectTrigger>
-//                                                     <SelectContent>
-//                                                         <SelectItem value="direct">Direct</SelectItem>
-//                                                         <SelectItem value="collaborative">Collaborative</SelectItem>
-//                                                         <SelectItem value="analytical">Analytical</SelectItem>
-//                                                         <SelectItem value="relationship-focused">
-//                                                             Relationship-Focused
-//                                                         </SelectItem>
-//                                                     </SelectContent>
-//                                                 </Select>
-//                                             </FormField>
-//                                         </div>
-
-//                                         <FormField label="Name (Optional)">
-//                                             <Input
-//                                                 value={interviewer.name}
-//                                                 onChange={e => updateInterviewerProfile(index, 'name', e.target.value)}
-//                                                 placeholder="Enter interviewer's name"
-//                                             />
-//                                         </FormField>
-
-//                                         <FormField label="Background (Optional)">
-//                                             <Textarea
-//                                                 value={interviewer.background}
-//                                                 onChange={e =>
-//                                                     updateInterviewerProfile(index, 'background', e.target.value)
-//                                                 }
-//                                                 placeholder="Any known background, experience, or interests..."
-//                                                 rows={2}
-//                                             />
-//                                         </FormField>
-
-//                                         <FormField label="Priorities & Interests">
-//                                             <DynamicList
-//                                                 items={interviewer.priorities}
-//                                                 onItemsChange={items => updateInterviewerPriorities(index, items)}
-//                                                 placeholder="Add priority or interest (e.g., Team culture, Technical skills)"
-//                                                 addButtonText="Add Priority"
-//                                             />
-//                                         </FormField>
-//                                     </CardContent>
-//                                 </Card>
-//                             ))
-//                         )}
-//                     </CardContent>
-//                 </Card>
-//             </div>
-
-//             {/* Post-Interview Planning */}
-//             <div className="space-y-4">
-//                 <div className="border-l-4 border-green-500 pl-4">
-//                     <h3 className="text-lg font-semibold text-gray-900">Post-Interview Planning</h3>
-//                     <p className="text-sm text-gray-600">Prepare questions and follow-up strategy</p>
-//                 </div>
-
-//                 <CreativePredefinedSelector
-//                     title="Questions to Ask"
-//                     description="Thoughtful questions that demonstrate your interest and understanding"
-//                     icon="❓"
-//                     predefinedOptions={PREDEFINED_QUESTIONS}
-//                     selectedItems={interviewStrategy.questionsToAsk}
-//                     onItemsChange={items => updateStrategyField('questionsToAsk', items)}
-//                     placeholder="Add a custom strategic question..."
-//                 />
-
-//                 <Card>
-//                     <CardHeader>
-//                         <CardTitle className="flex items-center gap-2">📬 Follow-Up Strategy</CardTitle>
-//                         <p className="text-sm text-gray-600">Plan your post-interview communication timeline</p>
-//                     </CardHeader>
-//                     <CardContent>
-//                         <FormField label="Follow-Up Timeline">
-//                             <Select
-//                                 value={interviewStrategy.followUpStrategy || ''}
-//                                 onValueChange={value => updateStrategyField('followUpStrategy', value)}
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="immediate">Immediate (Same Day)</SelectItem>
-//                                     <SelectItem value="24-hour">24 Hours</SelectItem>
-//                                     <SelectItem value="week">One Week</SelectItem>
-//                                     <SelectItem value="custom">Custom Timeline</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                     </CardContent>
-//                 </Card>
-//             </div>
-
-//             {/* Strategy Tips */}
-//             <Card className="bg-purple-50 border-purple-200">
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2 text-purple-800">🧠 Strategy Tips</CardTitle>
-//                 </CardHeader>
-//                 <CardContent className="text-sm text-purple-700 space-y-2">
-//                     <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-//                         <div className="space-y-2">
-//                             <p>
-//                                 <strong>Research thoroughly:</strong> Use LinkedIn, company website, and news to
-//                                 understand interviewers
-//                             </p>
-//                             <p>
-//                                 <strong>Prepare 3-5 questions:</strong> Quality over quantity for meaningful dialogue
-//                             </p>
-//                         </div>
-//                         <div className="space-y-2">
-//                             <p>
-//                                 <strong>Address weaknesses early:</strong> Proactive risk mitigation builds confidence
-//                             </p>
-//                             <p>
-//                                 <strong>Match communication styles:</strong> Adapt your approach to each
-//                                 interviewer&apos;s style
-//                             </p>
-//                         </div>
-//                     </div>
-//                 </CardContent>
-//             </Card>
-//         </div>
-//     );
-// }
diff --git a/src/components/interview-modal/tabs/KnowledgeBaseTab.tsx b/src/components/interview-modal/tabs/KnowledgeBaseTab.tsx
index 947bf22..f95ce43 100644
--- a/src/components/interview-modal/tabs/KnowledgeBaseTab.tsx
+++ b/src/components/interview-modal/tabs/KnowledgeBaseTab.tsx
@@ -1,227 +1,178 @@
-// // src/components/interview-modal/tabs/KnowledgeBaseTab.tsx
-// 'use client';
-// import { useState } from 'react';
-// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-// import { Badge } from '@/components/ui/badge';
-// import { useKnowledge } from '@/contexts/KnowledgeProvider';
-// import { AlertCircle, CheckCircle, Database, FileText, Clock } from 'lucide-react';
-// import { KnowledgeIndexingButton } from '@/components/KnowledgeIndexingButton';
-// import { logger } from '@/modules';
-// import { Input } from '@/components/ui/input';
-// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
-// import { Button } from '@/components/ui/button';
-
-// export function KnowledgeBaseTab() {
-//     logger.info('🔍 KnowledgeBaseTab component is rendering'); // ADD THIS LINE
-//     const { indexedDocumentsCount, knowledgeBaseName, lastIndexedAt, error, triggerIndexing } = useKnowledge();
-//     const [selectedFile, setSelectedFile] = useState<File | null>(null);
-//     const [fileTag, setFileTag] = useState('Resume');
-
-//     const handleFileUpload = async () => {
-//         if (!selectedFile) return;
-//         // Prepare file upload
-//         const formData = new FormData();
-//         formData.append('file', selectedFile);
-//         formData.append('tag', fileTag);
-//         try {
-//             // Send file to backend for storage/indexing
-//             await fetch('/api/knowledge/upload', { method: 'POST', body: formData });
-//             await triggerIndexing(); // re-index knowledge base after adding file
-//             setSelectedFile(null);
-//             console.info('✅ Knowledge file uploaded and indexing triggered.');
-//         } catch (err) {
-//             console.error('❌ File upload failed:', err);
-//         }
-//     };
-
-//     // Knowledge file categories for user visibility
-//     const coreKnowledgeFiles = [
-//         'My Career Summary & Achievements',
-//         'MEDDPICC Success Stories',
-//         'Sales Methodology',
-//         'Quality Management Principles',
-//         'C-Level Engagement Strategies',
-//     ];
-
-//     const variableKnowledgeFiles = [
-//         'Company-Specific Role Scenarios',
-//         'Target Company Profile',
-//         'Job Description Analysis',
-//         'Industry Trends & Insights',
-//     ];
-
-//     const getStatusInfo = () => {
-//         if (error) {
-//             return {
-//                 icon: <AlertCircle className="h-5 w-5 text-red-500" />,
-//                 status: 'Error',
-//                 message: 'Knowledge base initialization failed',
-//                 badgeVariant: 'destructive' as const,
-//             };
-//         }
-
-//         if (indexedDocumentsCount === 0) {
-//             return {
-//                 icon: <Database className="h-5 w-5 text-yellow-500" />,
-//                 status: 'Empty',
-//                 message: 'No knowledge indexed yet',
-//                 badgeVariant: 'secondary' as const,
-//             };
-//         }
-
-//         return {
-//             icon: <CheckCircle className="h-5 w-5 text-green-500" />,
-//             status: 'Ready',
-//             message: `${indexedDocumentsCount} items indexed`,
-//             badgeVariant: 'default' as const,
-//         };
-//     };
-
-//     const statusInfo = getStatusInfo();
-
-//     return (
-//         <div className="space-y-4">
-//             <Card>
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2">
-//                         <Database className="h-5 w-5" />
-//                         Knowledge Base Management
-//                     </CardTitle>
-//                 </CardHeader>
-//                 <CardContent className="space-y-6">
-//                     {/* Status Overview */}
-//                     <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
-//                         <div className="flex items-center gap-3">
-//                             {statusInfo.icon}
-//                             <div>
-//                                 <div className="flex items-center gap-2">
-//                                     <span className="font-medium">Knowledge Base Status</span>
-//                                     <Badge variant={statusInfo.badgeVariant}>{statusInfo.status}</Badge>
-//                                 </div>
-//                                 <p className="text-sm text-gray-600 mt-1">{statusInfo.message}</p>
-//                                 {lastIndexedAt && (
-//                                     <div className="flex items-center gap-1 mt-1 text-xs text-gray-500">
-//                                         <Clock className="h-3 w-3" />
-//                                         Last indexed: {lastIndexedAt.toLocaleString()}
-//                                     </div>
-//                                 )}
-//                             </div>
-//                         </div>
-//                     </div>
-
-//                     {/* Error Display */}
-//                     {error && (
-//                         <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
-//                             <div className="flex items-center gap-2 text-red-700">
-//                                 <AlertCircle className="h-4 w-4" />
-//                                 <span className="font-medium">Error Details</span>
-//                             </div>
-//                             <p className="text-sm text-red-600 mt-1">{error}</p>
-//                         </div>
-//                     )}
-
-//                     {/* File Upload Section (new) */}
-//                     <div>
-//                         <h4 className="font-medium">Upload Knowledge File</h4>
-//                         <p className="text-sm text-gray-600 mb-2">
-//                             Select a file to add to your knowledge base and tag its category.
-//                         </p>
-//                         <div className="flex items-center gap-2">
-//                             <Input
-//                                 type="file"
-//                                 onChange={e => setSelectedFile(e.target.files?.[0] || null)}
-//                                 className="flex-1"
-//                             />
-//                             <Select value={fileTag} onValueChange={setFileTag}>
-//                                 <SelectTrigger className="w-40">
-//                                     <SelectValue placeholder="Tag" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="Resume">Resume</SelectItem>
-//                                     <SelectItem value="Company Brief">Company Brief</SelectItem>
-//                                     <SelectItem value="Strategy Memo">Strategy Memo</SelectItem>
-//                                     <SelectItem value="Other">Other</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                             <Button onClick={handleFileUpload} disabled={!selectedFile}>
-//                                 Add
-//                             </Button>
-//                         </div>
-//                         <p className="text-xs text-gray-500 mt-1">
-//                             *Tag the file to categorize its content (e.g. resume, company info, strategy).*
-//                         </p>
-//                     </div>
-
-//                     {/* Indexing Action */}
-//                     <div className="space-y-4">
-//                         <div>
-//                             <h4 className="font-medium mb-2">Index Knowledge Base</h4>
-//                             <p className="text-sm text-gray-600 mb-4">
-//                                 Process your knowledge files to enable AI-powered responses based on your career
-//                                 history, company information, and interview preparation materials.
-//                             </p>
-//                             <KnowledgeIndexingButton
-//                                 variant="primary"
-//                                 size="md"
-//                                 showProgress={true}
-//                                 className="w-full"
-//                             />
-//                         </div>
-//                     </div>
-
-//                     {/* Knowledge Files Overview */}
-//                     <div className="grid md:grid-cols-2 gap-4">
-//                         <div className="space-y-3">
-//                             <div className="flex items-center gap-2">
-//                                 <FileText className="h-4 w-4 text-blue-500" />
-//                                 <h4 className="font-medium">Core Knowledge Files</h4>
-//                             </div>
-//                             <div className="space-y-1">
-//                                 {coreKnowledgeFiles.map((file, index) => (
-//                                     <div key={index} className="text-sm text-gray-600 pl-6">
-//                                         • {file}
-//                                     </div>
-//                                 ))}
-//                             </div>
-//                         </div>
-
-//                         <div className="space-y-3">
-//                             <div className="flex items-center gap-2">
-//                                 <FileText className="h-4 w-4 text-orange-500" />
-//                                 <h4 className="font-medium">Variable Knowledge Files</h4>
-//                             </div>
-//                             <div className="space-y-1">
-//                                 {variableKnowledgeFiles.map((file, index) => (
-//                                     <div key={index} className="text-sm text-gray-600 pl-6">
-//                                         • {file}
-//                                     </div>
-//                                 ))}
-//                             </div>
-//                         </div>
-//                     </div>
-
-//                     {/* Information Box */}
-//                     <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
-//                         <h4 className="font-medium text-blue-900 mb-2">💡 How It Works</h4>
-//                         <ul className="text-sm text-blue-800 space-y-1">
-//                             <li>
-//                                 • <strong>Core files</strong> contain your permanent career history and methodologies
-//                             </li>
-//                             <li>
-//                                 • <strong>Variable files</strong> are updated for each specific interview opportunity
-//                             </li>
-//                             <li>• The AI uses this knowledge to provide contextual, personalized responses</li>
-//                             <li>• Re-index whenever you update your knowledge files</li>
-//                         </ul>
-//                     </div>
-
-//                     {/* Collection Info */}
-//                     <div className="text-xs text-gray-500 border-t pt-3">
-//                         <span className="font-mono">{knowledgeBaseName}</span>
-//                         {lastIndexedAt && <span> – Last indexed: {lastIndexedAt.toLocaleString()}</span>}
-//                     </div>
-//                 </CardContent>
-//             </Card>
-//         </div>
-//     );
-// }
+// src/components/interview-modal/tabs/KnowledgeBaseTab.tsx
+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
+import { Badge } from '@/components/ui/badge';
+import { useKnowledge } from '@/contexts/KnowledgeProvider';
+import { AlertCircle, CheckCircle, Database, FileText, Clock } from 'lucide-react';
+import { KnowledgeIndexingButton } from '@/components/KnowledgeIndexingButton';
+import { logger } from '@/modules';
+
+export function KnowledgeBaseTab() {
+    logger.info('🔍 KnowledgeBaseTab component is rendering'); // ADD THIS LINE
+    const { indexedDocumentsCount, knowledgeBaseName, lastIndexedAt, error } = useKnowledge();
+
+    // Knowledge file categories for user visibility
+    const coreKnowledgeFiles = [
+        'My Career Summary & Achievements',
+        'MEDDPICC Success Stories',
+        'Sales Methodology',
+        'Quality Management Principles',
+        'C-Level Engagement Strategies',
+    ];
+
+    const variableKnowledgeFiles = [
+        'Company-Specific Role Scenarios',
+        'Target Company Profile',
+        'Job Description Analysis',
+        'Industry Trends & Insights',
+    ];
+
+    const getStatusInfo = () => {
+        if (error) {
+            return {
+                icon: <AlertCircle className="h-5 w-5 text-red-500" />,
+                status: 'Error',
+                message: 'Knowledge base initialization failed',
+                badgeVariant: 'destructive' as const,
+            };
+        }
+
+        if (indexedDocumentsCount === 0) {
+            return {
+                icon: <Database className="h-5 w-5 text-yellow-500" />,
+                status: 'Empty',
+                message: 'No knowledge indexed yet',
+                badgeVariant: 'secondary' as const,
+            };
+        }
+
+        return {
+            icon: <CheckCircle className="h-5 w-5 text-green-500" />,
+            status: 'Ready',
+            message: `${indexedDocumentsCount} items indexed`,
+            badgeVariant: 'default' as const,
+        };
+    };
+
+    const statusInfo = getStatusInfo();
+
+    return (
+        <div className="space-y-4">
+            <Card>
+                <CardHeader>
+                    <CardTitle className="flex items-center gap-2">
+                        <Database className="h-5 w-5" />
+                        Knowledge Base Management
+                    </CardTitle>
+                </CardHeader>
+                <CardContent className="space-y-6">
+                    {/* Status Overview */}
+                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
+                        <div className="flex items-center gap-3">
+                            {statusInfo.icon}
+                            <div>
+                                <div className="flex items-center gap-2">
+                                    <span className="font-medium">Knowledge Base Status</span>
+                                    <Badge variant={statusInfo.badgeVariant}>
+                                        {statusInfo.status}
+                                    </Badge>
+                                </div>
+                                <p className="text-sm text-gray-600 mt-1">{statusInfo.message}</p>
+                                {lastIndexedAt && (
+                                    <div className="flex items-center gap-1 mt-1 text-xs text-gray-500">
+                                        <Clock className="h-3 w-3" />
+                                        Last indexed: {lastIndexedAt.toLocaleString()}
+                                    </div>
+                                )}
+                            </div>
+                        </div>
+                    </div>
+
+                    {/* Error Display */}
+                    {error && (
+                        <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
+                            <div className="flex items-center gap-2 text-red-700">
+                                <AlertCircle className="h-4 w-4" />
+                                <span className="font-medium">Error Details</span>
+                            </div>
+                            <p className="text-sm text-red-600 mt-1">{error}</p>
+                        </div>
+                    )}
+
+                    {/* Indexing Action */}
+                    <div className="space-y-4">
+                        <div>
+                            <h4 className="font-medium mb-2">Index Knowledge Base</h4>
+                            <p className="text-sm text-gray-600 mb-4">
+                                Process your knowledge files to enable AI-powered responses based on
+                                your career history, company information, and interview preparation
+                                materials.
+                            </p>
+                            <KnowledgeIndexingButton
+                                variant="primary"
+                                size="md"
+                                showProgress={true}
+                                className="w-full"
+                            />
+                        </div>
+                    </div>
+
+                    {/* Knowledge Files Overview */}
+                    <div className="grid md:grid-cols-2 gap-4">
+                        <div className="space-y-3">
+                            <div className="flex items-center gap-2">
+                                <FileText className="h-4 w-4 text-blue-500" />
+                                <h4 className="font-medium">Core Knowledge Files</h4>
+                            </div>
+                            <div className="space-y-1">
+                                {coreKnowledgeFiles.map((file, index) => (
+                                    <div key={index} className="text-sm text-gray-600 pl-6">
+                                        • {file}
+                                    </div>
+                                ))}
+                            </div>
+                        </div>
+
+                        <div className="space-y-3">
+                            <div className="flex items-center gap-2">
+                                <FileText className="h-4 w-4 text-orange-500" />
+                                <h4 className="font-medium">Variable Knowledge Files</h4>
+                            </div>
+                            <div className="space-y-1">
+                                {variableKnowledgeFiles.map((file, index) => (
+                                    <div key={index} className="text-sm text-gray-600 pl-6">
+                                        • {file}
+                                    </div>
+                                ))}
+                            </div>
+                        </div>
+                    </div>
+
+                    {/* Information Box */}
+                    <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
+                        <h4 className="font-medium text-blue-900 mb-2">💡 How It Works</h4>
+                        <ul className="text-sm text-blue-800 space-y-1">
+                            <li>
+                                • <strong>Core files</strong> contain your permanent career history
+                                and methodologies
+                            </li>
+                            <li>
+                                • <strong>Variable files</strong> are updated for each specific
+                                interview opportunity
+                            </li>
+                            <li>
+                                • The AI uses this knowledge to provide contextual, personalized
+                                responses
+                            </li>
+                            <li>• Re-index whenever you update your knowledge files</li>
+                        </ul>
+                    </div>
+
+                    {/* Collection Info */}
+                    <div className="text-xs text-gray-500 border-t pt-3">
+                        <span className="font-mono">{knowledgeBaseName}</span>
+                    </div>
+                </CardContent>
+            </Card>
+        </div>
+    );
+}
diff --git a/src/components/interview-modal/tabs/ResponseSettingsTab.tsx b/src/components/interview-modal/tabs/ResponseSettingsTab.tsx
index 6aed2e0..8ab413c 100644
--- a/src/components/interview-modal/tabs/ResponseSettingsTab.tsx
+++ b/src/components/interview-modal/tabs/ResponseSettingsTab.tsx
@@ -1,253 +1,68 @@
-// // src/components/interview-modal/tabs/ResponseSettingsTab.tsx
-// import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
-// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
-// import { Switch } from '@/components/ui/switch';
-// import { Slider } from '@/components/ui/slider';
-// import { FormField } from '../components/FormField';
-// import { useInterviewModal } from '../InterviewModalContext';
-// import { InitialInterviewContext } from '@/types';
+// src/components/interview-modal/tabs/ResponseSettingsTab.tsx
+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
+import { Switch } from '@/components/ui/switch';
+import { FormField } from '../components/FormField';
+import { useInterviewModal } from '../InterviewModalContext';
+import { InitialInterviewContext } from '@/types';
 
-// export function ResponseSettingsTab() {
-//     const { context, updateField } = useInterviewModal();
+export function ResponseSettingsTab() {
+    const { context, updateField } = useInterviewModal();
 
-//     return (
-//         <div className="space-y-6">
-//             {/* Core Response Parameters */}
-//             <Card>
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2">⚙️ Core Response Parameters</CardTitle>
-//                     <p className="text-sm text-gray-600">Basic settings that control how responses are generated</p>
-//                 </CardHeader>
-//                 <CardContent className="space-y-6">
-//                     <div className="grid grid-cols-3 gap-4">
-//                         {/* Response Confidence */}
-//                         <FormField label="Response Confidence">
-//                             <Select
-//                                 value={context.responseConfidence}
-//                                 onValueChange={value =>
-//                                     updateField(
-//                                         'responseConfidence',
-//                                         value as InitialInterviewContext['responseConfidence']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="conservative">Conservative</SelectItem>
-//                                     <SelectItem value="balanced">Balanced</SelectItem>
-//                                     <SelectItem value="confident">Confident</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
+    return (
+        <div className="space-y-4">
+            <Card>
+                <CardHeader>
+                    <CardTitle>⚙️ Response Configuration</CardTitle>
+                </CardHeader>
+                <CardContent className="space-y-4">
+                    <div className="grid grid-cols-2 gap-4">
+                        <FormField label="Response Confidence">
+                            <Select
+                                value={context.responseConfidence}
+                                onValueChange={value =>
+                                    updateField('responseConfidence', value as InitialInterviewContext['responseConfidence'])
+                                }
+                            >
+                                <SelectTrigger>
+                                    <SelectValue />
+                                </SelectTrigger>
+                                <SelectContent>
+                                    <SelectItem value="conservative">Conservative</SelectItem>
+                                    <SelectItem value="balanced">Balanced</SelectItem>
+                                    <SelectItem value="confident">Confident</SelectItem>
+                                </SelectContent>
+                            </Select>
+                        </FormField>
 
-//                         {/* Response Structure */}
-//                         <FormField label="Response Structure">
-//                             <Select
-//                                 value={context.responseStructure}
-//                                 onValueChange={value =>
-//                                     updateField(
-//                                         'responseStructure',
-//                                         value as InitialInterviewContext['responseStructure']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="STAR-method">STAR Method</SelectItem>
-//                                     <SelectItem value="problem-solution-impact">Problem-Solution-Impact</SelectItem>
-//                                     <SelectItem value="context-action-result">Context-Action-Result</SelectItem>
-//                                     <SelectItem value="situation-challenge-solution">
-//                                         Situation-Challenge-Solution
-//                                     </SelectItem>
-//                                     <SelectItem value="data-story-insight">Data-Story-Insight</SelectItem>
-//                                     <SelectItem value="flexible-adaptive">Flexible-Adaptive</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
+                        <FormField label="Response Structure">
+                            <Select
+                                value={context.responseStructure}
+                                onValueChange={value =>
+                                    updateField('responseStructure', value as InitialInterviewContext['responseStructure'])
+                                }
+                            >
+                                <SelectTrigger>
+                                    <SelectValue />
+                                </SelectTrigger>
+                                <SelectContent>
+                                    <SelectItem value="story-driven">Story-Driven</SelectItem>
+                                    <SelectItem value="data-driven">Data-Driven</SelectItem>
+                                    <SelectItem value="hybrid">Hybrid</SelectItem>
+                                </SelectContent>
+                            </Select>
+                        </FormField>
+                    </div>
 
-//                         {/* Response Verbosity */}
-//                         <FormField label="Response Verbosity">
-//                             <Select
-//                                 value={context.responseVerbosity}
-//                                 onValueChange={value =>
-//                                     updateField(
-//                                         'responseVerbosity',
-//                                         value as InitialInterviewContext['responseVerbosity']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="concise">Concise</SelectItem>
-//                                     <SelectItem value="detailed">Detailed</SelectItem>
-//                                     <SelectItem value="auto">Auto</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                     </div>
-
-//                     <div className="grid grid-cols-2 gap-6">
-//                         {/* Context Depth */}
-//                         <div className="space-y-3">
-//                             <FormField label={`Context Depth: ${context.contextDepth}`}>
-//                                 <Slider
-//                                     value={[context.contextDepth]}
-//                                     onValueChange={([value]) => updateField('contextDepth', value)}
-//                                     max={20}
-//                                     min={1}
-//                                     step={1}
-//                                     className="w-full"
-//                                 />
-//                             </FormField>
-//                             <p className="text-xs text-gray-500">How much background context to include (1-20)</p>
-//                         </div>
-
-//                         {/* Include Metrics Toggle */}
-//                         <div className="flex items-center justify-between p-4 border rounded-lg">
-//                             <div>
-//                                 <label className="text-sm font-medium">Include Metrics</label>
-//                                 <p className="text-xs text-gray-500">Add quantified achievements to responses</p>
-//                             </div>
-//                             <Switch
-//                                 checked={context.includeMetrics}
-//                                 onCheckedChange={checked => updateField('includeMetrics', checked)}
-//                             />
-//                         </div>
-//                     </div>
-//                 </CardContent>
-//             </Card>
-
-//             {/* Advanced Response Personalization */}
-//             <Card>
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2">🎨 Advanced Response Personalization</CardTitle>
-//                     <p className="text-sm text-gray-600">Fine-tune response style and communication approach</p>
-//                 </CardHeader>
-//                 <CardContent className="space-y-4">
-//                     <div className="grid grid-cols-2 gap-4">
-//                         {/* Response Personality */}
-//                         <FormField label="Response Personality">
-//                             <Select
-//                                 value={context.responsePersonality}
-//                                 onValueChange={value =>
-//                                     updateField(
-//                                         'responsePersonality',
-//                                         value as InitialInterviewContext['responsePersonality']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select personality" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="executive">Executive</SelectItem>
-//                                     <SelectItem value="collaborative">Collaborative</SelectItem>
-//                                     <SelectItem value="analytical">Analytical</SelectItem>
-//                                     <SelectItem value="consultative">Consultative</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-
-//                         {/* Industry Language */}
-//                         <FormField label="Industry Language">
-//                             <Select
-//                                 value={context.industryLanguage}
-//                                 onValueChange={value =>
-//                                     updateField(
-//                                         'industryLanguage',
-//                                         value as InitialInterviewContext['industryLanguage']
-//                                     )
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select language style" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="technical">Technical</SelectItem>
-//                                     <SelectItem value="business">Business</SelectItem>
-//                                     <SelectItem value="balanced">Balanced</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                     </div>
-
-//                     <div className="grid grid-cols-2 gap-4">
-//                         {/* Story Format */}
-//                         <FormField label="Story Format">
-//                             <Select
-//                                 value={context.storyFormat}
-//                                 onValueChange={value =>
-//                                     updateField('storyFormat', value as InitialInterviewContext['storyFormat'])
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select story format" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="STAR">STAR</SelectItem>
-//                                     <SelectItem value="CAR">CAR (Context-Action-Result)</SelectItem>
-//                                     <SelectItem value="problem-solution-result">Problem-Solution-Result</SelectItem>
-//                                     <SelectItem value="flexible">Flexible</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-
-//                         {/* Metrics Emphasis */}
-//                         <FormField label="Metrics Emphasis">
-//                             <Select
-//                                 value={context.metricsEmphasis}
-//                                 onValueChange={value =>
-//                                     updateField('metricsEmphasis', value as InitialInterviewContext['metricsEmphasis'])
-//                                 }
-//                             >
-//                                 <SelectTrigger>
-//                                     <SelectValue placeholder="Select metrics focus" />
-//                                 </SelectTrigger>
-//                                 <SelectContent>
-//                                     <SelectItem value="percentage-focus">Percentage Focus</SelectItem>
-//                                     <SelectItem value="dollar-focus">Dollar Focus</SelectItem>
-//                                     <SelectItem value="scale-focus">Scale Focus</SelectItem>
-//                                     <SelectItem value="balanced">Balanced</SelectItem>
-//                                 </SelectContent>
-//                             </Select>
-//                         </FormField>
-//                     </div>
-//                 </CardContent>
-//             </Card>
-
-//             {/* Quick Tips */}
-//             <Card className="bg-blue-50 border-blue-200">
-//                 <CardHeader>
-//                     <CardTitle className="flex items-center gap-2 text-blue-800">💡 Quick Tips</CardTitle>
-//                 </CardHeader>
-//                 <CardContent className="text-sm text-blue-700 space-y-2">
-//                     <div className="grid grid-cols-2 gap-4">
-//                         <div>
-//                             <p>
-//                                 <strong>For Technical Roles:</strong> Use analytical personality with technical language
-//                             </p>
-//                             <p>
-//                                 <strong>For Sales Roles:</strong> Use collaborative personality with business language
-//                             </p>
-//                         </div>
-//                         <div>
-//                             <p>
-//                                 <strong>For Leadership Roles:</strong> Use executive personality with balanced language
-//                             </p>
-//                             <p>
-//                                 <strong>For Consulting:</strong> Use consultative personality with problem-solution
-//                                 format
-//                             </p>
-//                         </div>
-//                     </div>
-//                 </CardContent>
-//             </Card>
-//         </div>
-//     );
-// }
+                    <div className="flex items-center justify-between p-4 border rounded">
+                        <div>
+                            <label className="text-sm font-medium">Include Metrics</label>
+                            <p className="text-xs text-gray-500">Add quantified achievements to responses</p>
+                        </div>
+                        <Switch checked={context.includeMetrics} onCheckedChange={checked => updateField('includeMetrics', checked)} />
+                    </div>
+                </CardContent>
+            </Card>
+        </div>
+    );
+}
diff --git a/src/components/ui/sidebar.tsx b/src/components/ui/sidebar.tsx
index 642a582..3116c9e 100644
--- a/src/components/ui/sidebar.tsx
+++ b/src/components/ui/sidebar.tsx
@@ -1,214 +1,214 @@
-// "use client";
-
-// import * as React from "react";
-// import { PanelLeft } from "lucide-react";
-
-// import { useIsMobile } from "@/hooks/use-mobile";
-// import { cn } from "@/lib/utils";
-// import { Button } from "@/components/ui/button";
-// import { Sheet, SheetContent } from "@/components/ui/sheet";
-
-// export const SIDEBAR_STATE_COOKIE = "sidebar:state";
-
-// type SidebarContext = {
-//     state: "open" | "closed";
-//     open: boolean;
-//     onOpenChange: (open: boolean) => void;
-// };
-
-// const SidebarContext = React.createContext<SidebarContext>({
-//     state: "open",
-//     open: true,
-//     onOpenChange: () => {},
-// });
-
-// function useSidebar() {
-//     return React.useContext(SidebarContext);
-// }
-
-// const SidebarLayout = React.forwardRef<
-//     HTMLDivElement,
-//     React.ComponentProps<"div"> & {
-//         defaultOpen?: boolean;
-//     }
-// >(({ defaultOpen, className, ...props }, ref) => {
-//     const [open, setOpen] = React.useState(defaultOpen ?? true);
-
-//     const onOpenChange = React.useCallback((open: boolean) => {
-//         setOpen(open);
-//         document.cookie = `${SIDEBAR_STATE_COOKIE}=${open}; path=/; max-age=${
-//             60 * 60 * 24 * 7
-//         }`;
-//     }, []);
-
-//     const state = open ? "open" : "closed";
-
-//     return (
-//         <SidebarContext.Provider value={{ state, open, onOpenChange }}>
-//             <div
-//                 ref={ref}
-//                 data-sidebar={state}
-//                 style={
-//                     {
-//                         "--sidebar-width": "16rem",
-//                     } as React.CSSProperties
-//                 }
-//                 className={cn(
-//                     "flex min-h-screen bg-backgorund pl-0 transition-all duration-300 ease-in-out data-[sidebar=closed]:pl-0 sm:pl-[--sidebar-width]",
-//                     className,
-//                 )}
-//                 {...props}
-//             />
-//         </SidebarContext.Provider>
-//     );
-// });
-// SidebarLayout.displayName = "SidebarLayout";
-
-// const SidebarTrigger = React.forwardRef<
-//     HTMLButtonElement,
-//     React.ComponentProps<"button">
-// >(({ className, ...props }, ref) => {
-//     const { open, onOpenChange } = useSidebar();
-
-//     return (
-//         <Button
-//             ref={ref}
-//             variant="ghost"
-//             size="icon"
-//             className={cn("h-8 w-8", className)}
-//             onClick={() => onOpenChange(!open)}
-//             {...props}
-//         >
-//             <PanelLeft className="h-4 w-4" />
-//             <span className="sr-only">Toggle Sidebar</span>
-//         </Button>
-//     );
-// });
-// SidebarTrigger.displayName = "SidebarTrigger";
-
-// const Sidebar = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
-//     ({ className, children }, ref) => {
-//         const isMobile = useIsMobile();
-//         const { open, onOpenChange } = useSidebar();
-
-//         const sidebar = (
-//             <div
-//                 ref={ref}
-//                 className={cn(
-//                     "flex h-full flex-col border-r bg-background",
-//                     className,
-//                 )}
-//             >
-//                 {children}
-//             </div>
-//         );
-
-//         if (isMobile) {
-//             return (
-//                 <Sheet open={open} onOpenChange={onOpenChange}>
-//                     <SheetContent
-//                         className="w-[260px] p-0 md:w-[--sidebar-width] [&>button]:hidden"
-//                         side="left"
-//                     >
-//                         {sidebar}
-//                     </SheetContent>
-//                 </Sheet>
-//             );
-//         }
-
-//         return (
-//             <aside className="fixed inset-y-0 left-0 z-10 hidden w-[--sidebar-width] transition-all duration-300 ease-in-out md:block [[data-sidebar=closed]_&]:left-[calc(var(--sidebar-width)*-1)]">
-//                 {sidebar}
-//             </aside>
-//         );
-//     },
-// );
-// Sidebar.displayName = "Sidebar";
-
-// const SidebarHeader = React.forwardRef<
-//     HTMLDivElement,
-//     React.ComponentProps<"div">
-// >(({ className, ...props }, ref) => {
-//     return (
-//         <div
-//             ref={ref}
-//             className={cn("flex items-center border-b px-2.5 py-2", className)}
-//             {...props}
-//         />
-//     );
-// });
-// SidebarHeader.displayName = "SidebarHeader";
-
-// const SidebarFooter = React.forwardRef<
-//     HTMLDivElement,
-//     React.ComponentProps<"div">
-// >(({ className, ...props }, ref) => {
-//     return (
-//         <div
-//             ref={ref}
-//             className={cn("flex items-center border-t px-2.5 py-2", className)}
-//             {...props}
-//         />
-//     );
-// });
-// SidebarFooter.displayName = "SidebarFooter";
-
-// const SidebarContent = React.forwardRef<
-//     HTMLDivElement,
-//     React.ComponentProps<"div">
-// >(({ className, ...props }, ref) => {
-//     return (
-//         <div
-//             ref={ref}
-//             className={cn(
-//                 "flex flex-1 flex-col gap-5 overflow-auto py-4",
-//                 className,
-//             )}
-//             {...props}
-//         />
-//     );
-// });
-// SidebarContent.displayName = "SidebarContent";
-
-// const SidebarItem = React.forwardRef<
-//     HTMLDivElement,
-//     React.ComponentProps<"div">
-// >(({ className, ...props }, ref) => {
-//     return (
-//         <div
-//             ref={ref}
-//             className={cn("grid gap-2 px-2.5", className)}
-//             {...props}
-//         />
-//     );
-// });
-// SidebarItem.displayName = "SidebarItem";
-
-// const SidebarLabel = React.forwardRef<
-//     HTMLDivElement,
-//     React.ComponentProps<"div">
-// >(({ className, ...props }, ref) => {
-//     return (
-//         <div
-//             ref={ref}
-//             className={cn(
-//                 "px-1.5 text-xs font-medium text-muted-foreground",
-//                 className,
-//             )}
-//             {...props}
-//         />
-//     );
-// });
-// SidebarLabel.displayName = "SidebarLabel";
-
-// export {
-//     Sidebar,
-//     SidebarContent,
-//     SidebarFooter,
-//     SidebarHeader,
-//     SidebarItem,
-//     SidebarLabel,
-//     SidebarLayout,
-//     SidebarTrigger,
-//     useSidebar,
-// };
+"use client";
+
+import * as React from "react";
+import { PanelLeft } from "lucide-react";
+
+import { useIsMobile } from "@/hooks/use-mobile";
+import { cn } from "@/lib/utils";
+import { Button } from "@/components/ui/button";
+import { Sheet, SheetContent } from "@/components/ui/sheet";
+
+export const SIDEBAR_STATE_COOKIE = "sidebar:state";
+
+type SidebarContext = {
+    state: "open" | "closed";
+    open: boolean;
+    onOpenChange: (open: boolean) => void;
+};
+
+const SidebarContext = React.createContext<SidebarContext>({
+    state: "open",
+    open: true,
+    onOpenChange: () => {},
+});
+
+function useSidebar() {
+    return React.useContext(SidebarContext);
+}
+
+const SidebarLayout = React.forwardRef<
+    HTMLDivElement,
+    React.ComponentProps<"div"> & {
+        defaultOpen?: boolean;
+    }
+>(({ defaultOpen, className, ...props }, ref) => {
+    const [open, setOpen] = React.useState(defaultOpen ?? true);
+
+    const onOpenChange = React.useCallback((open: boolean) => {
+        setOpen(open);
+        document.cookie = `${SIDEBAR_STATE_COOKIE}=${open}; path=/; max-age=${
+            60 * 60 * 24 * 7
+        }`;
+    }, []);
+
+    const state = open ? "open" : "closed";
+
+    return (
+        <SidebarContext.Provider value={{ state, open, onOpenChange }}>
+            <div
+                ref={ref}
+                data-sidebar={state}
+                style={
+                    {
+                        "--sidebar-width": "16rem",
+                    } as React.CSSProperties
+                }
+                className={cn(
+                    "flex min-h-screen bg-backgorund pl-0 transition-all duration-300 ease-in-out data-[sidebar=closed]:pl-0 sm:pl-[--sidebar-width]",
+                    className,
+                )}
+                {...props}
+            />
+        </SidebarContext.Provider>
+    );
+});
+SidebarLayout.displayName = "SidebarLayout";
+
+const SidebarTrigger = React.forwardRef<
+    HTMLButtonElement,
+    React.ComponentProps<"button">
+>(({ className, ...props }, ref) => {
+    const { open, onOpenChange } = useSidebar();
+
+    return (
+        <Button
+            ref={ref}
+            variant="ghost"
+            size="icon"
+            className={cn("h-8 w-8", className)}
+            onClick={() => onOpenChange(!open)}
+            {...props}
+        >
+            <PanelLeft className="h-4 w-4" />
+            <span className="sr-only">Toggle Sidebar</span>
+        </Button>
+    );
+});
+SidebarTrigger.displayName = "SidebarTrigger";
+
+const Sidebar = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
+    ({ className, children }, ref) => {
+        const isMobile = useIsMobile();
+        const { open, onOpenChange } = useSidebar();
+
+        const sidebar = (
+            <div
+                ref={ref}
+                className={cn(
+                    "flex h-full flex-col border-r bg-background",
+                    className,
+                )}
+            >
+                {children}
+            </div>
+        );
+
+        if (isMobile) {
+            return (
+                <Sheet open={open} onOpenChange={onOpenChange}>
+                    <SheetContent
+                        className="w-[260px] p-0 md:w-[--sidebar-width] [&>button]:hidden"
+                        side="left"
+                    >
+                        {sidebar}
+                    </SheetContent>
+                </Sheet>
+            );
+        }
+
+        return (
+            <aside className="fixed inset-y-0 left-0 z-10 hidden w-[--sidebar-width] transition-all duration-300 ease-in-out md:block [[data-sidebar=closed]_&]:left-[calc(var(--sidebar-width)*-1)]">
+                {sidebar}
+            </aside>
+        );
+    },
+);
+Sidebar.displayName = "Sidebar";
+
+const SidebarHeader = React.forwardRef<
+    HTMLDivElement,
+    React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+    return (
+        <div
+            ref={ref}
+            className={cn("flex items-center border-b px-2.5 py-2", className)}
+            {...props}
+        />
+    );
+});
+SidebarHeader.displayName = "SidebarHeader";
+
+const SidebarFooter = React.forwardRef<
+    HTMLDivElement,
+    React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+    return (
+        <div
+            ref={ref}
+            className={cn("flex items-center border-t px-2.5 py-2", className)}
+            {...props}
+        />
+    );
+});
+SidebarFooter.displayName = "SidebarFooter";
+
+const SidebarContent = React.forwardRef<
+    HTMLDivElement,
+    React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+    return (
+        <div
+            ref={ref}
+            className={cn(
+                "flex flex-1 flex-col gap-5 overflow-auto py-4",
+                className,
+            )}
+            {...props}
+        />
+    );
+});
+SidebarContent.displayName = "SidebarContent";
+
+const SidebarItem = React.forwardRef<
+    HTMLDivElement,
+    React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+    return (
+        <div
+            ref={ref}
+            className={cn("grid gap-2 px-2.5", className)}
+            {...props}
+        />
+    );
+});
+SidebarItem.displayName = "SidebarItem";
+
+const SidebarLabel = React.forwardRef<
+    HTMLDivElement,
+    React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+    return (
+        <div
+            ref={ref}
+            className={cn(
+                "px-1.5 text-xs font-medium text-muted-foreground",
+                className,
+            )}
+            {...props}
+        />
+    );
+});
+SidebarLabel.displayName = "SidebarLabel";
+
+export {
+    Sidebar,
+    SidebarContent,
+    SidebarFooter,
+    SidebarHeader,
+    SidebarItem,
+    SidebarLabel,
+    SidebarLayout,
+    SidebarTrigger,
+    useSidebar,
+};
diff --git a/src/hooks/index.ts b/src/hooks/index.ts
index 509bb83..8bf6822 100644
--- a/src/hooks/index.ts
+++ b/src/hooks/index.ts
@@ -5,4 +5,3 @@ export * from './useSpeechRecognition';
 export * from './useTranscriptions';
 export * from './useDynamicList';
 export * from './useInterviewContextForm';
-export * from './useCallContextForm';
diff --git a/src/hooks/useCallContextForm.ts b/src/hooks/useCallContextForm.ts
deleted file mode 100644
index 087da50..0000000
--- a/src/hooks/useCallContextForm.ts
+++ /dev/null
@@ -1,243 +0,0 @@
-/* eslint-disable prefer-const */
-// src/hooks/useCallContextForm.ts
-import { useState, useCallback } from 'react';
-import { CallContext } from '@/types/callContext';
-
-// Default initial state for CallContext
-const getInitialCallContext = (): CallContext => ({
-    // Core identification
-    call_type: 'sales-call',
-    call_context: 'professional',
-    urgency_level: 'medium',
-    sensitivity_level: 'confidential',
-
-    // Participants & relationships
-    participants: [],
-    power_dynamic: 'equal',
-
-    // Objectives & strategy
-    objectives: [],
-    desired_tone: 'professional',
-    communication_approach: 'collaborative',
-
-    // Content focus
-    key_points: [],
-    sensitive_topics: [],
-    questions_to_ask: [],
-
-    // Response preferences
-    response_style: 'structured',
-    verbosity: 'moderate',
-    include_emotional_guidance: false,
-    include_professional_tips: true,
-
-    // Session metadata
-    estimated_duration: '',
-    follow_up_required: false,
-    documentation_needed: false,
-
-    // Knowledge integration
-    knowledge_search_enabled: true,
-    knowledge_search_scope: 'all',
-});
-
-export function useCallContextForm() {
-    const [context, setContext] = useState<CallContext>(getInitialCallContext());
-    const [activeTab, setActiveTab] = useState('details');
-
-    // Update a field in the context
-    const updateField = useCallback(<K extends keyof CallContext>(field: K, value: CallContext[K]) => {
-        setContext(prev => ({
-            ...prev,
-            [field]: value,
-        }));
-    }, []);
-
-    // Add item to array field
-    const addToArray = useCallback(<K extends keyof CallContext>(field: K, value: string) => {
-        setContext(prev => {
-            const currentValue = prev[field];
-            if (Array.isArray(currentValue)) {
-                return {
-                    ...prev,
-                    [field]: [...currentValue, value],
-                };
-            }
-            return prev;
-        });
-    }, []);
-
-    // Remove item from array field by index
-    const removeFromArray = useCallback(<K extends keyof CallContext>(field: K, index: number) => {
-        setContext(prev => {
-            const currentValue = prev[field];
-            if (Array.isArray(currentValue)) {
-                return {
-                    ...prev,
-                    [field]: currentValue.filter((_, i) => i !== index),
-                };
-            }
-            return prev;
-        });
-    }, []);
-
-    // Toggle item in array (add if not present, remove if present)
-    const toggleInArray = useCallback(<K extends keyof CallContext>(field: K, value: string) => {
-        setContext(prev => {
-            const currentValue = prev[field];
-            if (Array.isArray(currentValue)) {
-                const exists = currentValue.includes(value);
-                return {
-                    ...prev,
-                    [field]: exists ? currentValue.filter(item => item !== value) : [...currentValue, value],
-                };
-            }
-            return prev;
-        });
-    }, []);
-
-    // Validation logic
-    const isValid = useCallback(() => {
-        // Required fields
-        if (!context.call_type || !context.call_context) return false;
-
-        // Must have at least one key point
-        if (!context.key_points || context.key_points.length === 0) return false;
-
-        // Must have at least one objective
-        if (!context.objectives || context.objectives.length === 0) return false;
-
-        // All objectives must have a primary goal
-        const hasIncompleteObjectives = context.objectives.some(
-            obj => !obj.primary_goal || obj.primary_goal.trim() === ''
-        );
-        if (hasIncompleteObjectives) return false;
-
-        // Emergency calls should have minimal required fields only
-        if (context.call_type === 'emergency-call') {
-            return context.key_points.length > 0;
-        }
-
-        return true;
-    }, [context]);
-
-    // Auto-adjust settings based on call type and context
-    const autoAdjustSettings = useCallback((callType: string, callContext: string) => {
-        setContext(prev => {
-            let updates: Partial<CallContext> = {};
-
-            // Emergency calls - safety first
-            if (callType === 'emergency-call') {
-                updates = {
-                    response_style: 'bullet-points',
-                    verbosity: 'brief',
-                    include_emotional_guidance: false,
-                    include_professional_tips: true,
-                    knowledge_search_enabled: false,
-                    sensitivity_level: 'highly-sensitive',
-                };
-            }
-            // Personal calls - privacy and emotional support
-            else if (callContext === 'personal') {
-                updates = {
-                    response_style: 'conversational',
-                    include_emotional_guidance: true,
-                    include_professional_tips: false,
-                    knowledge_search_scope: 'personal-only',
-                    sensitivity_level: 'personal',
-                };
-            }
-            // Professional calls - full features
-            else if (callContext === 'professional') {
-                updates = {
-                    include_professional_tips: true,
-                    knowledge_search_enabled: true,
-                    knowledge_search_scope: 'all',
-                    sensitivity_level: 'confidential',
-                };
-            }
-
-            // Call type specific adjustments
-            if (callType === 'sales-call') {
-                updates = {
-                    ...updates,
-                    response_style: 'bullet-points',
-                    verbosity: 'detailed',
-                    include_professional_tips: true,
-                };
-            } else if (callType === 'relationship-talk' || callType === 'breakup-call') {
-                updates = {
-                    ...updates,
-                    desired_tone: 'empathetic',
-                    communication_approach: 'supportive',
-                    include_emotional_guidance: true,
-                };
-            } else if (callType === 'customer-support') {
-                updates = {
-                    ...updates,
-                    desired_tone: 'friendly',
-                    communication_approach: 'collaborative',
-                    include_emotional_guidance: true,
-                    include_professional_tips: true,
-                };
-            }
-
-            return { ...prev, ...updates };
-        });
-    }, []);
-
-    // Watch for call type/context changes and auto-adjust
-    const updateCallType = useCallback(
-        (callType: string) => {
-            updateField('call_type', callType as CallContext['call_type']);
-            autoAdjustSettings(callType, context.call_context);
-        },
-        [updateField, autoAdjustSettings, context.call_context]
-    );
-
-    const updateCallContext = useCallback(
-        (callContext: string) => {
-            updateField('call_context', callContext as CallContext['call_context']);
-            autoAdjustSettings(context.call_type, callContext);
-        },
-        [updateField, autoAdjustSettings, context.call_type]
-    );
-
-    // Reset form to initial state
-    const resetForm = useCallback(() => {
-        setContext(getInitialCallContext());
-        setActiveTab('details');
-    }, []);
-
-    // Get current form completion percentage
-    const getCompletionPercentage = useCallback(() => {
-        let completed = 0;
-        let total = 8; // Total required sections
-
-        if (context.call_type && context.call_context) completed++;
-        if (context.participants && context.participants.length > 0) completed++;
-        if (context.objectives && context.objectives.length > 0) completed++;
-        if (context.key_points && context.key_points.length > 0) completed++;
-        if (context.desired_tone && context.communication_approach) completed++;
-        if (context.response_style && context.verbosity) completed++;
-        if (context.knowledge_search_enabled !== undefined) completed++;
-        if (context.estimated_duration) completed++;
-
-        return Math.round((completed / total) * 100);
-    }, [context]);
-
-    return {
-        context,
-        activeTab,
-        setActiveTab,
-        updateField,
-        addToArray,
-        removeFromArray,
-        toggleInArray,
-        updateCallType,
-        updateCallContext,
-        isValid: isValid(),
-        resetForm,
-        completionPercentage: getCompletionPercentage(),
-    };
-}
diff --git a/src/hooks/useInterviewContextForm.ts b/src/hooks/useInterviewContextForm.ts
index b4f0873..5d9e353 100644
--- a/src/hooks/useInterviewContextForm.ts
+++ b/src/hooks/useInterviewContextForm.ts
@@ -1,133 +1,92 @@
-// // src\hooks\useInterviewContextForm.ts
-// import { useState, useCallback } from 'react';
-// import { InitialInterviewContext } from '@/types';
-
-// const defaultContext: InitialInterviewContext = {
-//     // ===== INTERVIEW SPECIFICS =====
-//     // Core interview categorization
-//     interviewType: 'sales',
-//     targetRole: 'Mid-market Account Executive',
-//     targetCompany: 'ETQ',
-
-//     // Enhanced company and industry context
-//     companySizeType: 'large-enterprise', // Updated to match new enum options
-//     industryVertical: 'saas-software', // Default for QMS software
-//     seniorityLevel: 'manager',
-
-//     // Interview logistics and context
-//     interviewRound: 'initial', // Default to first round
-//     interviewDuration: '60min', // Standard interview duration
-//     interviewFormat: 'video-call', // Most common format
-
-//     // Strategic context
-//     competitiveContext: 'direct-competitor', // Assume similar role/industry
-//     urgencyLevel: 'active', // Balanced urgency level
-
-//     // Interviewer context
-//     interviewerProfiles: [
-//         {
-//             role: 'hiring-manager',
-//             name: '',
-//             background: '',
-//             priorities: [],
-//             communicationStyle: 'collaborative',
-//         },
-//     ],
-
-//     // ===== RESPONSE GENERATION SETTINGS =====
-//     // Core response parameters
-//     responseConfidence: 'balanced',
-//     responseStructure: 'problem-solution-impact', // Updated to match new enum
-//     responseVerbosity: 'auto',
-
-//     // Advanced response personalization
-//     responsePersonality: 'collaborative', // Good default for sales roles
-//     industryLanguage: 'business', // Business language for sales context
-//     storyFormat: 'STAR', // Classic structured approach
-//     metricsEmphasis: 'percentage-focus', // Good for sales achievements
-
-//     // Response enhancement flags
-//     includeMetrics: true,
-//     contextDepth: 10,
-
-//     // ===== SESSION FOCUS & CONTENT =====
-//     // Strategic goals and emphasis
-//     goals: [],
-//     emphasizedExperiences: [],
-//     specificChallenges: [],
-
-//     // Candidate profile and assets
-//     keyAchievements: [], // Initialize as empty list
-//     coreSkills: [], // Initialize as empty list
-
-//     // Context and background
-//     industry: 'Manufacturing QMS Software', // Additional context field (free-form)
-//     companyContext: ['sales_methodology', 'career_achievements'],
-//     roleDescription: '',
-
-//     // ===== INTERVIEW STRATEGY =====
-//     interviewStrategy: {
-//         primaryPositioning: 'growth-driver', // Good default for sales roles
-//         keyDifferentiators: [], // Empty by default
-//         riskMitigation: [], // Empty by default
-//         questionsToAsk: [], // Empty by default
-//         followUpStrategy: '24-hour', // Professional standard
-//     },
-// };
-// export function useInterviewContextForm(initialContext?: InitialInterviewContext) {
-//     const [context, setContext] = useState<InitialInterviewContext>(initialContext || defaultContext);
-//     const [activeTab, setActiveTab] = useState('interview');
-
-//     // Individual field updaters
-//     const updateField = useCallback(
-//         <K extends keyof InitialInterviewContext>(field: K, value: InitialInterviewContext[K]) => {
-//             setContext(prev => ({ ...prev, [field]: value }));
-//         },
-//         []
-//     );
-
-//     // Array operations
-//     const addToArray = useCallback(<K extends keyof InitialInterviewContext>(field: K, value: string) => {
-//         setContext(prev => {
-//             const currentArray = prev[field] as string[];
-//             return {
-//                 ...prev,
-//                 [field]: [...currentArray, value],
-//             };
-//         });
-//     }, []);
-
-//     const removeFromArray = useCallback(<K extends keyof InitialInterviewContext>(field: K, index: number) => {
-//         setContext(prev => {
-//             const currentArray = prev[field] as string[];
-//             return {
-//                 ...prev,
-//                 [field]: currentArray.filter((_, i) => i !== index),
-//             };
-//         });
-//     }, []);
-
-//     const toggleInArray = useCallback(<K extends keyof InitialInterviewContext>(field: K, value: string) => {
-//         setContext(prev => {
-//             const array = prev[field] as string[];
-//             return {
-//                 ...prev,
-//                 [field]: array.includes(value) ? array.filter(item => item !== value) : [...array, value],
-//             };
-//         });
-//     }, []);
-
-//     // Validation
-//     const isValid = context.targetRole.trim().length > 0;
-
-//     return {
-//         context,
-//         activeTab,
-//         setActiveTab,
-//         updateField,
-//         addToArray,
-//         removeFromArray,
-//         toggleInArray,
-//         isValid,
-//     };
-// }
+// src\hooks\useInterviewContextForm.ts
+import { useState, useCallback } from 'react';
+import { InitialInterviewContext } from '@/types';
+
+const defaultContext: InitialInterviewContext = {
+    interviewType: 'sales',
+    targetRole: 'Mid-market Account Executive',
+    targetCompany: 'ETQ',
+    companySizeType: 'enterprise',
+    industry: 'Manufacturing QMS Software',
+    seniorityLevel: 'manager',
+    responseConfidence: 'balanced',
+    responseStructure: 'story-driven',
+    contextDepth: 10,
+    includeMetrics: true,
+    goals: [],
+    emphasizedExperiences: [],
+    specificChallenges: [],
+    companyContext: ['sales_methodology', 'career_achievements'],
+    roleDescription: '',
+};
+
+export function useInterviewContextForm(initialContext?: InitialInterviewContext) {
+    const [context, setContext] = useState<InitialInterviewContext>(
+        initialContext || defaultContext
+    );
+    const [activeTab, setActiveTab] = useState('interview');
+
+    // Individual field updaters
+    const updateField = useCallback(
+        <K extends keyof InitialInterviewContext>(field: K, value: InitialInterviewContext[K]) => {
+            setContext(prev => ({ ...prev, [field]: value }));
+        },
+        []
+    );
+
+    // Array operations
+    const addToArray = useCallback(
+        <K extends keyof InitialInterviewContext>(field: K, value: string) => {
+            setContext(prev => {
+                const currentArray = prev[field] as string[];
+                return {
+                    ...prev,
+                    [field]: [...currentArray, value],
+                };
+            });
+        },
+        []
+    );
+
+    const removeFromArray = useCallback(
+        <K extends keyof InitialInterviewContext>(field: K, index: number) => {
+            setContext(prev => {
+                const currentArray = prev[field] as string[];
+                return {
+                    ...prev,
+                    [field]: currentArray.filter((_, i) => i !== index),
+                };
+            });
+        },
+        []
+    );
+
+    const toggleInArray = useCallback(
+        <K extends keyof InitialInterviewContext>(field: K, value: string) => {
+            setContext(prev => {
+                const array = prev[field] as string[];
+                return {
+                    ...prev,
+                    [field]: array.includes(value)
+                        ? array.filter(item => item !== value)
+                        : [...array, value],
+                };
+            });
+        },
+        []
+    );
+
+    // Validation
+    const isValid = context.targetRole.trim().length > 0;
+
+    return {
+        context,
+        activeTab,
+        setActiveTab,
+        updateField,
+        addToArray,
+        removeFromArray,
+        toggleInArray,
+        isValid,
+    };
+}
diff --git a/src/hooks/useLLMProviderOptimized.ts b/src/hooks/useLLMProviderOptimized.ts
index 3f9b316..71d81e0 100644
--- a/src/hooks/useLLMProviderOptimized.ts
+++ b/src/hooks/useLLMProviderOptimized.ts
@@ -131,7 +131,7 @@ export const useLLMProviderOptimized = (
         if (apiKey) {
             try {
                 setLlmService(new OpenAILLMService(apiKey));
-                // logger.info(`[${COMPONENT_ID}] ✅ LLM Service (OpenAI) initialized successfully.`);
+                logger.info(`[${COMPONENT_ID}] ✅ LLM Service (OpenAI) initialized successfully.`);
             } catch (e) {
                 logger.error(`[${COMPONENT_ID}] ❌ Error initializing LLM Service: ${(e as Error).message}`);
                 handleError(e, 'initialization', 'LLMServiceSetup');
@@ -209,11 +209,11 @@ export const useLLMProviderOptimized = (
     const summarizeConversation = useCallback(
         async (currentHistory: Message[]): Promise<void> => {
             if (!llmService || currentHistory.length === 0 || !initialInterviewContext) {
-                // logger.info(`[${COMPONENT_ID}] Summarization skipped (service, history, or context missing).`);
+                logger.info(`[${COMPONENT_ID}] Summarization skipped (service, history, or context missing).`);
                 return;
             }
             dispatch({ type: 'SET_LOADING', payload: true }); // Indicate loading for summarization
-            // logger.info(`[${COMPONENT_ID}] 🔄 Starting conversation summarization`);
+            logger.info(`[${COMPONENT_ID}] 🔄 Starting conversation summarization`);
             try {
                 const conversationText = currentHistory
                     .map(msg => `${msg.type === 'user' ? 'User' : 'Assistant'}: ${msg.content}`)
@@ -238,7 +238,7 @@ export const useLLMProviderOptimized = (
                     : newSummarySegment;
 
                 dispatch({ type: 'SET_CONVERSATION_SUMMARY', payload: updatedSummary });
-                // logger.info(`[${COMPONENT_ID}] ✅ Summarization updated: ${newSummarySegment.length} chars added.`);
+                logger.info(`[${COMPONENT_ID}] ✅ Summarization updated: ${newSummarySegment.length} chars added.`);
             } catch (err) {
                 logger.error(`[${COMPONENT_ID}] ❌ Error summarizing: ${(err as Error).message}`);
             }
@@ -259,9 +259,9 @@ export const useLLMProviderOptimized = (
             !isLoading; // Ensure no other LLM operation is in progress
 
         if (shouldSummarize) {
-            // logger.info(
-            //     `[${COMPONENT_ID}] Triggering summarization for ${currentLength} messages (last summarized: ${lastSummarizedLengthRef.current})`
-            // );
+            logger.info(
+                `[${COMPONENT_ID}] Triggering summarization for ${currentLength} messages (last summarized: ${lastSummarizedLengthRef.current})`
+            );
             summarizeConversation(conversationHistory).then(() => {
                 lastSummarizedLengthRef.current = currentLength;
             });
@@ -336,7 +336,7 @@ function useGenerateResponse({
             dispatch({ type: 'SET_ERROR', payload: null });
             dispatch({ type: 'RESET_STREAMED_CONTENT' });
 
-            // logger.info(`[${COMPONENT_ID}][${queryId}] 🚀 Starting main response generation`);
+            logger.info(`[${COMPONENT_ID}][${queryId}] 🚀 Starting main response generation`);
             // loglog.info('🚀 Starting optimized response generation', queryId);
 
             try {
@@ -347,17 +347,17 @@ function useGenerateResponse({
                 const systemPrompt = await createSystemPrompt(initialInterviewContext!, goals);
                 const userPromptContent = await createUserPrompt(userMessage, conversationSummary, knowledgeContext);
 
-                // // ===== ENHANCED PROMPT LOGGING =====
-                // DetailedPromptLogging({
-                //     queryId,
-                //     systemPrompt,
-                //     userPrompt: userPromptContent,
-                //     initialInterviewContext,
-                //     goals,
-                //     state,
-                //     knowledgeContext,
-                //     userMessage,
-                // });
+                // ===== ENHANCED PROMPT LOGGING =====
+                DetailedPromptLogging({
+                    queryId,
+                    systemPrompt,
+                    userPrompt: userPromptContent,
+                    initialInterviewContext,
+                    goals,
+                    state,
+                    knowledgeContext,
+                    userMessage,
+                });
 
                 const messages: ChatMessageParam[] = [
                     { role: 'system', content: systemPrompt },
@@ -366,10 +366,10 @@ function useGenerateResponse({
                 const options: LLMRequestOptions = { model: 'gpt-4o', temperature: 0.7 }; // Example options
 
                 if (llmService.generateStreamedResponse) {
-                    // logger.info(`[${COMPONENT_ID}][${queryId}] 🎯 Starting Chat Completions stream via LLMService`);
+                    logger.info(`[${COMPONENT_ID}][${queryId}] 🎯 Starting Chat Completions stream via LLMService`);
                     for await (const chunk of llmService.generateStreamedResponse(messages, options)) {
                         if (!firstChunkReceivedRef.current) {
-                            // logger.info(`[${COMPONENT_ID}][${queryId}] 💧 First chunk received`);
+                            logger.info(`[${COMPONENT_ID}][${queryId}] 💧 First chunk received`);
                             firstChunkReceivedRef.current = true;
                         }
                         dispatch({ type: 'APPEND_STREAMED_CONTENT', payload: chunk });
@@ -377,18 +377,18 @@ function useGenerateResponse({
                     }
                 } else {
                     // Fallback for non-streaming services or if generateStreamedResponse is optional and not implemented
-                    // logger.info(
-                    //     `[${COMPONENT_ID}][${queryId}] 🎯 Generating complete response via LLMService (non-streaming)`
-                    // );
+                    logger.info(
+                        `[${COMPONENT_ID}][${queryId}] 🎯 Generating complete response via LLMService (non-streaming)`
+                    );
                     const fullResponse = await llmService.generateCompleteResponse(messages, options);
                     dispatch({ type: 'APPEND_STREAMED_CONTENT', payload: fullResponse });
                     streamedContentRef.current = fullResponse;
                 }
 
                 dispatch({ type: 'SET_STREAMING_COMPLETE', payload: true });
-                // logger.info(
-                //     `[${COMPONENT_ID}][${queryId}] 🏁 Main response completed: ${streamedContentRef.current.length} characters`
-                // );
+                logger.info(
+                    `[${COMPONENT_ID}][${queryId}] 🏁 Main response completed: ${streamedContentRef.current.length} characters`
+                );
             } catch (err) {
                 handleError(err, queryId);
             } finally {
@@ -478,7 +478,7 @@ function useGenerateSuggestions({
             ];
 
             // ===== ANALYSIS PROMPT LOGGING =====
-            // GenerateSuggestionAnalysisStageLogging(queryId, analysisUserPrompt, previousAnalysisHistory);
+            GenerateSuggestionAnalysisStageLogging(queryId, analysisUserPrompt, previousAnalysisHistory);
 
             const analysisOptions: LLMRequestOptions = { model: 'gpt-4o-mini', temperature: 0.3 };
             const analysisContent = await llmService.generateCompleteResponse(analysisMessages, analysisOptions);
@@ -574,7 +574,7 @@ function useGenerateSuggestions({
             );
 
             // ===== GENERATION PROMPT LOGGING =====
-            // GenerateSuggestioCreateStageLogging(queryId, generationUserPrompt);
+            GenerateSuggestioCreateStageLogging(queryId, generationUserPrompt);
             const generationMessages: ChatMessageParam[] = [
                 { role: 'system', content: createGenerationSystemPrompt },
                 { role: 'user', content: generationUserPrompt },
@@ -720,36 +720,36 @@ function useGenerateSuggestions({
     ]);
 }
 
-// function GenerateSuggestioCreateStageLogging(queryId: string, generationUserPrompt: string) {
-//     logger.info(`[${COMPONENT_ID}][${queryId}] 📝 GENERATION SYSTEM PROMPT:`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] ┌─ GENERATION SYSTEM (${createGenerationSystemPrompt.length} chars) ─┐`);
-//     console.log('\n🚀 GENERATION SYSTEM PROMPT:\n', createGenerationSystemPrompt, '\n');
+function GenerateSuggestioCreateStageLogging(queryId: string, generationUserPrompt: string) {
+    logger.info(`[${COMPONENT_ID}][${queryId}] 📝 GENERATION SYSTEM PROMPT:`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] ┌─ GENERATION SYSTEM (${createGenerationSystemPrompt.length} chars) ─┐`);
+    console.log('\n🚀 GENERATION SYSTEM PROMPT:\n', createGenerationSystemPrompt, '\n');
 
-//     logger.info(`[${COMPONENT_ID}][${queryId}] 📝 GENERATION USER PROMPT:`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] ┌─ GENERATION USER (${generationUserPrompt.length} chars) ─┐`);
-//     console.log('\n🎯 GENERATION USER PROMPT:\n', generationUserPrompt, '\n');
-// }
+    logger.info(`[${COMPONENT_ID}][${queryId}] 📝 GENERATION USER PROMPT:`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] ┌─ GENERATION USER (${generationUserPrompt.length} chars) ─┐`);
+    console.log('\n🎯 GENERATION USER PROMPT:\n', generationUserPrompt, '\n');
+}
 
-// //
-// function GenerateSuggestionAnalysisStageLogging(
-//     queryId: string,
-//     analysisUserPrompt: string,
-//     previousAnalysisHistory: AnalysisPreview[]
-// ) {
-//     logger.info(`[${COMPONENT_ID}][${queryId}] 📝 ANALYSIS SYSTEM PROMPT:`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] ┌─ ANALYSIS SYSTEM (${createAnalysisSystemPrompt.length} chars) ─┐`);
-//     console.log('\n🔍 ANALYSIS SYSTEM PROMPT:\n', createAnalysisSystemPrompt, '\n');
-
-//     logger.info(`[${COMPONENT_ID}][${queryId}] 📝 ANALYSIS USER PROMPT:`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] ┌─ ANALYSIS USER (${analysisUserPrompt.length} chars) ─┐`);
-//     console.log('\n💭 ANALYSIS USER PROMPT:\n', analysisUserPrompt, '\n');
-
-//     // Log previous analysis context
-//     if (previousAnalysisHistory.length > 0) {
-//         logger.info(`[${COMPONENT_ID}][${queryId}] 📚 PREVIOUS ANALYSIS CONTEXT:`);
-//         console.log('\n📚 PREVIOUS ANALYSIS HISTORY:\n', JSON.stringify(previousAnalysisHistory, null, 2), '\n');
-//     }
-// }
+//
+function GenerateSuggestionAnalysisStageLogging(
+    queryId: string,
+    analysisUserPrompt: string,
+    previousAnalysisHistory: AnalysisPreview[]
+) {
+    logger.info(`[${COMPONENT_ID}][${queryId}] 📝 ANALYSIS SYSTEM PROMPT:`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] ┌─ ANALYSIS SYSTEM (${createAnalysisSystemPrompt.length} chars) ─┐`);
+    console.log('\n🔍 ANALYSIS SYSTEM PROMPT:\n', createAnalysisSystemPrompt, '\n');
+
+    logger.info(`[${COMPONENT_ID}][${queryId}] 📝 ANALYSIS USER PROMPT:`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] ┌─ ANALYSIS USER (${analysisUserPrompt.length} chars) ─┐`);
+    console.log('\n💭 ANALYSIS USER PROMPT:\n', analysisUserPrompt, '\n');
+
+    // Log previous analysis context
+    if (previousAnalysisHistory.length > 0) {
+        logger.info(`[${COMPONENT_ID}][${queryId}] 📚 PREVIOUS ANALYSIS CONTEXT:`);
+        console.log('\n📚 PREVIOUS ANALYSIS HISTORY:\n', JSON.stringify(previousAnalysisHistory, null, 2), '\n');
+    }
+}
 
 // // Enhanced buildKnowledgeContext with intelligent content selection
 // function BuildKnowledgeContext(
@@ -875,96 +875,96 @@ function useGenerateSuggestions({
 //     );
 // }
 
-// // Detailed Prompt Logging Function
-// interface DetailedPromptLoggingProps {
-//     queryId: string;
-//     systemPrompt: string;
-//     userPrompt: string;
-//     initialInterviewContext: InitialInterviewContext | null;
-//     // roleDescription: string,
-//     goals: string[];
-//     state: LLMState;
-//     knowledgeContext: string;
-//     userMessage: string;
-// }
+// Detailed Prompt Logging Function
+interface DetailedPromptLoggingProps {
+    queryId: string;
+    systemPrompt: string;
+    userPrompt: string;
+    initialInterviewContext: InitialInterviewContext | null;
+    // roleDescription: string,
+    goals: string[];
+    state: LLMState;
+    knowledgeContext: string;
+    userMessage: string;
+}
 
-// function DetailedPromptLogging({
-//     queryId,
-//     systemPrompt,
-//     userPrompt,
-//     initialInterviewContext,
-//     goals,
-//     state,
-//     knowledgeContext,
-//     userMessage,
-// }: DetailedPromptLoggingProps) {
-//     logger.info(`[${COMPONENT_ID}][${queryId}] 📝 SYSTEM PROMPT CONSTRUCTED:`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] ┌─────────────────────────────────────────────────────────────────┐`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] │ SYSTEM PROMPT (${systemPrompt.length} chars):`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] └─────────────────────────────────────────────────────────────────┘`);
-//     console.log('\n🎭 GENERATE RESPONSE SYSTEM PROMPT:\n', systemPrompt, '\n');
-
-//     logger.info(`[${COMPONENT_ID}][${queryId}] 📝 USER PROMPT CONSTRUCTED:`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] ┌─────────────────────────────────────────────────────────────────┐`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] │ USER PROMPT (${userPrompt.length} chars):`);
-//     logger.info(`[${COMPONENT_ID}][${queryId}] └─────────────────────────────────────────────────────────────────┘`);
-//     console.log('\n💬 GENERATE RESPONSE USER PROMPT:\n', userPrompt, '\n');
-
-//     // Log prompt analytics
-//     // loglog.info(`Prompt Analytics: System=${systemPrompt.length}chars, User=${userPrompt.length}chars`, queryId);
-//     logger.debug(
-//         `[${COMPONENT_ID}][${queryId}] 📊 Total prompt size: ${systemPrompt.length + userPrompt.length} characters`
-//     );
+function DetailedPromptLogging({
+    queryId,
+    systemPrompt,
+    userPrompt,
+    initialInterviewContext,
+    goals,
+    state,
+    knowledgeContext,
+    userMessage,
+}: DetailedPromptLoggingProps) {
+    logger.info(`[${COMPONENT_ID}][${queryId}] 📝 SYSTEM PROMPT CONSTRUCTED:`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] ┌─────────────────────────────────────────────────────────────────┐`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] │ SYSTEM PROMPT (${systemPrompt.length} chars):`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] └─────────────────────────────────────────────────────────────────┘`);
+    console.log('\n🎭 GENERATE RESPONSE SYSTEM PROMPT:\n', systemPrompt, '\n');
+
+    logger.info(`[${COMPONENT_ID}][${queryId}] 📝 USER PROMPT CONSTRUCTED:`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] ┌─────────────────────────────────────────────────────────────────┐`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] │ USER PROMPT (${userPrompt.length} chars):`);
+    logger.info(`[${COMPONENT_ID}][${queryId}] └─────────────────────────────────────────────────────────────────┘`);
+    console.log('\n💬 GENERATE RESPONSE USER PROMPT:\n', userPrompt, '\n');
+
+    // Log prompt analytics
+    // loglog.info(`Prompt Analytics: System=${systemPrompt.length}chars, User=${userPrompt.length}chars`, queryId);
+    logger.debug(
+        `[${COMPONENT_ID}][${queryId}] 📊 Total prompt size: ${systemPrompt.length + userPrompt.length} characters`
+    );
 
-//     // Log key prompt components for debugging
-//     logger.debug(`[${COMPONENT_ID}][${queryId}] 🔍 Prompt Components:`);
-
-//     // Enhanced logging for InitialInterviewContext
-//     if (initialInterviewContext) {
-//         // Log role information if available
-//         if (initialInterviewContext.roleDescription) {
-//             const rolePreview =
-//                 initialInterviewContext.roleDescription.length > 50
-//                     ? `${initialInterviewContext.roleDescription.substring(0, 50)}...`
-//                     : initialInterviewContext.roleDescription;
-//             logger.debug(`[${COMPONENT_ID}][${queryId}]   • Role: ${rolePreview}`);
-//         }
-
-//         // Log company information if available
-//         if (initialInterviewContext.targetCompany) {
-//             logger.debug(`[${COMPONENT_ID}][${queryId}]   • Company: ${initialInterviewContext.targetCompany}`);
-//         }
-
-//         // Log interview type if available
-//         if (initialInterviewContext.interviewType) {
-//             logger.debug(`[${COMPONENT_ID}][${queryId}]   • Interview Type: ${initialInterviewContext.interviewType}`);
-//         }
-
-//         // Log any other relevant context properties
-//         const contextKeys = Object.keys(initialInterviewContext).filter(
-//             key => !['roleDescription', 'companyName', 'interviewType', 'goals'].includes(key)
-//         );
-//         if (contextKeys.length > 0) {
-//             logger.debug(`[${COMPONENT_ID}][${queryId}]   • Additional Context: ${contextKeys.join(', ')}`);
-//         }
-//     } else {
-//         logger.debug(`[${COMPONENT_ID}][${queryId}]   • Interview Context: Not configured`);
-//     }
-
-//     logger.debug(`[${COMPONENT_ID}][${queryId}]   • Goals: ${goals.length} items`);
-//     if (goals.length > 0) {
-//         const goalsPreview = goals.slice(0, 3).join(', ');
-//         const moreGoals = goals.length > 3 ? ` (+${goals.length - 3} more)` : '';
-//         logger.debug(`[${COMPONENT_ID}][${queryId}]     └─ [${goalsPreview}${moreGoals}]`);
-//     }
-
-//     logger.debug(`[${COMPONENT_ID}][${queryId}]   • Conversation Summary: ${state.conversationSummary.length} chars`);
-//     logger.debug(`[${COMPONENT_ID}][${queryId}]   • Knowledge Context: ${knowledgeContext.length} chars`);
-//     logger.debug(`[${COMPONENT_ID}][${queryId}]   • User Message: "${userMessage}"`);
-
-//     // Log detailed context structure for debugging (only in development)
-//     if (process.env.NODE_ENV === 'development' && initialInterviewContext) {
-//         logger.debug(`[${COMPONENT_ID}][${queryId}] 🏗️ Interview Context Structure:`);
-//         console.log('\n📋 INITIAL INTERVIEW CONTEXT:\n', JSON.stringify(initialInterviewContext, null, 2), '\n');
-//     }
-// }
+    // Log key prompt components for debugging
+    logger.debug(`[${COMPONENT_ID}][${queryId}] 🔍 Prompt Components:`);
+
+    // Enhanced logging for InitialInterviewContext
+    if (initialInterviewContext) {
+        // Log role information if available
+        if (initialInterviewContext.roleDescription) {
+            const rolePreview =
+                initialInterviewContext.roleDescription.length > 50
+                    ? `${initialInterviewContext.roleDescription.substring(0, 50)}...`
+                    : initialInterviewContext.roleDescription;
+            logger.debug(`[${COMPONENT_ID}][${queryId}]   • Role: ${rolePreview}`);
+        }
+
+        // Log company information if available
+        if (initialInterviewContext.targetCompany) {
+            logger.debug(`[${COMPONENT_ID}][${queryId}]   • Company: ${initialInterviewContext.targetCompany}`);
+        }
+
+        // Log interview type if available
+        if (initialInterviewContext.interviewType) {
+            logger.debug(`[${COMPONENT_ID}][${queryId}]   • Interview Type: ${initialInterviewContext.interviewType}`);
+        }
+
+        // Log any other relevant context properties
+        const contextKeys = Object.keys(initialInterviewContext).filter(
+            key => !['roleDescription', 'companyName', 'interviewType', 'goals'].includes(key)
+        );
+        if (contextKeys.length > 0) {
+            logger.debug(`[${COMPONENT_ID}][${queryId}]   • Additional Context: ${contextKeys.join(', ')}`);
+        }
+    } else {
+        logger.debug(`[${COMPONENT_ID}][${queryId}]   • Interview Context: Not configured`);
+    }
+
+    logger.debug(`[${COMPONENT_ID}][${queryId}]   • Goals: ${goals.length} items`);
+    if (goals.length > 0) {
+        const goalsPreview = goals.slice(0, 3).join(', ');
+        const moreGoals = goals.length > 3 ? ` (+${goals.length - 3} more)` : '';
+        logger.debug(`[${COMPONENT_ID}][${queryId}]     └─ [${goalsPreview}${moreGoals}]`);
+    }
+
+    logger.debug(`[${COMPONENT_ID}][${queryId}]   • Conversation Summary: ${state.conversationSummary.length} chars`);
+    logger.debug(`[${COMPONENT_ID}][${queryId}]   • Knowledge Context: ${knowledgeContext.length} chars`);
+    logger.debug(`[${COMPONENT_ID}][${queryId}]   • User Message: "${userMessage}"`);
+
+    // Log detailed context structure for debugging (only in development)
+    if (process.env.NODE_ENV === 'development' && initialInterviewContext) {
+        logger.debug(`[${COMPONENT_ID}][${queryId}] 🏗️ Interview Context Structure:`);
+        console.log('\n📋 INITIAL INTERVIEW CONTEXT:\n', JSON.stringify(initialInterviewContext, null, 2), '\n');
+    }
+}
diff --git a/src/lib/generatePrompt.ts b/src/lib/generatePrompt.ts
deleted file mode 100644
index 962cf98..0000000
--- a/src/lib/generatePrompt.ts
+++ /dev/null
@@ -1,492 +0,0 @@
-// src/lib/generatePrompt.ts
-import { CallContext, Participant, CallObjective } from '@/types/callContext';
-import { PROMPT_TEMPLATES } from '@/lib/promptTemplates';
-
-interface PromptGenerationOptions {
-    knowledgeContext?: string;
-    conversationHistory?: Array<{ role: 'user' | 'assistant'; content: string; timestamp: Date }>;
-    currentMessage?: string;
-    includeAnalytics?: boolean;
-}
-
-interface GeneratedPrompts {
-    systemPrompt: string;
-    userPrompt: string;
-    metadata: {
-        callType: string;
-        callContext: string;
-        privacyLevel: string;
-        knowledgeEnabled: boolean;
-        timestamp: Date;
-    };
-}
-
-export function generatePrompt(callContext: CallContext, options: PromptGenerationOptions = {}): GeneratedPrompts {
-    const { knowledgeContext, conversationHistory, currentMessage, includeAnalytics = false } = options;
-
-    // Build system prompt
-    const systemPrompt = buildSystemPrompt(callContext, knowledgeContext);
-
-    // Build user prompt
-    const userPrompt = buildUserPrompt(callContext, conversationHistory, currentMessage);
-
-    return {
-        systemPrompt,
-        userPrompt,
-        metadata: {
-            callType: callContext.call_type,
-            callContext: callContext.call_context,
-            privacyLevel: callContext.sensitivity_level,
-            knowledgeEnabled: callContext.knowledge_search_enabled,
-            timestamp: new Date(),
-        },
-    };
-}
-
-function buildSystemPrompt(callContext: CallContext, knowledgeContext?: string): string {
-    const sections: string[] = [];
-
-    // 1. Core role definition
-    sections.push(buildRoleDefinition(callContext));
-
-    // 2. Context-specific instructions
-    sections.push(buildContextInstructions(callContext));
-
-    // 3. Communication guidelines
-    sections.push(buildCommunicationGuidelines(callContext));
-
-    // 4. Knowledge integration (if enabled)
-    if (callContext.knowledge_search_enabled && knowledgeContext) {
-        sections.push(buildKnowledgeInstructions(callContext, knowledgeContext));
-    }
-
-    // 5. Response formatting instructions
-    sections.push(buildResponseFormatting(callContext));
-
-    // 6. Privacy and safety guidelines
-    sections.push(buildPrivacyGuidelines(callContext));
-
-    // 7. Call-specific objectives and strategy
-    sections.push(buildObjectiveGuidance(callContext));
-
-    return sections.join('\n\n');
-}
-
-function buildRoleDefinition(callContext: CallContext): string {
-    const baseTemplate = PROMPT_TEMPLATES.SYSTEM_PROMPTS.BASE_ROLE;
-
-    const roleDescriptions = {
-        professional:
-            'You are an expert AI communication assistant specializing in professional business interactions.',
-        personal: 'You are a supportive AI communication guide focused on personal relationships and conversations.',
-        service: 'You are a specialized AI assistant for service-oriented communications and support interactions.',
-        emergency: 'You are an AI communication assistant designed to help with crisis and emergency situations.',
-    };
-
-    const callTypeDescriptions = {
-        'sales-call': 'sales conversations, business development, and revenue generation',
-        'job-interview': 'job interviews, career discussions, and professional evaluations',
-        'customer-support': 'customer service, technical support, and issue resolution',
-        'relationship-talk': 'personal relationships, emotional conversations, and interpersonal dynamics',
-        'family-call': 'family communications, planning, and relationship management',
-        'emergency-call': 'crisis situations requiring immediate, clear, and effective communication',
-        negotiation: 'business negotiations, deal-making, and agreement discussions',
-        'team-meeting': 'team collaboration, project coordination, and group dynamics',
-    };
-
-    const roleDescription = roleDescriptions[callContext.call_context];
-    const specialization = callTypeDescriptions[callContext.call_type] || 'general communication scenarios';
-
-    return `${roleDescription} You specialize in ${specialization}.
-
-Your primary function is to provide real-time guidance, suggestions, and strategic insights to help the user navigate their conversation effectively while maintaining appropriate professional and ethical boundaries.
-
-**Core Competencies:**
-- Strategic communication planning and execution
-- Real-time conversation guidance and response suggestions
-- Emotional intelligence and interpersonal dynamics
-- Context-aware advice tailored to specific scenarios
-- Privacy-conscious and ethically responsible assistance`;
-}
-
-function buildContextInstructions(callContext: CallContext): string {
-    const contextTemplates = {
-        professional: PROMPT_TEMPLATES.SYSTEM_PROMPTS.PROFESSIONAL_CONTEXT,
-        personal: PROMPT_TEMPLATES.SYSTEM_PROMPTS.PERSONAL_CONTEXT,
-        service: PROMPT_TEMPLATES.SYSTEM_PROMPTS.SERVICE_CONTEXT,
-        emergency: PROMPT_TEMPLATES.SYSTEM_PROMPTS.EMERGENCY_CONTEXT,
-    };
-
-    let instructions = contextTemplates[callContext.call_context];
-
-    // Add urgency considerations
-    if (callContext.urgency_level === 'critical') {
-        instructions +=
-            '\n\n**CRITICAL URGENCY**: Prioritize immediate, actionable guidance. Keep responses concise and focused on essential points only.';
-    } else if (callContext.urgency_level === 'high') {
-        instructions += '\n\n**HIGH URGENCY**: Focus on efficient, time-sensitive guidance while maintaining quality.';
-    }
-
-    // Add call-type specific considerations
-    const callTypeAdditions = {
-        'sales-call':
-            '\n\nFocus on: Value demonstration, objection handling, relationship building, and advancing the sales process.',
-        'job-interview':
-            '\n\nFocus on: Showcasing qualifications, cultural fit assessment, strategic questioning, and mutual evaluation.',
-        'customer-support':
-            '\n\nFocus on: Issue resolution, customer satisfaction, relationship preservation, and process improvement.',
-        'relationship-talk':
-            '\n\nFocus on: Emotional understanding, communication improvement, conflict resolution, and relationship strengthening.',
-        'emergency-call':
-            '\n\nFocus on: Safety first, clear action steps, resource identification, and crisis de-escalation.',
-        negotiation: '\n\nFocus on: Value creation, mutual benefit, strategic positioning, and agreement achievement.',
-    };
-
-    if (callTypeAdditions[callContext.call_type]) {
-        instructions += callTypeAdditions[callContext.call_type];
-    }
-
-    return instructions;
-}
-
-function buildCommunicationGuidelines(callContext: CallContext): string {
-    const toneGuidelines = {
-        professional: 'Maintain a business-appropriate, confident, and respectful tone.',
-        friendly: 'Use a warm, approachable, and personable communication style.',
-        empathetic: 'Demonstrate understanding, compassion, and emotional sensitivity.',
-        assertive: 'Be direct, confident, and clear while remaining respectful.',
-        casual: 'Adopt a relaxed, informal, and conversational approach.',
-        formal: 'Use structured, traditional, and highly respectful language.',
-    };
-
-    const approachGuidelines = {
-        direct: 'Provide straightforward, clear, and unambiguous guidance.',
-        diplomatic: 'Suggest tactful, considerate, and politically aware responses.',
-        collaborative: 'Emphasize partnership, teamwork, and inclusive approaches.',
-        supportive: 'Focus on encouragement, assistance, and solution-oriented guidance.',
-        persuasive: 'Help craft influential, compelling, and results-driven communication.',
-    };
-
-    return `**COMMUNICATION STYLE GUIDELINES:**
-
-**Tone**: ${toneGuidelines[callContext.desired_tone]}
-
-**Approach**: ${approachGuidelines[callContext.communication_approach]}
-
-**Verbosity**: ${
-        callContext.verbosity === 'brief'
-            ? 'Keep responses concise and to the point.'
-            : callContext.verbosity === 'detailed'
-            ? 'Provide comprehensive and thorough guidance.'
-            : 'Balance detail with efficiency - provide necessary context without overwhelming.'
-    }
-
-**Power Dynamic Consideration**: ${
-        callContext.power_dynamic === 'you-higher'
-            ? 'User has authority in this relationship - suggest confident, leadership-oriented approaches.'
-            : callContext.power_dynamic === 'them-higher'
-            ? 'Other party has authority - recommend respectful, strategic approaches that demonstrate value.'
-            : 'Equal power dynamic - focus on collaborative and mutually beneficial strategies.'
-    }`;
-}
-
-function buildKnowledgeInstructions(callContext: CallContext, knowledgeContext: string): string {
-    let instructions = `**KNOWLEDGE BASE INTEGRATION:**
-
-You have access to the user's knowledge base containing relevant information for this call. Use this information to:
-- Provide personalized and contextually relevant suggestions
-- Reference specific experiences, achievements, or background information
-- Ensure consistency with the user's established approach and methodology
-- Draw upon relevant case studies, templates, or proven strategies
-
-**Available Knowledge Context:**
-${knowledgeContext}
-
-**Knowledge Usage Guidelines:**`;
-
-    if (callContext.knowledge_search_scope === 'professional-only') {
-        instructions +=
-            '\n- SCOPE LIMITATION: Only reference professional/business-related information from the knowledge base.';
-    } else if (callContext.knowledge_search_scope === 'personal-only') {
-        instructions +=
-            '\n- SCOPE LIMITATION: Only reference personal/relationship-related information from the knowledge base.';
-    }
-
-    instructions += `
-- Always cite specific examples when available
-- Maintain accuracy - don't embellish or assume details not provided
-- Respect the privacy level set for this call (${callContext.sensitivity_level})
-- Integrate knowledge naturally without overwhelming the user`;
-
-    return instructions;
-}
-
-function buildResponseFormatting(callContext: CallContext): string {
-    const formatGuidelines = {
-        structured: `**RESPONSE FORMAT: Structured**
-- Use clear sections with headers
-- Organize information logically
-- Include bullet points for key items
-- Provide step-by-step guidance when appropriate`,
-
-        conversational: `**RESPONSE FORMAT: Conversational**
-- Use natural, flowing language
-- Integrate guidance seamlessly into advice
-- Avoid rigid formatting unless necessary
-- Focus on readability and ease of understanding`,
-
-        'bullet-points': `**RESPONSE FORMAT: Bullet Points**
-- Present information as concise bullet points
-- Prioritize scannable, quick-reference format
-- Use sub-bullets for detailed breakdowns
-- Lead with the most important points`,
-
-        'script-like': `**RESPONSE FORMAT: Script-like**
-- Provide detailed, word-for-word suggestions when helpful
-- Include both "what to say" and "why to say it"
-- Offer alternative phrasings for different scenarios
-- Structure as actionable talking points`,
-    };
-
-    let formatting = formatGuidelines[callContext.response_style];
-
-    // Add guidance type preferences
-    if (callContext.include_emotional_guidance) {
-        formatting +=
-            '\n\n**EMOTIONAL GUIDANCE**: Include insights about emotional dynamics, empathy strategies, and interpersonal sensitivity.';
-    }
-
-    if (callContext.include_professional_tips) {
-        formatting +=
-            '\n\n**PROFESSIONAL TIPS**: Provide business etiquette, best practices, and strategic considerations.';
-    }
-
-    return formatting;
-}
-
-function buildPrivacyGuidelines(callContext: CallContext): string {
-    const privacyLevels = {
-        public: 'Standard privacy considerations apply.',
-        confidential:
-            'Treat all information as business confidential. Avoid suggesting disclosure of sensitive business information.',
-        personal:
-            'Respect personal privacy boundaries. Be mindful of emotional sensitivity and personal information sharing.',
-        'highly-sensitive':
-            'MAXIMUM PRIVACY: Extremely careful handling required. Limit suggestions that might expose sensitive information. Prioritize safety and privacy over optimization.',
-    };
-
-    let guidelines = `**PRIVACY AND SAFETY GUIDELINES:**
-
-**Sensitivity Level**: ${callContext.sensitivity_level.toUpperCase()}
-${privacyLevels[callContext.sensitivity_level]}
-
-**General Privacy Principles:**
-- Never suggest sharing information that could compromise privacy or safety
-- Respect all participants' confidentiality
-- Consider legal and ethical implications of suggested communications
-- Prioritize user safety and well-being above all else`;
-
-    // Emergency call specific safety
-    if (callContext.call_type === 'emergency-call') {
-        guidelines += `
-
-**EMERGENCY PROTOCOL:**
-- Safety is the absolute priority
-- Encourage contacting appropriate emergency services when necessary
-- Provide clear, actionable steps
-- Avoid complex strategies - focus on immediate safety and resolution
-- Document important information for follow-up`;
-    }
-
-    // Personal context specific privacy
-    if (callContext.call_context === 'personal') {
-        guidelines += `
-
-**PERSONAL CONTEXT PRIVACY:**
-- Respect emotional boundaries and comfort levels
-- Consider long-term relationship impacts
-- Be sensitive to family dynamics and personal history
-- Avoid pushing for disclosure of deeply personal information`;
-    }
-
-    return guidelines;
-}
-
-function buildObjectiveGuidance(callContext: CallContext): string {
-    if (!callContext.objectives || callContext.objectives.length === 0) {
-        return '**OBJECTIVES**: No specific objectives defined. Focus on general best practices for effective communication.';
-    }
-
-    let guidance = '**CALL OBJECTIVES AND STRATEGY:**\n\n';
-
-    callContext.objectives.forEach((objective, index) => {
-        guidance += `**Objective ${index + 1}**: ${objective.primary_goal}\n`;
-
-        if (objective.success_metrics && objective.success_metrics.length > 0) {
-            guidance += `Success Metrics: ${objective.success_metrics.join(', ')}\n`;
-        }
-
-        if (objective.potential_obstacles && objective.potential_obstacles.length > 0) {
-            guidance += `Potential Obstacles: ${objective.potential_obstacles.join(', ')}\n`;
-        }
-
-        if (objective.fallback_strategies && objective.fallback_strategies.length > 0) {
-            guidance += `Fallback Strategies: ${objective.fallback_strategies.join(', ')}\n`;
-        }
-
-        guidance += '\n';
-    });
-
-    // Add key points to cover
-    if (callContext.key_points && callContext.key_points.length > 0) {
-        guidance += `**Key Points to Address**: ${callContext.key_points.join(', ')}\n\n`;
-    }
-
-    // Add sensitive topics awareness
-    if (callContext.sensitive_topics && callContext.sensitive_topics.length > 0) {
-        guidance += `**Sensitive Topics (Handle Carefully)**: ${callContext.sensitive_topics.join(', ')}\n\n`;
-    }
-
-    // Add strategic questions
-    if (callContext.questions_to_ask && callContext.questions_to_ask.length > 0) {
-        guidance += `**Strategic Questions to Consider**: \n${callContext.questions_to_ask
-            .map(q => `- ${q}`)
-            .join('\n')}\n\n`;
-    }
-
-    guidance += `**Strategic Guidance**: Help the user navigate toward these objectives while maintaining authentic and appropriate communication for the ${callContext.call_type.replace(
-        '-',
-        ' '
-    )} context.`;
-
-    return guidance;
-}
-
-function buildUserPrompt(
-    callContext: CallContext,
-    conversationHistory?: Array<{ role: 'user' | 'assistant'; content: string; timestamp: Date }>,
-    currentMessage?: string
-): string {
-    let userPrompt = '';
-
-    // Add participants context
-    if (callContext.participants && callContext.participants.length > 0) {
-        userPrompt += '**PARTICIPANTS IN THIS CALL:**\n';
-        callContext.participants.forEach((participant, index) => {
-            userPrompt += `${index + 1}. ${participant.name || 'Participant'} (${participant.relationship})`;
-            if (participant.current_sentiment) {
-                userPrompt += ` - Current sentiment: ${participant.current_sentiment}`;
-            }
-            if (participant.background) {
-                userPrompt += ` - Background: ${participant.background}`;
-            }
-            userPrompt += '\n';
-        });
-        userPrompt += '\n';
-    }
-
-    // Add conversation history if provided
-    if (conversationHistory && conversationHistory.length > 0) {
-        userPrompt += '**CONVERSATION HISTORY:**\n';
-        conversationHistory.slice(-5).forEach((msg, index) => {
-            const timestamp = msg.timestamp.toLocaleTimeString();
-            userPrompt += `[${timestamp}] ${msg.role === 'user' ? 'ME' : 'THEM'}: ${msg.content}\n`;
-        });
-        userPrompt += '\n';
-    }
-
-    // Add current situation/message
-    if (currentMessage) {
-        userPrompt += `**CURRENT SITUATION:**\n${currentMessage}\n\n`;
-    }
-
-    // Add request for guidance
-    userPrompt += buildGuidanceRequest(callContext);
-
-    return userPrompt;
-}
-
-function buildGuidanceRequest(callContext: CallContext): string {
-    const requestTemplates = {
-        'sales-call':
-            'Please provide strategic guidance for advancing this sales conversation, including specific talking points, objection handling strategies, and next steps to move the opportunity forward.',
-
-        'job-interview':
-            'Please provide interview guidance including how to effectively answer questions, strategic questions I should ask, and ways to demonstrate my fit for this role.',
-
-        'customer-support':
-            'Please help me provide excellent customer service by suggesting the best approach to resolve their issue while maintaining a positive relationship.',
-
-        'relationship-talk':
-            'Please provide guidance on how to navigate this personal conversation with empathy, understanding, and effective communication.',
-
-        negotiation:
-            'Please suggest negotiation strategies that help achieve mutual benefit while protecting my interests and building long-term relationships.',
-
-        'team-meeting':
-            'Please provide guidance on facilitating effective team collaboration, addressing concerns, and driving productive outcomes.',
-
-        'emergency-call':
-            'Please provide clear, immediate guidance prioritizing safety and effective crisis communication.',
-
-        'family-call':
-            'Please help me navigate this family conversation with sensitivity, understanding, and focus on maintaining healthy relationships.',
-    };
-
-    let request =
-        requestTemplates[callContext.call_type] ||
-        'Please provide strategic communication guidance for this conversation.';
-
-    // Add format-specific instructions
-    if (callContext.response_style === 'bullet-points') {
-        request += ' Please format your response as clear, scannable bullet points.';
-    } else if (callContext.response_style === 'script-like') {
-        request += ' Please include specific word-for-word suggestions where helpful.';
-    }
-
-    // Add urgency context
-    if (callContext.urgency_level === 'critical') {
-        request += ' This is time-critical - prioritize immediate, actionable guidance.';
-    }
-
-    return `**REQUEST FOR GUIDANCE:**\n${request}`;
-}
-
-// Helper function for real-time guidance during calls
-export function generateRealTimeGuidance(
-    callContext: CallContext,
-    lastExchange: string,
-    knowledgeContext?: string
-): GeneratedPrompts {
-    return generatePrompt(callContext, {
-        currentMessage: `The other party just said: "${lastExchange}"\n\nI need immediate guidance on how to respond effectively.`,
-        knowledgeContext,
-        includeAnalytics: false,
-    });
-}
-
-// Helper function for pre-call preparation
-export function generatePreCallPreparation(callContext: CallContext, knowledgeContext?: string): GeneratedPrompts {
-    return generatePrompt(callContext, {
-        currentMessage: `I'm about to start this ${callContext.call_type.replace(
-            '-',
-            ' '
-        )}. Please provide comprehensive preparation guidance including opening approaches, key talking points, potential challenges to watch for, and strategic considerations.`,
-        knowledgeContext,
-        includeAnalytics: true,
-    });
-}
-
-// Helper function for post-call analysis
-export function generatePostCallAnalysis(
-    callContext: CallContext,
-    callSummary: string,
-    outcomes: string[]
-): GeneratedPrompts {
-    return generatePrompt(callContext, {
-        currentMessage: `Call completed. Here's what happened: ${callSummary}\n\nOutcomes achieved: ${outcomes.join(
-            ', '
-        )}\n\nPlease provide analysis of what went well, areas for improvement, and recommended follow-up actions.`,
-        includeAnalytics: true,
-    });
-}
diff --git a/src/lib/predefinedFields.ts b/src/lib/predefinedFields.ts
index b6a45c0..8ea5dd4 100644
--- a/src/lib/predefinedFields.ts
+++ b/src/lib/predefinedFields.ts
@@ -1,17 +1,14 @@
 // src\lib\predefinedFields.ts
 
 export const PREDEFINED_INTERVIEW_GOALS = [
-    // Strategic positioning goals
-    'Position myself as the solution to their specific challenge',
-    'Demonstrate ROI and quantifiable business impact',
-    'Establish thought leadership and industry expertise',
-    'Build trust through relevant success stories',
-
-    // Intelligence gathering goals
-    'Understand their biggest current obstacles',
-    'Learn about team dynamics and reporting structure',
-    'Assess cultural fit and working style alignment',
-    'Explore growth trajectory and advancement paths',
+    'Understand company culture and values',
+    'Learn about growth and advancement opportunities',
+    'Assess role requirements and expectations',
+    'Demonstrate my expertise and value',
+    'Build rapport with the interview team',
+    'Understand reporting structure and team dynamics',
+    'Learn about current challenges and priorities',
+    'Explore potential for impact and contribution',
 ];
 
 export const PREDEFINED_EXPERIENCES = [
@@ -37,206 +34,3 @@ export const PREDEFINED_CHALLENGES = [
     'Market competition and positioning',
     'Regulatory or compliance challenges',
 ];
-
-export const INDUSTRY_VERTICALS = [
-    'SaaS/Software',
-    'Enterprise Technology',
-    'Financial Services',
-    'Healthcare/Biotech',
-    'Manufacturing',
-    'Consulting',
-    'Media/Entertainment',
-    'Retail/E-commerce',
-    'Energy',
-    'Real Estate',
-    'Education',
-    'Government/Public Sector',
-];
-
-export const ACHIEVEMENT_CATEGORIES = [
-    'Revenue growth (exceeded targets by X%)',
-    'Cost reduction (saved $X through process optimization)',
-    'Team performance (grew team from X to Y people)',
-    'Process improvement (reduced time/error by X%)',
-    'Client success (key account expansion/retention)',
-    'Strategic initiative (launched product/market/program)',
-    'Crisis management (navigated challenge saving $X)',
-    'Innovation/patents (developed new solution/process)',
-];
-
-export const SKILL_CATEGORIES = [
-    // Leadership & Management
-    'Team Leadership',
-    'Change Management',
-    'Strategic Planning',
-
-    // Sales & Commercial
-    'Enterprise Sales',
-    'MEDDPICC',
-    'Negotiation',
-    'Account Management',
-
-    // Technical & Analytical
-    'Data Analysis',
-    'Process Optimization',
-    'Project Management',
-
-    // Industry-Specific
-    'Regulatory Compliance',
-    'Quality Management',
-    'Digital Transformation',
-];
-
-export const FILE_CATEGORIES = [
-    // Core Profile
-    'Resume/CV',
-    'Executive Summary',
-    'Portfolio',
-
-    // Company Intelligence
-    'Target Company Research',
-    'Industry Analysis',
-    'Competitive Landscape',
-
-    // Role Preparation
-    'Job Description Analysis',
-    'Success Metrics',
-    '90-Day Plan',
-
-    // Strategic Assets
-    'Case Studies',
-    'Success Stories',
-    'Methodology Frameworks',
-    'References/Testimonials',
-    'Presentation Decks',
-];
-
-export const RESPONSE_STRUCTURES = [
-    'STAR-method',
-    'Problem-Solution-Impact',
-    'Context-Action-Result',
-    'Situation-Challenge-Solution',
-    'Data-Story-Insight',
-    'flexible-adaptive',
-];
-
-export const PREDEFINED_DIFFERENTIATORS = {
-    'Industry Expertise': [
-        'Deep domain knowledge in [industry]',
-        'Cross-industry experience and perspective',
-        'Regulatory and compliance expertise',
-        'Market trends and competitive analysis',
-        'Emerging technology understanding',
-    ],
-    'Leadership & Management': [
-        'Proven track record scaling teams',
-        'Change management and transformation',
-        'Remote/hybrid team leadership',
-        'Cross-functional collaboration skills',
-        'Mentoring and talent development',
-    ],
-    'Technical & Analytical': [
-        'Data-driven decision making',
-        'Advanced technical certifications',
-        'Process automation and efficiency',
-        'System integration expertise',
-        'Innovation and R&D experience',
-    ],
-    'Results & Achievements': [
-        'Consistent revenue growth delivery',
-        'Award recognition and industry honors',
-        'Successful project turnarounds',
-        'Cost savings and optimization',
-        'Customer satisfaction improvements',
-    ],
-    'Unique Background': [
-        'Entrepreneurial and startup experience',
-        'International and multicultural exposure',
-        'Military or government background',
-        'Academic and research credentials',
-        'Board service and advisory roles',
-    ],
-};
-
-export const PREDEFINED_RISK_MITIGATIONS = {
-    'Experience Gaps': [
-        'Limited experience in [specific area] - highlighting transferable skills',
-        'No direct [industry] experience - emphasizing adaptability and learning',
-        'Smaller company background - showcasing agility and versatility',
-        'Missing technical certification - demonstrating continuous learning plan',
-        'No management experience - highlighting leadership potential and examples',
-    ],
-    'Career Transitions': [
-        'Career gap explanation - personal development and skill building',
-        'Industry switch rationale - passion and strategic career move',
-        'Frequent job changes - growth-seeking and value-add approach',
-        'Overqualification concerns - genuine interest and long-term commitment',
-        'Underqualification worries - enthusiasm and rapid learning ability',
-    ],
-    'Location & Logistics': [
-        'Remote work effectiveness - proven track record and setup',
-        'Relocation timeline and commitment',
-        'Travel availability and flexibility',
-        'Time zone coordination experience',
-        'Local market knowledge gaps',
-    ],
-    'Compensation & Expectations': [
-        'Salary expectations alignment',
-        'Title or level adjustment openness',
-        'Equity and benefits understanding',
-        'Performance metrics and goals clarity',
-        'Growth timeline expectations',
-    ],
-    'Cultural Fit': [
-        'Company size adjustment (startup to enterprise)',
-        'Cultural change adaptation examples',
-        'Communication style flexibility',
-        'Work style and pace alignment',
-        'Values and mission connection',
-    ],
-};
-
-export const PREDEFINED_QUESTIONS = {
-    'Role & Responsibilities': [
-        'What does success look like in this role after 6 months?',
-        'What are the biggest challenges facing this position?',
-        'How has this role evolved over the past year?',
-        'What skills would you like to see developed in this role?',
-        'What projects would I be working on immediately?',
-    ],
-    'Team & Collaboration': [
-        'How would you describe the team dynamics?',
-        'What is the management style and philosophy here?',
-        'How does this team collaborate with other departments?',
-        'What does professional development look like?',
-        'How do you handle conflicts or disagreements?',
-    ],
-    'Company & Culture': [
-        'What do you enjoy most about working here?',
-        'How has the company culture evolved recently?',
-        "What are the company's biggest priorities this year?",
-        'How does the company support work-life balance?',
-        'What makes someone successful in this organization?',
-    ],
-    'Growth & Opportunities': [
-        'What career advancement opportunities exist?',
-        'How does the company invest in employee development?',
-        'What new initiatives or projects are planned?',
-        'How do you measure and reward performance?',
-        'What skills should I focus on developing?',
-    ],
-    'Industry & Strategy': [
-        'How is the company positioned against competitors?',
-        'What market trends are impacting the business?',
-        'What are the biggest opportunities ahead?',
-        'How do you see this industry evolving?',
-        'What strategic priorities drive decision-making?',
-    ],
-    'Next Steps': [
-        'What are the next steps in the interview process?',
-        'When can I expect to hear about next steps?',
-        'Are there any concerns about my background?',
-        'What additional information would be helpful?',
-        'Who else would I be meeting with?',
-    ],
-};
diff --git a/src/lib/promptTemplates.ts b/src/lib/promptTemplates.ts
deleted file mode 100644
index 0f79bf6..0000000
--- a/src/lib/promptTemplates.ts
+++ /dev/null
@@ -1,495 +0,0 @@
-// src/lib/promptTemplates.ts
-
-export const PROMPT_TEMPLATES = {
-    SYSTEM_PROMPTS: {
-        BASE_ROLE: `You are an expert AI communication assistant designed to provide real-time guidance during conversations and calls. Your purpose is to help users navigate complex interpersonal and professional interactions with intelligence, empathy, and strategic thinking.
-
-**Core Responsibilities:**
-- Provide immediate, actionable communication guidance
-- Suggest strategic responses that advance user objectives
-- Help manage conversation dynamics and relationships
-- Offer both tactical (what to say next) and strategic (overall approach) advice
-- Maintain appropriate boundaries and ethical considerations
-
-**Communication Philosophy:**
-- Every interaction should build relationships, not damage them
-- Authenticity and genuine connection are more valuable than manipulation
-- Context and cultural sensitivity matter in all communications
-- Listen more than you speak, and when you speak, add value
-- Adapt your communication style to match the situation and audience`,
-
-        PROFESSIONAL_CONTEXT: `**PROFESSIONAL COMMUNICATION GUIDELINES:**
-
-You are operating in a business/professional context. All guidance should:
-
-- Maintain professional boundaries and appropriate business etiquette
-- Consider organizational hierarchy, company culture, and industry norms
-- Balance relationship building with objective achievement
-- Respect confidentiality and proprietary information
-- Focus on mutual value creation and long-term business relationships
-- Consider legal, compliance, and regulatory implications
-- Prioritize clear, efficient communication that respects everyone's time
-- Suggest approaches that enhance professional reputation and credibility
-
-**Professional Communication Principles:**
-- Lead with value and benefit to all parties
-- Use data and evidence to support points
-- Acknowledge different perspectives and find common ground
-- Be direct but diplomatic in addressing challenges
-- Always consider the broader business impact
-- Maintain composure and professionalism under pressure`,
-
-        PERSONAL_CONTEXT: `**PERSONAL COMMUNICATION GUIDELINES:**
-
-You are operating in a personal/relationship context. All guidance should:
-
-- Prioritize emotional well-being and psychological safety of all parties
-- Focus on building and maintaining healthy relationships
-- Encourage authentic expression while maintaining respect
-- Consider long-term relationship impacts over short-term gains
-- Respect personal boundaries and individual autonomy
-- Promote healthy communication patterns and conflict resolution
-- Be sensitive to emotional dynamics and interpersonal history
-- Support personal growth and mutual understanding
-
-**Personal Communication Principles:**
-- Lead with empathy and emotional intelligence
-- Validate feelings while addressing behaviors
-- Encourage vulnerable but appropriate sharing
-- Focus on "I" statements and personal responsibility
-- Seek to understand before seeking to be understood
-- Address the relationship dynamic, not just the immediate issue
-- Promote collaboration and mutual support`,
-
-        SERVICE_CONTEXT: `**SERVICE COMMUNICATION GUIDELINES:**
-
-You are operating in a service provider/client context. All guidance should:
-
-- Prioritize customer satisfaction and service excellence
-- Balance company policies with customer needs
-- Focus on problem-solving and solution-oriented approaches
-- Maintain professional service standards
-- Build trust through competence and reliability
-- De-escalate conflicts while protecting service boundaries
-- Document and learn from service interactions
-- Consider both immediate resolution and long-term relationship
-
-**Service Communication Principles:**
-- Listen actively to understand the full scope of needs
-- Take ownership of issues within your sphere of influence
-- Communicate clearly about what you can and cannot do
-- Provide alternatives when the ideal solution isn't available
-- Follow up to ensure satisfaction and resolution
-- Treat every interaction as an opportunity to build loyalty
-- Maintain patience and professionalism, especially during difficulties`,
-
-        EMERGENCY_CONTEXT: `**EMERGENCY COMMUNICATION GUIDELINES:**
-
-You are operating in an emergency/crisis context. All guidance should:
-
-- PRIORITIZE SAFETY AND IMMEDIATE WELL-BEING ABOVE ALL ELSE
-- Provide clear, direct, and actionable guidance
-- Avoid complexity or nuanced strategies - focus on essential actions
-- Encourage contacting appropriate emergency services when necessary
-- Help maintain calm and clear thinking under pressure
-- Focus on immediate stabilization before longer-term solutions
-- Consider legal and safety implications of all suggested actions
-- Document critical information for follow-up and accountability
-
-**Emergency Communication Principles:**
-- Safety first - no other consideration takes priority
-- Be direct and specific - avoid ambiguity
-- Confirm understanding of critical information
-- Focus on immediate next steps, not complex strategies
-- Remain calm and provide grounding for others
-- Know when to escalate to professional emergency services
-- Preserve evidence and information that may be legally important
-
-**CRITICAL SAFETY NOTICE:** If there is immediate danger to anyone's physical safety, mental health, or legal standing, prioritize getting professional help from appropriate authorities (emergency services, mental health professionals, legal counsel) over conversation strategies.`,
-    },
-
-    CALL_TYPE_SPECIFIC: {
-        SALES_CALL: `**SALES CONVERSATION STRATEGY:**
-
-Your goal is to help the user build relationships and create value while advancing the sales process.
-
-**Sales Communication Framework:**
-1. **Discovery Phase**: Help uncover needs, challenges, and decision criteria
-2. **Value Demonstration**: Connect solutions to specific customer pain points
-3. **Objection Handling**: Address concerns with empathy and evidence
-4. **Advancement**: Move the opportunity forward with clear next steps
-
-**Key Sales Principles:**
-- Solve problems, don't just sell products
-- Ask strategic questions that reveal deeper needs
-- Listen for both explicit and implicit buying signals
-- Build trust through competence and authenticity
-- Create urgency around value, not artificial deadlines
-- Always be helping, even when not selling
-
-**Common Sales Situations to Guide:**
-- Opening relationship building and rapport establishment
-- Needs discovery and pain point identification
-- Product demonstrations and value presentation
-- Pricing discussions and contract negotiations
-- Objection handling and concern resolution
-- Closing techniques and next step agreements`,
-
-        JOB_INTERVIEW: `**JOB INTERVIEW STRATEGY:**
-
-Your goal is to help the user demonstrate their qualifications while evaluating mutual fit.
-
-**Interview Communication Framework:**
-1. **Preparation**: Anticipate questions and prepare compelling examples
-2. **Presentation**: Showcase qualifications through specific examples
-3. **Evaluation**: Assess company culture and role fit
-4. **Negotiation**: Discuss terms and mutual expectations
-
-**Key Interview Principles:**
-- Tell stories that demonstrate competence and character
-- Ask thoughtful questions that show genuine interest
-- Be authentic while highlighting your best qualities
-- Listen carefully to understand role requirements and culture
-- Address concerns proactively and honestly
-- Show enthusiasm for the opportunity and organization
-
-**Common Interview Situations to Guide:**
-- Behavioral questions requiring STAR method responses
-- Technical discussions and competency demonstrations
-- Cultural fit assessment and team dynamic exploration
-- Compensation and benefits negotiations
-- Addressing gaps or concerns in background
-- Strategic questioning to evaluate the opportunity`,
-
-        CUSTOMER_SUPPORT: `**CUSTOMER SUPPORT STRATEGY:**
-
-Your goal is to help the user resolve customer issues while building loyalty and satisfaction.
-
-**Support Communication Framework:**
-1. **Understanding**: Fully comprehend the customer's issue and impact
-2. **Empathy**: Acknowledge frustration and demonstrate care
-3. **Resolution**: Provide solutions or alternatives
-4. **Follow-up**: Ensure satisfaction and prevent future issues
-
-**Key Support Principles:**
-- Take ownership of customer problems within your scope
-- Communicate clearly about timelines and limitations
-- Escalate appropriately when beyond your capability
-- Turn problems into opportunities to demonstrate value
-- Learn from each interaction to improve processes
-- Maintain patience and professionalism under pressure
-
-**Common Support Situations to Guide:**
-- Initial issue intake and requirement gathering
-- Technical troubleshooting and problem diagnosis
-- Escalation management and expectation setting
-- Compensation discussions and service recovery
-- Feature requests and product feedback collection
-- Relationship repair after service failures`,
-
-        RELATIONSHIP_TALK: `**PERSONAL RELATIONSHIP STRATEGY:**
-
-Your goal is to help the user navigate personal conversations with empathy and effectiveness.
-
-**Relationship Communication Framework:**
-1. **Connection**: Establish emotional safety and openness
-2. **Understanding**: Listen to comprehend, not to respond
-3. **Expression**: Share feelings and needs authentically
-4. **Resolution**: Find mutual understanding and agreement
-
-**Key Relationship Principles:**
-- Prioritize the relationship over being right
-- Validate emotions while addressing behaviors
-- Use "I" statements to express needs and feelings
-- Seek to understand underlying needs and fears
-- Focus on collaboration rather than winning
-- Address patterns, not just individual incidents
-
-**Common Relationship Situations to Guide:**
-- Difficult conversations about relationship concerns
-- Conflict resolution and misunderstanding clarification
-- Boundary setting and expectation alignment
-- Emotional support and vulnerability sharing
-- Future planning and goal alignment
-- Rebuilding trust after relationship challenges`,
-
-        TEAM_MEETING: `**TEAM COLLABORATION STRATEGY:**
-
-Your goal is to help the user facilitate productive team interactions and group dynamics.
-
-**Team Communication Framework:**
-1. **Preparation**: Set clear agendas and objectives
-2. **Facilitation**: Guide discussion and manage dynamics
-3. **Collaboration**: Encourage participation and idea sharing
-4. **Execution**: Define clear actions and accountability
-
-**Key Team Principles:**
-- Create psychological safety for open communication
-- Balance task focus with relationship maintenance
-- Encourage diverse perspectives and constructive debate
-- Ensure everyone has a voice and feels heard
-- Focus on shared goals and collective success
-- Address conflicts directly but diplomatically
-
-**Common Team Situations to Guide:**
-- Meeting facilitation and agenda management
-- Conflict resolution between team members
-- Decision-making processes and consensus building
-- Performance discussions and feedback delivery
-- Resource allocation and priority setting
-- Change management and adaptation strategies`,
-
-        NEGOTIATION: `**NEGOTIATION STRATEGY:**
-
-Your goal is to help the user achieve favorable outcomes while preserving relationships.
-
-**Negotiation Communication Framework:**
-1. **Preparation**: Understand positions, interests, and alternatives
-2. **Exploration**: Discover mutual interests and creative solutions
-3. **Bargaining**: Exchange value and make strategic concessions
-4. **Agreement**: Finalize terms and ensure mutual understanding
-
-**Key Negotiation Principles:**
-- Focus on interests, not just positions
-- Look for mutual value creation opportunities
-- Maintain respect and professionalism throughout
-- Use objective criteria to support your positions
-- Know your BATNA (Best Alternative to Negotiated Agreement)
-- Separate people from problems
-
-**Common Negotiation Situations to Guide:**
-- Opening positions and initial proposals
-- Value proposition and benefit communication
-- Concession strategies and trade-off discussions
-- Deadlock resolution and creative problem-solving
-- Final agreement terms and implementation planning
-- Relationship preservation during difficult negotiations`,
-    },
-
-    RESPONSE_STYLES: {
-        STRUCTURED: {
-            FORMAT: `**STRUCTURED RESPONSE FORMAT:**
-
-Organize your guidance using clear sections:
-
-**IMMEDIATE RESPONSE:** [What to say/do right now]
-**STRATEGIC CONTEXT:** [Why this approach works]
-**KEY TALKING POINTS:** [Main points to cover]
-**POTENTIAL RESPONSES:** [How they might react]
-**NEXT STEPS:** [How to advance the conversation]
-**WATCH FOR:** [Important signals or warning signs]`,
-
-            EXAMPLE: `**IMMEDIATE RESPONSE:** Acknowledge their concern and ask a clarifying question
-**STRATEGIC CONTEXT:** This shows you're listening and helps you understand the root issue
-**KEY TALKING POINTS:** 
-- Validate their perspective
-- Ask about underlying needs
-- Share relevant experience if applicable
-**POTENTIAL RESPONSES:** They may elaborate on concerns or ask about your experience
-**NEXT STEPS:** Based on their response, either address concerns or pivot to solution discussion
-**WATCH FOR:** Emotional signals, buying signals, or resistance indicators`,
-        },
-
-        CONVERSATIONAL: {
-            FORMAT: `**CONVERSATIONAL RESPONSE FORMAT:**
-
-Provide guidance in a natural, flowing style that integrates:
-- Immediate tactical advice seamlessly woven into strategic context
-- Specific word choices and phrasing suggestions
-- Emotional and relational considerations
-- Multiple options based on how the conversation develops
-
-Focus on readability and practical application rather than rigid structure.`,
-
-            EXAMPLE: `I'd recommend acknowledging their concern directly - something like "I can understand why that would be important to you" - which validates their perspective while opening the door for deeper discussion. 
-
-From there, you could ask a strategic question like "What would need to be true for you to feel confident moving forward?" This shifts the conversation from problems to solutions while showing you're genuinely interested in their success.
-
-Watch their body language and tone when you ask this - if they lean in and engage, you're building trust. If they seem hesitant, you might need to address underlying concerns first before moving to solution mode.`,
-        },
-
-        BULLET_POINTS: {
-            FORMAT: `**BULLET POINT RESPONSE FORMAT:**
-
-• **Immediate Action:** [Quick, specific guidance]
-• **Key Message:** [Main point to communicate]
-• **Strategic Question:** [Question to advance conversation]
-• **Watch For:** [Important signals]
-• **If/Then Scenarios:** [Conditional responses]
-• **Next Steps:** [Clear progression options]`,
-
-            EXAMPLE: `• **Immediate Action:** Pause, acknowledge their concern, ask clarifying question
-• **Key Message:** "I understand this is important - help me understand what success looks like for you"
-• **Strategic Question:** "What would need to change for this to work better?"
-• **Watch For:** Level of engagement, emotional tone, specific objections mentioned
-• **If Engaged:** Move to solution exploration
-• **If Resistant:** Address underlying concerns first
-• **Next Steps:** Based on response, either problem-solve together or schedule follow-up`,
-        },
-
-        SCRIPT_LIKE: {
-            FORMAT: `**SCRIPT-LIKE RESPONSE FORMAT:**
-
-**WHAT TO SAY:** [Specific word-for-word suggestions]
-**WHY THIS WORKS:** [Strategic reasoning]
-**ALTERNATIVES:** [Different approaches for different scenarios]
-**FOLLOW-UP OPTIONS:** [Based on their response]
-**BODY LANGUAGE:** [Non-verbal considerations]`,
-
-            EXAMPLE: `**WHAT TO SAY:** "I appreciate you sharing that concern with me. Before I respond, can you help me understand what specifically worries you most about [specific issue]?"
-
-**WHY THIS WORKS:** The appreciation acknowledgment validates them, the pause shows respect, and the specific question gets to root concerns rather than surface objections.
-
-**ALTERNATIVES:** 
-- If they seem emotional: "I can see this is really important to you..."
-- If they seem analytical: "That's a great point - let me make sure I understand..."
-- If they seem rushed: "I want to address that properly - what's the main concern?"
-
-**FOLLOW-UP OPTIONS:** Based on their answer, either address the specific concern with evidence/examples, or ask another clarifying question if they're still being general.
-
-**BODY LANGUAGE:** Lean in slightly, maintain eye contact, keep an open posture, and nod to show you're actively listening.`,
-        },
-    },
-
-    EMOTIONAL_GUIDANCE: {
-        EMPATHY_FRAMEWORK: `**EMOTIONAL INTELLIGENCE GUIDANCE:**
-
-When providing emotional guidance, consider:
-
-**Emotional Awareness:**
-- What emotions are likely present for all parties?
-- How might stress, fear, or excitement be affecting judgment?
-- What emotional needs might be driving behavior?
-
-**Empathy Application:**
-- Acknowledge emotions before addressing logic
-- Validate feelings even when addressing behaviors
-- Consider the emotional impact of your suggested responses
-
-**Emotional Regulation:**
-- Help the user stay calm and centered
-- Suggest techniques for managing strong emotions
-- Provide strategies for de-escalation when needed
-
-**Relationship Dynamics:**
-- Consider how emotions affect the relationship long-term
-- Suggest approaches that build emotional connection
-- Address emotional barriers to effective communication`,
-
-        DE_ESCALATION: `**DE-ESCALATION TECHNIQUES:**
-
-When tensions are high:
-
-1. **Lower Your Voice:** Speak more softly to encourage them to match
-2. **Slow Down:** Reduce pace to create calming energy
-3. **Acknowledge Emotions:** "I can see this is really frustrating for you"
-4. **Find Common Ground:** "We both want to resolve this effectively"
-5. **Ask Permission:** "Would it be helpful if I shared a perspective?"
-6. **Take Breaks:** "Should we take a moment to reset?"
-7. **Focus on Solutions:** "What would help us move forward?"`,
-
-        DIFFICULT_EMOTIONS: `**HANDLING DIFFICULT EMOTIONS:**
-
-**When They're Angry:**
-- Don't take it personally or defend immediately
-- Acknowledge their feelings: "I can see you're really upset about this"
-- Ask about underlying concerns: "What's most important to you here?"
-- Focus on solutions: "How can we make this right?"
-
-**When They're Sad/Disappointed:**
-- Offer empathy: "This must be really disappointing"
-- Avoid immediately jumping to solutions
-- Ask how you can support: "What would be most helpful right now?"
-- Validate their experience: "Your feelings about this make complete sense"
-
-**When They're Anxious/Worried:**
-- Provide reassurance through information and clarity
-- Break down complex issues into manageable parts
-- Offer specific next steps and timelines
-- Address worst-case scenarios directly if appropriate`,
-    },
-
-    PROFESSIONAL_TIPS: {
-        BUSINESS_ETIQUETTE: `**PROFESSIONAL COMMUNICATION BEST PRACTICES:**
-
-**Email and Written Communication:**
-- Lead with context and purpose in subject lines
-- Use clear, concise language with proper formatting
-- Include specific next steps and deadlines
-- Follow up appropriately without being pushy
-
-**Meeting and Call Etiquette:**
-- Start and end on time
-- Have clear agendas and objectives
-- Encourage participation from all attendees
-- Document decisions and action items
-
-**Relationship Building:**
-- Remember personal details and follow up appropriately
-- Offer help and value before asking for anything
-- Maintain consistent communication rhythms
-- Respect boundaries and availability`,
-
-        INDUSTRY_CONSIDERATIONS: `**INDUSTRY-SPECIFIC GUIDANCE:**
-
-Consider industry norms and expectations:
-
-**Technology/Startup:**
-- Fast-paced, direct communication often preferred
-- Data-driven decision making
-- Innovation and disruption focus
-- Informal but efficient approach
-
-**Financial Services:**
-- Formal, compliance-aware communication
-- Risk assessment and mitigation focus
-- Relationship-based business development
-- Attention to regulatory requirements
-
-**Healthcare:**
-- Patient-centered, empathetic communication
-- Evidence-based approach
-- Confidentiality and privacy paramount
-- Collaborative care team dynamics
-
-**Manufacturing:**
-- Safety-first mindset
-- Operational efficiency focus
-- Quality and process improvement
-- Clear chain of command respect`,
-
-        LEGAL_CONSIDERATIONS: `**COMMUNICATION LEGAL AWARENESS:**
-
-**General Guidelines:**
-- Avoid discriminatory language or topics
-- Respect confidentiality and non-disclosure agreements
-- Document important business conversations
-- Be honest and avoid misleading statements
-
-**Employment Contexts:**
-- Focus on job-related qualifications and performance
-- Avoid personal questions about protected characteristics
-- Follow company policies on communication and harassment
-- Document performance and disciplinary conversations
-
-**Sales and Business Development:**
-- Make truthful claims about products and services
-- Honor pricing and contract commitments
-- Respect competitor confidentiality
-- Follow industry regulations and compliance requirements`,
-    },
-} as const;
-
-// Helper function to get appropriate templates based on context
-export function getContextualTemplates(callContext: string, callType: string) {
-    const systemPrompts = PROMPT_TEMPLATES.SYSTEM_PROMPTS;
-    const callTypeSpecific = PROMPT_TEMPLATES.CALL_TYPE_SPECIFIC;
-
-    return {
-        baseRole: systemPrompts.BASE_ROLE,
-        contextSpecific: systemPrompts[`${callContext.toUpperCase()}_CONTEXT` as keyof typeof systemPrompts],
-        callTypeSpecific: callTypeSpecific[callType.toUpperCase().replace('-', '_') as keyof typeof callTypeSpecific],
-        emotionalGuidance: PROMPT_TEMPLATES.EMOTIONAL_GUIDANCE,
-        professionalTips: PROMPT_TEMPLATES.PROFESSIONAL_TIPS,
-    };
-}
diff --git a/src/stores/hooks/useKnowledge.ts b/src/stores/hooks/useKnowledge.ts
deleted file mode 100644
index f861416..0000000
--- a/src/stores/hooks/useKnowledge.ts
+++ /dev/null
@@ -1,48 +0,0 @@
-import { useAppStore } from '../store';
-import { useShallow } from 'zustand/react/shallow';
-
-// Dedicated hook for knowledge base operations
-// Replaces your KnowledgeProvider useKnowledge hook
-export const useKnowledge = () => {
-    return useAppStore(
-        useShallow(state => ({
-            // State selectors
-            indexedDocumentsCount: state.indexedDocumentsCount,
-            knowledgeBaseName: state.knowledgeBaseName,
-            isLoading: state.isLoading,
-            error: state.error,
-            lastIndexedAt: state.lastIndexedAt,
-            indexingProgress: state.indexingProgress,
-            searchResults: state.searchResults,
-
-            // Action selectors
-            triggerIndexing: state.triggerIndexing,
-            searchRelevantKnowledge: state.searchRelevantKnowledge,
-            refreshIndexedDocumentsCount: state.refreshIndexedDocumentsCount,
-            initializeKnowledgeBase: state.initializeKnowledgeBase,
-        }))
-    );
-};
-
-// Selective hook for just indexing status
-export const useIndexingStatus = () => {
-    return useAppStore(
-        useShallow(state => ({
-            isIndexing: state.indexingProgress.isIndexing,
-            progress: state.indexingProgress.progress,
-            filesProcessed: state.indexingProgress.filesProcessed,
-            totalFiles: state.indexingProgress.totalFiles,
-            errors: state.indexingProgress.errors,
-        }))
-    );
-};
-
-// Selective hook for search functionality
-export const useKnowledgeSearch = () => {
-    return useAppStore(
-        useShallow(state => ({
-            searchResults: state.searchResults,
-            searchRelevantKnowledge: state.searchRelevantKnowledge,
-        }))
-    );
-};
diff --git a/src/stores/hooks/useLLM.ts b/src/stores/hooks/useLLM.ts
deleted file mode 100644
index f861416..0000000
--- a/src/stores/hooks/useLLM.ts
+++ /dev/null
@@ -1,48 +0,0 @@
-import { useAppStore } from '../store';
-import { useShallow } from 'zustand/react/shallow';
-
-// Dedicated hook for knowledge base operations
-// Replaces your KnowledgeProvider useKnowledge hook
-export const useKnowledge = () => {
-    return useAppStore(
-        useShallow(state => ({
-            // State selectors
-            indexedDocumentsCount: state.indexedDocumentsCount,
-            knowledgeBaseName: state.knowledgeBaseName,
-            isLoading: state.isLoading,
-            error: state.error,
-            lastIndexedAt: state.lastIndexedAt,
-            indexingProgress: state.indexingProgress,
-            searchResults: state.searchResults,
-
-            // Action selectors
-            triggerIndexing: state.triggerIndexing,
-            searchRelevantKnowledge: state.searchRelevantKnowledge,
-            refreshIndexedDocumentsCount: state.refreshIndexedDocumentsCount,
-            initializeKnowledgeBase: state.initializeKnowledgeBase,
-        }))
-    );
-};
-
-// Selective hook for just indexing status
-export const useIndexingStatus = () => {
-    return useAppStore(
-        useShallow(state => ({
-            isIndexing: state.indexingProgress.isIndexing,
-            progress: state.indexingProgress.progress,
-            filesProcessed: state.indexingProgress.filesProcessed,
-            totalFiles: state.indexingProgress.totalFiles,
-            errors: state.indexingProgress.errors,
-        }))
-    );
-};
-
-// Selective hook for search functionality
-export const useKnowledgeSearch = () => {
-    return useAppStore(
-        useShallow(state => ({
-            searchResults: state.searchResults,
-            searchRelevantKnowledge: state.searchRelevantKnowledge,
-        }))
-    );
-};
diff --git a/src/stores/hooks/useSelectors.ts b/src/stores/hooks/useSelectors.ts
deleted file mode 100644
index 77f155f..0000000
--- a/src/stores/hooks/useSelectors.ts
+++ /dev/null
@@ -1,148 +0,0 @@
-import { useAppStore } from '../store';
-import { useShallow } from 'zustand/react/shallow';
-import { useMemo } from 'react';
-
-// Optimized hook to replace KnowledgeProvider
-export const useKnowledge = () => {
-    return useAppStore(
-        useShallow(state => ({
-            // State
-            indexedDocumentsCount: state.indexedDocumentsCount,
-            knowledgeBaseName: state.knowledgeBaseName,
-            isLoading: state.isLoading,
-            error: state.error,
-            lastIndexedAt: state.lastIndexedAt,
-            indexingProgress: state.indexingProgress,
-            searchResults: state.searchResults,
-
-            // Actions
-            triggerIndexing: state.triggerIndexing,
-            searchRelevantKnowledge: state.searchRelevantKnowledge,
-            refreshIndexedDocumentsCount: state.refreshIndexedDocumentsCount,
-        }))
-    );
-};
-
-// Optimized hook to replace useLLMProviderOptimized
-export const useLLM = () => {
-    return useAppStore(
-        useShallow(state => ({
-            // State
-            isGenerating: state.isGenerating,
-            currentStreamId: state.currentStreamId,
-            conversationSummary: state.conversationSummary,
-            conversationSuggestions: state.conversationSuggestions,
-
-            // Actions
-            generateResponse: state.generateResponse,
-            generateSuggestions: state.generateSuggestions,
-            stopStreaming: state.stopStreaming,
-            clearConversation: state.clearConversation,
-        }))
-    );
-};
-
-// Optimized hook for speech recognition
-export const useSpeech = () => {
-    return useAppStore(
-        useShallow(state => ({
-            // State
-            isRecording: state.isRecording,
-            isProcessing: state.isProcessing,
-            recognitionStatus: state.recognitionStatus,
-            error: state.error,
-            currentTranscript: state.currentTranscript,
-            interimTranscripts: state.interimTranscripts,
-
-            // Actions
-            startRecording: state.startRecording,
-            stopRecording: state.stopRecording,
-            processAudioSession: state.processAudioSession,
-            clearTranscripts: state.clearTranscripts,
-            handleRecognitionResult: state.handleRecognitionResult,
-            clearError: state.clearError,
-        }))
-    );
-};
-
-// Optimized hook for interview context
-export const useInterview = () => {
-    return useAppStore(
-        useShallow(state => ({
-            // State
-            context: state.context,
-            isModalOpen: state.isModalOpen,
-            currentStep: state.currentStep,
-            validationErrors: state.validationErrors,
-
-            // Actions
-            setInterviewContext: state.setInterviewContext,
-            openInterviewModal: state.openInterviewModal,
-            closeInterviewModal: state.closeInterviewModal,
-            updateInterviewField: state.updateInterviewField,
-            validateContext: state.validateContext,
-        }))
-    );
-};
-
-// Optimized hook for UI state
-export const useUI = () => {
-    return useAppStore(
-        useShallow(state => ({
-            // State
-            theme: state.theme,
-            notifications: state.notifications,
-            modals: state.modals,
-            isLoading: state.isLoading,
-            loadingMessage: state.loadingMessage,
-
-            // Actions
-            setTheme: state.setTheme,
-            addNotification: state.addNotification,
-            removeNotification: state.removeNotification,
-            openModal: state.openModal,
-            closeModal: state.closeModal,
-            setLoading: state.setLoading,
-        }))
-    );
-};
-
-// Selective hooks for specific data
-export const useStreamingResponse = (streamId: string) => {
-    return useAppStore(state => state.streamingResponses.get(streamId));
-};
-
-export const useConversationMessages = (conversationId: string = 'main') => {
-    return useAppStore(state => state.conversations.get(conversationId)?.messages || []);
-};
-
-export const useNotificationCount = () => {
-    return useAppStore(state => state.notifications.length);
-};
-
-// Computed selectors with memoization
-export const useSearchResultsWithHighlight = (searchTerm: string) => {
-    const searchResults = useAppStore(state => state.searchResults);
-
-    return useMemo(() => {
-        if (!searchTerm) return searchResults;
-
-        return searchResults.map(result => ({
-            ...result,
-            highlightedText: result.text.replace(new RegExp(searchTerm, 'gi'), match => `<mark>${match}</mark>`),
-        }));
-    }, [searchResults, searchTerm]);
-};
-
-// Export all hooks for clean imports
-export {
-    useKnowledge,
-    useLLM,
-    useSpeech,
-    useInterview,
-    useUI,
-    useStreamingResponse,
-    useConversationMessages,
-    useNotificationCount,
-    useSearchResultsWithHighlight,
-};
diff --git a/src/stores/hooks/useSpeech.ts b/src/stores/hooks/useSpeech.ts
deleted file mode 100644
index 0a41487..0000000
--- a/src/stores/hooks/useSpeech.ts
+++ /dev/null
@@ -1,52 +0,0 @@
-import { useAppStore } from '../store';
-import { useShallow } from 'zustand/react/shallow';
-
-// Dedicated hook for speech recognition operations
-// Replaces your speech recognition useState patterns
-export const useSpeech = () => {
-    return useAppStore(
-        useShallow(state => ({
-            // State selectors
-            isRecording: state.isRecording,
-            isProcessing: state.isProcessing,
-            recognitionStatus: state.recognitionStatus,
-            error: state.error,
-            currentTranscript: state.currentTranscript,
-            interimTranscripts: state.interimTranscripts,
-            audioSessions: state.audioSessions,
-
-            // Action selectors
-            startRecording: state.startRecording,
-            stopRecording: state.stopRecording,
-            processAudioSession: state.processAudioSession,
-            clearTranscripts: state.clearTranscripts,
-            handleRecognitionResult: state.handleRecognitionResult,
-            clearError: state.clearError,
-        }))
-    );
-};
-
-// Selective hook for recording status
-export const useRecordingStatus = () => {
-    return useAppStore(
-        useShallow(state => ({
-            isRecording: state.isRecording,
-            isProcessing: state.isProcessing,
-            recognitionStatus: state.recognitionStatus,
-            error: state.error,
-        }))
-    );
-};
-
-// Selective hook for transcription management
-export const useTranscriptionManager = () => {
-    return useAppStore(
-        useShallow(state => ({
-            currentTranscript: state.currentTranscript,
-            interimTranscripts: state.interimTranscripts,
-            audioSessions: state.audioSessions,
-            clearTranscripts: state.clearTranscripts,
-            processAudioSession: state.processAudioSession,
-        }))
-    );
-};
diff --git a/src/stores/middlewares/errorHandlingMiddleware.ts b/src/stores/middlewares/errorHandlingMiddleware.ts
deleted file mode 100644
index e69de29..0000000
diff --git a/src/stores/middlewares/performanceMiddleware.ts b/src/stores/middlewares/performanceMiddleware.ts
deleted file mode 100644
index 7e393f6..0000000
--- a/src/stores/middlewares/performanceMiddleware.ts
+++ /dev/null
@@ -1,34 +0,0 @@
-// Performance monitoring middleware for development and optimization
-import { StateCreator } from 'zustand'
-import { AppState } from '@/types/store'
-import { logger } from '@/modules'
-
-export const performanceMiddleware = <T extends AppState>(
-  config: StateCreator<T>
-): StateCreator<T> => (set, get, api) => {
-  const wrappedSet = (...args: Parameters<typeof set>) => {
-    const start = performance.now()
-    const result = set(...args)
-    const duration = performance.now() - start
-    
-    // Log slow state updates (longer than one frame)
-    if (duration > 16.67) {
-      logger.warning(`Slow state update detected: ${duration.toFixed(2)}ms`)
-      console.trace('Slow state update trace')
-    }
-    
-    // Track state update frequency in development
-    if (process.env.NODE_ENV === 'development') {
-      const updateCount = (window as any).__zustand_update_count || 0
-      (window as any).__zustand_update_count = updateCount + 1
-      
-      if (updateCount % 100 === 0) {
-        logger.info(`State update count: ${updateCount}`)
-      }
-    }
-    
-    return result
-  }
-  
-  return config(wrappedSet, get, api)
-}
diff --git a/src/stores/middlewares/persistenceMiddleware.ts b/src/stores/middlewares/persistenceMiddleware.ts
deleted file mode 100644
index 41f3958..0000000
--- a/src/stores/middlewares/persistenceMiddleware.ts
+++ /dev/null
@@ -1,37 +0,0 @@
-// Custom persistence middleware for specialized data handling
-import { PersistOptions } from 'zustand/middleware';
-import { AppState } from '@/types/store';
-
-export const createPersistenceConfig = (): PersistOptions<AppState> => ({
-    name: 'audio-transcription-app',
-    partialize: state => ({
-        // Only persist essential user preferences and context
-        theme: state.theme,
-        context: state.context,
-        lastIndexedAt: state.lastIndexedAt,
-        knowledgeBaseName: state.knowledgeBaseName,
-        indexedDocumentsCount: state.indexedDocumentsCount,
-        conversationSummary: state.conversationSummary,
-        // Convert Maps to arrays for JSON serialization
-        conversations: Array.from(state.conversations.entries()),
-    }),
-    onRehydrateStorage: () => state => {
-        // Restore Maps from persisted arrays
-        if (state?.conversations) {
-            state.conversations = new Map(state.conversations);
-        }
-        // Initialize non-persisted state
-        if (!state.streamingResponses) {
-            state.streamingResponses = new Map();
-        }
-        if (!state.audioSessions) {
-            state.audioSessions = new Map();
-        }
-        if (!state.notifications) {
-            state.notifications = [];
-        }
-        if (!state.modals) {
-            state.modals = {};
-        }
-    },
-});
diff --git a/src/stores/slices/index.ts b/src/stores/slices/index.ts
deleted file mode 100644
index 5bc64a3..0000000
--- a/src/stores/slices/index.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-// Export all store slices for clean imports
-export { createKnowledgeSlice } from './knowledgeSlice';
-export { createLLMSlice } from './llmSlice';
-export { createSpeechSlice } from './speechSlice';
-export { createInterviewSlice } from './interviewSlice';
-export { createUISlice } from './uiSlice';
diff --git a/src/stores/slices/interviewSlice.ts b/src/stores/slices/interviewSlice.ts
deleted file mode 100644
index a25d92c..0000000
--- a/src/stores/slices/interviewSlice.ts
+++ /dev/null
@@ -1,105 +0,0 @@
-import { StateCreator } from 'zustand';
-import { AppState, InterviewSlice } from '@/types/store';
-import { InitialInterviewContext } from '@/types';
-import { logger } from '@/modules';
-
-export const createInterviewSlice: StateCreator<AppState, [], [], InterviewSlice> = (set, get) => ({
-    // Initialize state - replaces interview modal state management
-    context: null,
-    isModalOpen: false,
-    currentStep: 'interview',
-    validationErrors: {},
-
-    // Set interview context - replaces your interview setup logic
-    setInterviewContext: (context: InitialInterviewContext) => {
-        logger.info('🎯 Setting interview context:', {
-            role: context.targetRole,
-            company: context.targetCompany,
-            type: context.interviewType,
-        });
-
-        set({
-            context,
-            validationErrors: {},
-        });
-
-        get().addNotification({
-            type: 'success',
-            message: `Interview profile set: ${context.targetRole} at ${context.targetCompany}`,
-            duration: 5000,
-        });
-    },
-
-    openInterviewModal: () => {
-        set({ isModalOpen: true, currentStep: 'interview' });
-        logger.info('📝 Opened interview setup modal');
-    },
-
-    closeInterviewModal: () => {
-        set({ isModalOpen: false });
-        logger.info('❌ Closed interview setup modal');
-    },
-
-    // Update interview field - replaces your form management
-    updateInterviewField: <K extends keyof InitialInterviewContext>(field: K, value: InitialInterviewContext[K]) => {
-        const currentContext = get().context;
-        if (!currentContext) {
-            logger.warning('⚠️ No interview context to update');
-            return;
-        }
-
-        const updatedContext = {
-            ...currentContext,
-            [field]: value,
-        };
-
-        set({
-            context: updatedContext,
-            // Clear validation errors for this field
-            validationErrors: {
-                ...get().validationErrors,
-                [field as string]: undefined,
-            },
-        });
-
-        logger.debug(`📝 Updated interview field: ${field}`);
-    },
-
-    // Validate context - replaces your validation logic
-    validateContext: () => {
-        const context = get().context;
-        const errors: Record<string, string> = {};
-
-        if (!context) {
-            errors.general = 'Interview context is required';
-            set({ validationErrors: errors });
-            return false;
-        }
-
-        if (!context.targetRole?.trim()) {
-            errors.targetRole = 'Target role is required';
-        }
-
-        if (!context.targetCompany?.trim()) {
-            errors.targetCompany = 'Target company is required';
-        }
-
-        if (!context.interviewType) {
-            errors.interviewType = 'Interview type is required';
-        }
-
-        const isValid = Object.keys(errors).length === 0;
-
-        set({ validationErrors: errors });
-
-        if (!isValid) {
-            get().addNotification({
-                type: 'error',
-                message: 'Please complete all required fields',
-                duration: 5000,
-            });
-        }
-
-        return isValid;
-    },
-});
diff --git a/src/stores/slices/knowledgeSlice.ts b/src/stores/slices/knowledgeSlice.ts
deleted file mode 100644
index df4672f..0000000
--- a/src/stores/slices/knowledgeSlice.ts
+++ /dev/null
@@ -1,218 +0,0 @@
-import { StateCreator } from 'zustand';
-import { AppState, KnowledgeSlice } from '@/types/store';
-import {
-    initQdrantClient,
-    ensureKnowledgeCollection,
-    searchRelevantChunks,
-    countKnowledgePoints,
-    KNOWLEDGE_COLLECTION_NAME,
-} from '@/services/QdrantService';
-import { logger } from '@/modules';
-
-export const createKnowledgeSlice: StateCreator<AppState, [], [], KnowledgeSlice> = (set, get) => ({
-    // Initialize state - this replaces your KnowledgeProvider initial state
-    indexedDocumentsCount: 0,
-    knowledgeBaseName: `Qdrant Collection: ${KNOWLEDGE_COLLECTION_NAME}`,
-    isLoading: false,
-    error: null,
-    lastIndexedAt: null,
-    indexingProgress: {
-        filesProcessed: 0,
-        totalFiles: 0,
-        errors: [],
-        progress: '',
-    },
-    searchResults: [],
-
-    // This replaces your KnowledgeProvider's initializeKnowledgeBase
-    initializeKnowledgeBase: async () => {
-        set({ isLoading: true, error: null });
-
-        try {
-            logger.info('Initializing knowledge base with Zustand...');
-
-            initQdrantClient();
-            await ensureKnowledgeCollection();
-
-            const currentPointsCount = await countKnowledgePoints();
-
-            set({
-                indexedDocumentsCount: currentPointsCount,
-                isLoading: false,
-            });
-
-            if (currentPointsCount === 0) {
-                logger.warning('Knowledge base is empty. Consider running indexing.');
-                get().addNotification({
-                    type: 'warning',
-                    message: 'Knowledge base is empty. Click "Index Knowledge" to get started.',
-                    duration: 8000,
-                });
-            } else {
-                logger.info(`Knowledge base ready: ${currentPointsCount} documents indexed`);
-                get().addNotification({
-                    type: 'success',
-                    message: `Knowledge base ready with ${currentPointsCount} indexed documents`,
-                    duration: 5000,
-                });
-            }
-        } catch (error) {
-            const errorMessage = error instanceof Error ? error.message : 'Unknown initialization error';
-            logger.error('Knowledge base initialization failed:', error);
-
-            set({
-                error: errorMessage,
-                isLoading: false,
-            });
-
-            get().addNotification({
-                type: 'error',
-                message: `Knowledge base initialization failed: ${errorMessage}`,
-                duration: 10000,
-            });
-        }
-    },
-
-    // This replaces your KnowledgeProvider's triggerIndexing
-    triggerIndexing: async () => {
-        set(state => ({
-            indexingProgress: {
-                ...state.indexingProgress,
-                isIndexing: true,
-                progress: 'Starting knowledge indexing...',
-                errors: [],
-            },
-        }));
-
-        get().addNotification({
-            type: 'info',
-            message: 'Knowledge indexing started...',
-            duration: 3000,
-        });
-
-        try {
-            const response = await fetch('/api/knowledge/index-knowledge', {
-                method: 'POST',
-                headers: { 'Content-Type': 'application/json' },
-            });
-
-            const result = await response.json();
-
-            if (!response.ok) {
-                throw new Error(result.error || `HTTP ${response.status}: ${response.statusText}`);
-            }
-
-            // Update indexing progress
-            set(state => ({
-                indexingProgress: {
-                    filesProcessed: result.filesProcessed || 0,
-                    totalFiles: result.filesProcessed || 0,
-                    errors: result.errors || [],
-                    progress: 'Indexing completed successfully!',
-                    isIndexing: false,
-                },
-                lastIndexedAt: new Date(),
-            }));
-
-            // Refresh the indexed count
-            await get().refreshIndexedDocumentsCount();
-
-            // Notify user of success
-            const hasErrors = result.errors && result.errors.length > 0;
-            get().addNotification({
-                type: hasErrors ? 'warning' : 'success',
-                message: hasErrors
-                    ? `Indexing completed with ${result.errors.length} errors. ${result.filesProcessed} files processed.`
-                    : `Successfully indexed ${result.filesProcessed} documents!`,
-                duration: hasErrors ? 10000 : 5000,
-            });
-
-            return !hasErrors;
-        } catch (error) {
-            const errorMessage = error instanceof Error ? error.message : 'Unknown indexing error';
-            logger.error('Knowledge indexing failed:', error);
-
-            set(state => ({
-                indexingProgress: {
-                    ...state.indexingProgress,
-                    progress: `Indexing failed: ${errorMessage}`,
-                    errors: [errorMessage],
-                    isIndexing: false,
-                },
-                error: errorMessage,
-            }));
-
-            get().addNotification({
-                type: 'error',
-                message: `Knowledge indexing failed: ${errorMessage}`,
-                duration: 10000,
-            });
-
-            return false;
-        }
-    },
-
-    // This replaces your KnowledgeProvider's searchRelevantKnowledge
-    searchRelevantKnowledge: async (query: string, limit = 3) => {
-        if (get().error) {
-            logger.error('Cannot search: Knowledge base has errors');
-            return [];
-        }
-
-        logger.debug(`Searching knowledge base for: "${query.substring(0, 50)}${query.length > 50 ? '...' : ''}"`);
-
-        try {
-            const startTime = performance.now();
-            const results = await searchRelevantChunks(query, limit);
-            const searchTime = Math.round(performance.now() - startTime);
-
-            set({ searchResults: results });
-
-            logger.info(`Knowledge search completed in ${searchTime}ms. Found ${results.length} relevant chunks.`);
-
-            if (results.length === 0) {
-                get().addNotification({
-                    type: 'warning',
-                    message: 'No relevant knowledge found for your query. Try different search terms.',
-                    duration: 5000,
-                });
-            }
-
-            return results;
-        } catch (error) {
-            const errorMessage = error instanceof Error ? error.message : 'Unknown search error';
-            logger.error('Knowledge search failed:', error);
-
-            set({ error: errorMessage });
-
-            get().addNotification({
-                type: 'error',
-                message: `Knowledge search failed: ${errorMessage}`,
-                duration: 8000,
-            });
-
-            return [];
-        }
-    },
-
-    // This replaces your KnowledgeProvider's refreshIndexedDocumentsCount
-    refreshIndexedDocumentsCount: async () => {
-        try {
-            logger.debug('Refreshing indexed documents count...');
-            const currentPointsCount = await countKnowledgePoints();
-
-            set({ indexedDocumentsCount: currentPointsCount });
-
-            logger.debug(`Updated indexed count: ${currentPointsCount} documents`);
-        } catch (error) {
-            const errorMessage = error instanceof Error ? error.message : 'Count refresh failed';
-            logger.error('Failed to refresh indexed count:', error);
-
-            get().addNotification({
-                type: 'error',
-                message: 'Failed to refresh document count',
-                duration: 3000,
-            });
-        }
-    },
-});
diff --git a/src/stores/slices/llmSlice.ts b/src/stores/slices/llmSlice.ts
deleted file mode 100644
index c99b4d4..0000000
--- a/src/stores/slices/llmSlice.ts
+++ /dev/null
@@ -1,391 +0,0 @@
-import { StateCreator } from 'zustand';
-import { AppState, LLMSlice } from '@/types/store';
-import { OpenAILLMService } from '@/services/OpenAILLMService';
-import {
-    createSystemPrompt,
-    createUserPrompt,
-    createAnalysisSystemPrompt,
-    createAnalysisUserPrompt,
-    createGenerationSystemPrompt,
-    createGenerationUserPrompt,
-} from '@/utils';
-import { logger } from '@/modules';
-import { v4 as uuidv4 } from 'uuid';
-
-export const createLLMSlice: StateCreator<AppState, [], [], LLMSlice> = (set, get) => ({
-    // Initialize state - this replaces your useLLMProviderOptimized state
-    conversations: new Map(),
-    streamingResponses: new Map(),
-    isGenerating: false,
-    currentStreamId: null,
-    conversationSummary: '',
-    conversationSuggestions: {
-        powerUpContent: '',
-        lastAnalysis: undefined,
-        analysisHistory: [],
-    },
-
-    // This replaces your generateResponse function with streaming support
-    generateResponse: async (userMessage: string) => {
-        const streamId = uuidv4();
-
-        set({
-            isGenerating: true,
-            currentStreamId: streamId,
-        });
-
-        get().setLoading(true, 'Generating response...');
-
-        try {
-            // Get interview context and search knowledge base
-            const interviewContext = get().context;
-            const knowledgeResults = await get().searchRelevantKnowledge(userMessage, 3);
-
-            if (!interviewContext) {
-                throw new Error('Interview context not configured. Please set up your interview profile.');
-            }
-
-            // Build knowledge context from search results
-            const knowledgeContext =
-                knowledgeResults.length > 0
-                    ? knowledgeResults
-                          .map(
-                              chunk =>
-                                  `--- Relevant Information from ${chunk.source} ---\n${chunk.text}\n--- End Information ---`
-                          )
-                          .join('\n\n')
-                    : 'No specific knowledge context found for this query.';
-
-            // Create prompts using your existing utility functions
-            const systemPrompt = await createSystemPrompt(interviewContext, interviewContext.goals || []);
-            const userPrompt = await createUserPrompt(userMessage, get().conversationSummary, knowledgeContext);
-
-            // Initialize LLM service
-            const apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY;
-            if (!apiKey) {
-                throw new Error('OpenAI API key not configured');
-            }
-
-            const llmService = new OpenAILLMService(apiKey);
-
-            // Prepare messages for API
-            const messages = [
-                { role: 'system' as const, content: systemPrompt },
-                { role: 'user' as const, content: userPrompt },
-            ];
-
-            // Start streaming response - this preserves your streaming functionality
-            let accumulatedContent = '';
-            let chunkCount = 0;
-
-            logger.info(`Starting LLM response generation (Stream ID: ${streamId})`);
-
-            for await (const chunk of llmService.generateStreamedResponse(messages, {
-                model: 'gpt-4o',
-                temperature: 0.7,
-            })) {
-                accumulatedContent += chunk;
-                chunkCount++;
-
-                // Update streaming response in real-time
-                set(state => ({
-                    streamingResponses: new Map(state.streamingResponses).set(streamId, {
-                        content: accumulatedContent,
-                        isComplete: false,
-                        timestamp: Date.now(),
-                    }),
-                }));
-
-                // Update loading message periodically
-                if (chunkCount % 10 === 0) {
-                    get().setLoading(true, `Generating response... (${accumulatedContent.length} characters)`);
-                }
-            }
-
-            // Mark streaming as complete
-            set(state => ({
-                streamingResponses: new Map(state.streamingResponses).set(streamId, {
-                    content: accumulatedContent,
-                    isComplete: true,
-                    timestamp: Date.now(),
-                }),
-                isGenerating: false,
-                currentStreamId: null,
-            }));
-
-            // Store in conversation history
-            const conversationId = 'main'; // You can make this dynamic based on context
-            const conversation = get().conversations.get(conversationId) || {
-                id: conversationId,
-                messages: [],
-                createdAt: new Date(),
-                lastUpdated: new Date(),
-            };
-
-            conversation.messages.push(
-                {
-                    content: userMessage,
-                    type: 'user' as const,
-                    timestamp: new Date().toISOString(),
-                },
-                {
-                    content: accumulatedContent,
-                    type: 'assistant' as const,
-                    timestamp: new Date().toISOString(),
-                }
-            );
-            conversation.lastUpdated = new Date();
-
-            set(state => ({
-                conversations: new Map(state.conversations).set(conversationId, conversation),
-            }));
-
-            get().setLoading(false);
-
-            logger.info(`LLM response completed: ${accumulatedContent.length} characters, ${chunkCount} chunks`);
-
-            get().addNotification({
-                type: 'success',
-                message: 'Response generated successfully',
-                duration: 3000,
-            });
-
-            // Auto-trigger conversation summary update
-            get().summarizeConversation(conversation.messages);
-        } catch (error) {
-            set({
-                isGenerating: false,
-                currentStreamId: null,
-            });
-
-            get().setLoading(false);
-
-            const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
-            logger.error('LLM response generation failed:', error);
-
-            get().addNotification({
-                type: 'error',
-                message: `Failed to generate response: ${errorMessage}`,
-                duration: 10000,
-            });
-
-            // Clean up any partial streaming response
-            if (streamId) {
-                set(state => ({
-                    streamingResponses: new Map([...state.streamingResponses].filter(([id]) => id !== streamId)),
-                }));
-            }
-        }
-    },
-
-    // This replaces your generateSuggestions function with your sophisticated analysis pipeline
-    generateSuggestions: async () => {
-        if (get().isGenerating) {
-            logger.warning('Already generating content, skipping suggestions');
-            return;
-        }
-
-        set({ isGenerating: true });
-        get().setLoading(true, 'Generating strategic intelligence...');
-
-        try {
-            const interviewContext = get().context;
-            const conversation = get().conversations.get('main');
-
-            if (!interviewContext) {
-                throw new Error('Interview context required for suggestions');
-            }
-
-            // Build context for strategic analysis - preserving your existing logic
-            const contextMessage = conversation?.messages[conversation.messages.length - 1]?.content || '';
-            const knowledgeResults = await get().searchRelevantKnowledge(contextMessage, 3);
-            const knowledgeContext = knowledgeResults
-                .map(chunk => `--- ${chunk.source} ---\n${chunk.text}`)
-                .join('\n\n');
-
-            const previousAnalysisHistory = get().conversationSuggestions.analysisHistory || [];
-
-            // Stage 1: Strategic Analysis - using your existing prompts
-            logger.info('Stage 1: Strategic opportunity analysis');
-
-            const apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY;
-            if (!apiKey) throw new Error('OpenAI API key not configured');
-
-            const llmService = new OpenAILLMService(apiKey);
-
-            const analysisUserPrompt = await createAnalysisUserPrompt(
-                get().conversationSummary,
-                interviewContext,
-                knowledgeContext,
-                previousAnalysisHistory
-            );
-
-            const analysisMessages = [
-                { role: 'system' as const, content: createAnalysisSystemPrompt },
-                { role: 'user' as const, content: analysisUserPrompt },
-            ];
-
-            const analysisContent = await llmService.generateCompleteResponse(analysisMessages, {
-                model: 'gpt-4o-mini',
-                temperature: 0.3,
-            });
-
-            logger.info('Strategic analysis completed');
-
-            // Parse strategic analysis results - preserving your existing logic
-            let strategicAnalysis;
-            try {
-                const jsonMatch = analysisContent.match(/\{[\s\S]*\}/) || [analysisContent];
-                strategicAnalysis = JSON.parse(jsonMatch[0]);
-            } catch (parseError) {
-                logger.error('Analysis parsing failed:', parseError);
-
-                // Fallback strategic analysis
-                strategicAnalysis = {
-                    strategic_opportunity: 'thought_leadership',
-                    focus_area: 'Strategic positioning and industry expertise',
-                    insight_potential: 'Industry insights and strategic positioning opportunities',
-                    knowledge_leverage: 'Combine LLM knowledge with available context for strategic insights',
-                    differentiation_angle: 'Demonstrate advanced strategic thinking and industry expertise',
-                    research_suggestions: 'Industry trends, competitive landscape, real-world examples',
-                };
-            }
-
-            // Stage 2: Strategic Intelligence Generation
-            logger.info('Stage 2: Generating strategic intelligence');
-
-            const generationUserPrompt = await createGenerationUserPrompt(
-                strategicAnalysis,
-                interviewContext,
-                knowledgeContext,
-                previousAnalysisHistory
-            );
-
-            const generationMessages = [
-                { role: 'system' as const, content: createGenerationSystemPrompt },
-                { role: 'user' as const, content: generationUserPrompt },
-            ];
-
-            const strategicIntelligence = await llmService.generateCompleteResponse(generationMessages, {
-                model: 'gpt-4o-mini',
-                temperature: 0.7,
-            });
-
-            if (strategicIntelligence) {
-                // Create enhanced analysis preview for history
-                const analysisPreview = {
-                    strategic_opportunity: strategicAnalysis.strategic_opportunity,
-                    focus_area: strategicAnalysis.focus_area,
-                    insight_summary: strategicAnalysis.insight_potential,
-                    timestamp: Date.now(),
-                };
-
-                // Update history (keep last 3 entries to prevent infinite growth)
-                const updatedHistory = [...previousAnalysisHistory, analysisPreview].slice(-3);
-
-                set({
-                    conversationSuggestions: {
-                        powerUpContent: strategicIntelligence,
-                        lastAnalysis: strategicAnalysis,
-                        analysisHistory: updatedHistory,
-                    },
-                    isGenerating: false,
-                });
-
-                get().setLoading(false);
-
-                logger.info(`Strategic intelligence generated: ${strategicIntelligence.length} characters`);
-
-                get().addNotification({
-                    type: 'success',
-                    message: `Generated ${strategicAnalysis.strategic_opportunity} intelligence`,
-                    duration: 5000,
-                });
-            } else {
-                throw new Error('Empty strategic intelligence generation');
-            }
-        } catch (error) {
-            logger.error('Strategic intelligence generation failed:', error);
-
-            set({ isGenerating: false });
-            get().setLoading(false);
-
-            // Enhanced fallback with strategic intelligence theme
-            const fallbackContent = `# 🧠 Strategic Intelligence Boost
-
-## 🎯 Strategic Positioning
-You're in an excellent position to demonstrate thought leadership and strategic thinking.
-
-## 💡 Key Strategic Assets
-- **Your Experience**: Leverage specific examples that show strategic impact
-- **Industry Knowledge**: Position yourself as someone who understands market dynamics
-- **Future Vision**: Demonstrate forward-thinking about industry evolution
-- **Problem-Solving**: Show how you approach complex strategic challenges
-
-## 🗣️ Strategic Communication
-"That's an excellent strategic question. Based on my experience with [relevant context], I see this as an opportunity to..."
-
-## 🚀 Competitive Advantage
-Your combination of experience and strategic thinking sets you apart from other candidates.`;
-
-            set({
-                conversationSuggestions: {
-                    powerUpContent: fallbackContent,
-                    analysisHistory: get().conversationSuggestions.analysisHistory || [],
-                },
-            });
-
-            get().addNotification({
-                type: 'warning',
-                message: 'Used fallback strategic intelligence due to generation error',
-                duration: 8000,
-            });
-        }
-    },
-
-    // Conversation summarization - preserving your existing logic
-    summarizeConversation: async messages => {
-        if (messages.length === 0) return;
-
-        try {
-            // Implementation would use your existing summarization logic
-            logger.info('Updating conversation summary');
-
-            // This would call your existing summarization utilities
-            // For now, create a simple summary
-            const summary = `Conversation with ${
-                messages.length
-            } messages, last updated: ${new Date().toLocaleTimeString()}`;
-
-            set({ conversationSummary: summary });
-        } catch (error) {
-            logger.error('Conversation summarization failed:', error);
-        }
-    },
-
-    stopStreaming: (streamId: string) => {
-        set(state => ({
-            streamingResponses: new Map([...state.streamingResponses].filter(([id]) => id !== streamId)),
-            isGenerating: state.currentStreamId === streamId ? false : state.isGenerating,
-            currentStreamId: state.currentStreamId === streamId ? null : state.currentStreamId,
-        }));
-
-        get().setLoading(false);
-        logger.info(`Stopped streaming for: ${streamId}`);
-    },
-
-    clearConversation: (conversationId: string) => {
-        set(state => ({
-            conversations: new Map([...state.conversations].filter(([id]) => id !== conversationId)),
-            conversationSummary: conversationId === 'main' ? '' : state.conversationSummary,
-        }));
-
-        logger.info(`Cleared conversation: ${conversationId}`);
-
-        get().addNotification({
-            type: 'info',
-            message: 'Conversation cleared',
-            duration: 3000,
-        });
-    },
-});
diff --git a/src/stores/slices/speechSlice.ts b/src/stores/slices/speechSlice.ts
deleted file mode 100644
index 4f91124..0000000
--- a/src/stores/slices/speechSlice.ts
+++ /dev/null
@@ -1,151 +0,0 @@
-import { StateCreator } from 'zustand';
-import { AppState, SpeechState } from '@/types/store';
-import { logger } from '@/modules';
-
-export const createSpeechSlice: StateCreator<AppState, [], [], SpeechState> = (set, get) => ({
-    isRecording: false,
-    isProcessing: false,
-    audioData: null,
-    transcriptionResults: new Map(),
-    recognitionStatus: 'inactive',
-    error: null,
-
-    startRecording: async () => {
-        try {
-            set({ error: null });
-
-            // Request microphone permission
-            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
-
-            const mediaRecorder = new MediaRecorder(stream, {
-                mimeType: 'audio/webm;codecs=opus',
-            });
-
-            const audioChunks: Blob[] = [];
-
-            mediaRecorder.ondataavailable = event => {
-                if (event.data.size > 0) {
-                    audioChunks.push(event.data);
-                }
-            };
-
-            mediaRecorder.onstop = () => {
-                const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
-                set({ audioData: audioBlob, isRecording: false });
-
-                // Automatically process the audio
-                get().processAudio();
-            };
-
-            mediaRecorder.start();
-
-            set({
-                isRecording: true,
-                recognitionStatus: 'active',
-                audioData: null,
-            });
-
-            // Store mediaRecorder reference for stopping
-            // In a real implementation, you'd store this in the state
-
-            logger.info('Started audio recording');
-        } catch (error) {
-            const errorMessage = error instanceof Error ? error.message : 'Failed to start recording';
-
-            set({
-                error: errorMessage,
-                isRecording: false,
-                recognitionStatus: 'error',
-            });
-
-            get().addNotification({
-                type: 'error',
-                message: `Recording failed: ${errorMessage}`,
-                duration: 5000,
-            });
-
-            logger.error('Failed to start recording:', error);
-        }
-    },
-
-    stopRecording: () => {
-        // Stop the media recorder
-        // This would need access to the MediaRecorder instance
-
-        set({
-            isRecording: false,
-            recognitionStatus: 'inactive',
-        });
-
-        logger.info('Stopped audio recording');
-    },
-
-    processAudio: async () => {
-        const { audioData } = get();
-
-        if (!audioData) {
-            get().addNotification({
-                type: 'warning',
-                message: 'No audio data to process',
-                duration: 3000,
-            });
-            return '';
-        }
-
-        set({ isProcessing: true });
-
-        try {
-            // Create form data for audio transcription
-            const formData = new FormData();
-            formData.append('audio', audioData, 'recording.webm');
-
-            const response = await fetch('/api/transcribe', {
-                method: 'POST',
-                body: formData,
-            });
-
-            if (!response.ok) {
-                throw new Error(`Transcription failed: ${response.statusText}`);
-            }
-
-            const { text, confidence } = await response.json();
-
-            // Store transcription result
-            const resultId = Date.now().toString();
-            set(state => ({
-                transcriptionResults: new Map(state.transcriptionResults).set(resultId, text),
-                isProcessing: false,
-            }));
-
-            get().addNotification({
-                type: 'success',
-                message: `Transcription complete: "${text.substring(0, 50)}${text.length > 50 ? '...' : ''}"`,
-                duration: 5000,
-            });
-
-            logger.info(`Audio transcribed: ${text.length} characters, confidence: ${confidence}`);
-
-            return text;
-        } catch (error) {
-            const errorMessage = error instanceof Error ? error.message : 'Transcription failed';
-
-            set({
-                isProcessing: false,
-                error: errorMessage,
-            });
-
-            get().addNotification({
-                type: 'error',
-                message: `Transcription failed: ${errorMessage}`,
-                duration: 8000,
-            });
-
-            logger.error('Audio processing failed:', error);
-            return '';
-        }
-    },
-
-    clearError: () => {
-        set({ error: null });
-    },
-});
diff --git a/src/stores/slices/uiSlice.ts b/src/stores/slices/uiSlice.ts
deleted file mode 100644
index a28629c..0000000
--- a/src/stores/slices/uiSlice.ts
+++ /dev/null
@@ -1,91 +0,0 @@
-import { StateCreator } from 'zustand';
-import { AppState, UISlice } from '@/types/store';
-import { logger } from '@/modules';
-import { v4 as uuidv4 } from 'uuid';
-
-export const createUISlice: StateCreator<AppState, [], [], UISlice> = (set, get) => ({
-    // Initialize state - centralizes all UI state management
-    theme: 'dark',
-    notifications: [],
-    modals: {},
-    isLoading: false,
-    loadingMessage: undefined,
-
-    // Theme management
-    setTheme: (theme: 'light' | 'dark') => {
-        set({ theme });
-        logger.info(`🎨 Theme changed to: ${theme}`);
-
-        // Apply theme to document if in browser
-        if (typeof window !== 'undefined') {
-            document.documentElement.classList.toggle('dark', theme === 'dark');
-        }
-    },
-
-    // Notification management - replaces scattered notification logic
-    addNotification: notification => {
-        const id = uuidv4();
-        const fullNotification = {
-            ...notification,
-            id,
-            timestamp: Date.now(),
-        };
-
-        set(state => ({
-            notifications: [...state.notifications, fullNotification],
-        }));
-
-        logger.debug(`🔔 Added notification: ${notification.type} - ${notification.message}`);
-
-        // Auto-remove notification after duration
-        const duration = notification.duration || 5000;
-        setTimeout(() => {
-            get().removeNotification(id);
-        }, duration);
-    },
-
-    removeNotification: (id: string) => {
-        set(state => ({
-            notifications: state.notifications.filter(n => n.id !== id),
-        }));
-
-        logger.debug(`🗑️ Removed notification: ${id}`);
-    },
-
-    // Modal management - replaces individual modal state
-    openModal: (modalId: string, props?: any) => {
-        set(state => ({
-            modals: {
-                ...state.modals,
-                [modalId]: { isOpen: true, props },
-            },
-        }));
-
-        logger.debug(`📋 Opened modal: ${modalId}`);
-    },
-
-    closeModal: (modalId: string) => {
-        set(state => ({
-            modals: {
-                ...state.modals,
-                [modalId]: { isOpen: false, props: undefined },
-            },
-        }));
-
-        logger.debug(`❌ Closed modal: ${modalId}`);
-    },
-
-    // Loading state management - replaces scattered loading states
-    setLoading: (isLoading: boolean, message?: string) => {
-        set({
-            isLoading,
-            loadingMessage: isLoading ? message : undefined,
-        });
-
-        if (isLoading) {
-            logger.debug(`⏳ Loading started: ${message || 'Loading...'}`);
-        } else {
-            logger.debug('✅ Loading completed');
-        }
-    },
-});
diff --git a/src/stores/store.ts b/src/stores/store.ts
deleted file mode 100644
index e69de29..0000000
diff --git a/src/types/callContext.ts b/src/types/callContext.ts
deleted file mode 100644
index ebc1e9c..0000000
--- a/src/types/callContext.ts
+++ /dev/null
@@ -1,301 +0,0 @@
-// src/types/callContext.ts
-
-export interface Participant {
-    name?: string;
-    relationship:
-        | 'colleague'
-        | 'manager'
-        | 'direct-report'
-        | 'client'
-        | 'prospect'
-        | 'customer'
-        | 'partner'
-        | 'friend'
-        | 'family'
-        | 'romantic-interest'
-        | 'spouse'
-        | 'stranger'
-        | 'authority';
-    current_sentiment?: 'positive' | 'neutral' | 'frustrated' | 'angry' | 'sad' | 'unknown';
-    background?: string;
-    priorities?: string[];
-}
-
-export interface CallObjective {
-    primary_goal: string;
-    success_metrics: string[];
-    potential_obstacles: string[];
-    fallback_strategies: string[];
-}
-
-export interface CallContext {
-    // Core call identification
-    call_type:
-        | 'job-interview'
-        | 'performance-review'
-        | 'sales-call'
-        | 'customer-support'
-        | 'client-meeting'
-        | 'team-meeting'
-        | 'negotiation'
-        | 'project-discussion'
-        | 'hiring-call'
-        | 'termination-call'
-        | 'discipline-call'
-        | 'dating-ask'
-        | 'relationship-talk'
-        | 'breakup-call'
-        | 'family-call'
-        | 'friend-checkin'
-        | 'conflict-resolution'
-        | 'support-call'
-        | 'celebration-call'
-        | 'technical-support'
-        | 'medical-consultation'
-        | 'legal-consultation'
-        | 'financial-advice'
-        | 'dispute-resolution'
-        | 'emergency-call';
-
-    call_context: 'professional' | 'personal' | 'service' | 'emergency';
-
-    urgency_level: 'low' | 'medium' | 'high' | 'critical';
-    sensitivity_level: 'public' | 'confidential' | 'personal' | 'highly-sensitive';
-
-    // Participants and relationships
-    participants?: Participant[];
-    power_dynamic?: 'equal' | 'you-higher' | 'them-higher' | 'neutral';
-
-    // Objectives and strategy
-    objectives?: CallObjective[];
-    desired_tone: 'professional' | 'friendly' | 'empathetic' | 'assertive' | 'casual' | 'formal';
-    communication_approach: 'direct' | 'diplomatic' | 'collaborative' | 'supportive' | 'persuasive';
-
-    // Content focus
-    key_points: string[];
-    sensitive_topics?: string[];
-    questions_to_ask?: string[];
-
-    // Response preferences
-    response_style: 'structured' | 'conversational' | 'bullet-points' | 'script-like';
-    verbosity: 'brief' | 'moderate' | 'detailed';
-    include_emotional_guidance: boolean;
-    include_professional_tips: boolean;
-
-    // Session metadata
-    estimated_duration?: string;
-    follow_up_required?: boolean;
-    documentation_needed?: boolean;
-
-    // Knowledge integration
-    knowledge_search_enabled: boolean;
-    knowledge_search_scope?: 'all' | 'professional-only' | 'personal-only';
-}
-
-// Predefined options for dropdowns and selections
-export const CALL_TYPES_BY_CONTEXT = {
-    professional: [
-        {
-            value: 'job-interview',
-            label: '💼 Job Interview',
-            description: 'Behavioral, technical, or panel interviews',
-        },
-        {
-            value: 'performance-review',
-            label: '📊 Performance Review',
-            description: 'Annual reviews, check-ins, feedback sessions',
-        },
-        { value: 'sales-call', label: '💰 Sales Call', description: 'Prospecting, demos, negotiations, closing' },
-        {
-            value: 'customer-support',
-            label: '🎧 Customer Support',
-            description: 'Help desk, troubleshooting, escalations',
-        },
-        {
-            value: 'client-meeting',
-            label: '🤝 Client Meeting',
-            description: 'Project updates, requirements, presentations',
-        },
-        { value: 'team-meeting', label: '👥 Team Meeting', description: 'Standups, planning, retrospectives' },
-        { value: 'negotiation', label: '⚖️ Negotiation', description: 'Contracts, deals, terms discussions' },
-        {
-            value: 'project-discussion',
-            label: '📋 Project Discussion',
-            description: 'Planning, status updates, problem-solving',
-        },
-        { value: 'hiring-call', label: '🎯 Hiring Call', description: 'Recruiting, screening, reference checks' },
-        {
-            value: 'termination-call',
-            label: '⚠️ Termination Call',
-            description: 'Layoffs, firing, separation discussions',
-        },
-        { value: 'discipline-call', label: '📢 Discipline Call', description: 'Performance issues, policy violations' },
-    ],
-    personal: [
-        { value: 'dating-ask', label: '💕 Dating Ask', description: 'Asking someone out, romantic interest' },
-        {
-            value: 'relationship-talk',
-            label: '❤️ Relationship Talk',
-            description: 'DTR, relationship issues, commitment',
-        },
-        {
-            value: 'breakup-call',
-            label: '💔 Breakup Call',
-            description: 'Ending relationships, difficult conversations',
-        },
-        { value: 'family-call', label: '👨‍👩‍👧‍👦 Family Call', description: 'Family updates, planning, serious discussions' },
-        { value: 'friend-checkin', label: '👋 Friend Check-in', description: 'Catching up, support, social plans' },
-        {
-            value: 'conflict-resolution',
-            label: '🤝 Conflict Resolution',
-            description: 'Resolving disputes, making amends',
-        },
-        { value: 'support-call', label: '🤗 Support Call', description: 'Emotional support, crisis intervention' },
-        { value: 'celebration-call', label: '🎉 Celebration Call', description: 'Good news, achievements, milestones' },
-    ],
-    service: [
-        {
-            value: 'technical-support',
-            label: '🔧 Technical Support',
-            description: 'IT help, software issues, troubleshooting',
-        },
-        {
-            value: 'medical-consultation',
-            label: '🏥 Medical Consultation',
-            description: 'Doctor visits, health discussions',
-        },
-        {
-            value: 'legal-consultation',
-            label: '⚖️ Legal Consultation',
-            description: 'Legal advice, contracts, disputes',
-        },
-        { value: 'financial-advice', label: '💳 Financial Advice', description: 'Banking, investments, insurance' },
-        {
-            value: 'dispute-resolution',
-            label: '🤝 Dispute Resolution',
-            description: 'Customer service, complaints, refunds',
-        },
-    ],
-    emergency: [
-        {
-            value: 'emergency-call',
-            label: '🚨 Emergency Call',
-            description: 'Crisis situations requiring immediate attention',
-        },
-    ],
-} as const;
-
-export const TONE_OPTIONS = [
-    { value: 'professional', label: '💼 Professional', description: 'Business-appropriate, formal tone' },
-    { value: 'friendly', label: '😊 Friendly', description: 'Warm, approachable, personable' },
-    { value: 'empathetic', label: '❤️ Empathetic', description: 'Understanding, compassionate, supportive' },
-    { value: 'assertive', label: '💪 Assertive', description: 'Confident, direct, strong presence' },
-    { value: 'casual', label: '😎 Casual', description: 'Relaxed, informal, conversational' },
-    { value: 'formal', label: '🎩 Formal', description: 'Structured, traditional, respectful' },
-] as const;
-
-export const COMMUNICATION_APPROACHES = [
-    { value: 'direct', label: '🎯 Direct', description: 'Straight to the point, clear, unambiguous' },
-    { value: 'diplomatic', label: '🤝 Diplomatic', description: 'Tactful, considerate, politically aware' },
-    { value: 'collaborative', label: '👥 Collaborative', description: 'Team-oriented, inclusive, partnership-focused' },
-    { value: 'supportive', label: '🤗 Supportive', description: 'Encouraging, helpful, solution-oriented' },
-    { value: 'persuasive', label: '💡 Persuasive', description: 'Influential, compelling, results-driven' },
-] as const;
-
-export const URGENCY_LEVELS = [
-    { value: 'low', label: '🟢 Low', description: 'Routine, non-urgent, can wait' },
-    { value: 'medium', label: '🟡 Medium', description: 'Important but not critical' },
-    { value: 'high', label: '🟠 High', description: 'Time-sensitive, important' },
-    { value: 'critical', label: '🔴 Critical', description: 'Urgent, immediate attention required' },
-] as const;
-
-export const SENSITIVITY_LEVELS = [
-    { value: 'public', label: '📢 Public', description: 'Open, shareable information' },
-    { value: 'confidential', label: '🔒 Confidential', description: 'Business sensitive, limited sharing' },
-    { value: 'personal', label: '👤 Personal', description: 'Private personal information' },
-    { value: 'highly-sensitive', label: '🔐 Highly Sensitive', description: 'Extremely private, maximum protection' },
-] as const;
-
-// Validation helpers
-export function validateCallContext(context: Partial<CallContext>): string[] {
-    const errors: string[] = [];
-
-    if (!context.call_type) errors.push('Call type is required');
-    if (!context.call_context) errors.push('Call context is required');
-    if (!context.key_points || context.key_points.length === 0) errors.push('At least one key point is required');
-    if (!context.objectives || context.objectives.length === 0) errors.push('At least one objective is required');
-
-    // Validate objectives
-    if (context.objectives) {
-        context.objectives.forEach((obj, index) => {
-            if (!obj.primary_goal || obj.primary_goal.trim() === '') {
-                errors.push(`Objective ${index + 1} is missing a primary goal`);
-            }
-        });
-    }
-
-    // Emergency call specific validation
-    if (context.call_type === 'emergency-call') {
-        if (context.knowledge_search_enabled) {
-            errors.push('Knowledge search should be disabled for emergency calls');
-        }
-    }
-
-    return errors;
-}
-
-// Default context factory
-export function createDefaultCallContext(callType?: CallContext['call_type']): CallContext {
-    const baseContext: CallContext = {
-        call_type: callType || 'sales-call',
-        call_context: 'professional',
-        urgency_level: 'medium',
-        sensitivity_level: 'confidential',
-        participants: [],
-        power_dynamic: 'equal',
-        objectives: [],
-        desired_tone: 'professional',
-        communication_approach: 'collaborative',
-        key_points: [],
-        sensitive_topics: [],
-        questions_to_ask: [],
-        response_style: 'structured',
-        verbosity: 'moderate',
-        include_emotional_guidance: false,
-        include_professional_tips: true,
-        estimated_duration: '',
-        follow_up_required: false,
-        documentation_needed: false,
-        knowledge_search_enabled: true,
-        knowledge_search_scope: 'all',
-    };
-
-    // Customize based on call type
-    if (callType === 'emergency-call') {
-        return {
-            ...baseContext,
-            urgency_level: 'critical',
-            sensitivity_level: 'highly-sensitive',
-            response_style: 'bullet-points',
-            verbosity: 'brief',
-            include_emotional_guidance: false,
-            include_professional_tips: true,
-            knowledge_search_enabled: false,
-        };
-    }
-
-    if (callType?.includes('relationship') || callType?.includes('dating') || callType?.includes('family')) {
-        return {
-            ...baseContext,
-            call_context: 'personal',
-            desired_tone: 'empathetic',
-            communication_approach: 'supportive',
-            include_emotional_guidance: true,
-            include_professional_tips: false,
-            sensitivity_level: 'personal',
-            knowledge_search_scope: 'personal-only',
-        };
-    }
-
-    return baseContext;
-}
diff --git a/src/types/documentChunk.ts b/src/types/documentChunk.ts
deleted file mode 100644
index 184a043..0000000
--- a/src/types/documentChunk.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-//
-
-export interface DocumentChunk {
-    id: string;
-    text: string;
-    source: string;
-    score?: number; // For search results
-}
diff --git a/src/types/index.ts b/src/types/index.ts
index 55facd2..2f310a2 100644
--- a/src/types/index.ts
+++ b/src/types/index.ts
@@ -1,12 +1,8 @@
 // src\types\index.ts
-export * from './callContext';
-export * from './errorBoundary';
 export * from './ILLMService';
 export * from './initialInterviewContext';
 export * from './llm';
 export * from './Message';
-export * from './openai-models';
 export * from './openai';
-export * from './promptTemplates';
-export * from './documentChunk';
-export * from './store';
+export * from './openai-models';
+export * from './errorBoundary';
diff --git a/src/types/initialInterviewContext.ts b/src/types/initialInterviewContext.ts
index c6cd223..e713f38 100644
--- a/src/types/initialInterviewContext.ts
+++ b/src/types/initialInterviewContext.ts
@@ -1,72 +1,28 @@
-// src/types/initialInterviewContext.ts
-
-export interface InterviewerProfile {
-    role: 'hiring-manager' | 'peer' | 'senior-executive' | 'hr' | 'technical-lead' | 'panel-member';
-    priorities: string[];
-}
-
-export interface InterviewStrategy {
-    primaryPositioning: 'problem-solver' | 'growth-driver' | 'efficiency-expert' | 'transformation-leader';
-    keyDifferentiators: string[];
-    riskMitigation: string[];
-    questionsToAsk: string[];
-}
-
-export interface Achievement {
-    description: string;
-    metric?: string;
-    context?: string;
-}
+// src\types\initialInterviewContext.ts
 
 export interface InitialInterviewContext {
-    // ===== 🎯 CORE INTERVIEW CONTEXT (6 ESSENTIAL) =====
+    // Interview Specifics
     interviewType: 'behavioral' | 'technical' | 'case-study' | 'sales' | 'leadership' | 'mixed';
     targetRole: string;
     targetCompany: string;
-    companySizeType: 'startup' | 'scaleup' | 'mid-market' | 'large-enterprise' | 'mega-corp' | 'public-company';
+    companySizeType: 'scaleup' | 'mid-market' | 'enterprise' | 'public';
+    industry: string;
     seniorityLevel: 'senior-ic' | 'lead' | 'manager' | 'director' | 'vp' | 'c-level';
-    roleDescription: string;
 
-    // ===== 📋 PREPARATION FOCUS (5 ESSENTIAL) =====
+    // Response Generation Settings
+    responseConfidence: 'conservative' | 'balanced' | 'confident';
+    responseStructure: 'story-driven' | 'data-driven' | 'hybrid';
+    contextDepth: number;
+    includeMetrics: boolean;
+
+    // Session Focus
     goals: string[];
     emphasizedExperiences: string[];
     specificChallenges: string[];
-    keyAchievements?: Achievement[];
-    responseStructure:
-        | 'STAR-method'
-        | 'problem-solution-impact'
-        | 'context-action-result'
-        | 'situation-challenge-solution'
-        | 'data-story-insight'
-        | 'flexible-adaptive';
-
-    // ===== 🏢 CONTEXT & POSITIONING (8 VALUABLE) =====
-    industryVertical:
-        | 'technology-software'
-        | 'financial-services'
-        | 'healthcare-biotech'
-        | 'manufacturing-industrial'
-        | 'consulting-services'
-        | 'retail-consumer'
-        | 'energy-utilities'
-        | 'government-education'
-        | 'other';
-    interviewRound: 'initial' | 'second' | 'final' | 'panel' | 'technical-deep-dive' | 'presentation';
-    interviewDuration: '30min' | '45min' | '60min' | '90min' | 'half-day' | 'full-day';
-    competitiveContext: 'direct-competitor' | 'adjacent-industry' | 'career-pivot' | 'internal-transfer' | 'first-role';
-    interviewerProfiles: InterviewerProfile[];
     companyContext: string[];
-    yearsOfExperience?: number;
-    interviewStrategy: InterviewStrategy;
 
-    // ===== ⚙️ RESPONSE CUSTOMIZATION (9 VALUABLE) =====
-    responseConfidence: 'conservative' | 'balanced' | 'confident';
-    responseVerbosity: 'concise' | 'detailed' | 'auto';
-    industryLanguage: 'technical' | 'business' | 'balanced';
-    includeMetrics: boolean;
-    contextDepth: 'low' | 'medium' | 'high';
-    expertiseDomains?: string[];
-    coreSkills: string[];
+    // System prompt
+    roleDescription: string;
 }
 
 export interface LiveInterviewModalProps {
diff --git a/src/types/promptTemplates.ts b/src/types/promptTemplates.ts
deleted file mode 100644
index b03e9a5..0000000
--- a/src/types/promptTemplates.ts
+++ /dev/null
@@ -1,239 +0,0 @@
-// src/types/promptTemplates.ts
-
-import { CallContext } from './callContext';
-
-export interface PromptTemplate {
-    system_prompt: string;
-    user_prompt_template: string;
-    suggestion_prompt_template?: string;
-    insight_prompt_template?: string;
-    features_enabled: {
-        live_suggestions: boolean;
-        conversation_insights: boolean;
-        emotional_guidance: boolean;
-        follow_up_generation: boolean;
-    };
-}
-
-export const PROMPT_TEMPLATES: Record<string, PromptTemplate> = {
-    // ===== PROFESSIONAL TEMPLATES =====
-    'job-interview': {
-        system_prompt: `You are an expert interview coach helping a candidate prepare for and succeed in job interviews. Focus on:
-        - Professional communication and confidence
-        - Structured responses (STAR method, etc.)
-        - Company and role alignment
-        - Demonstrating value and competencies
-        - Managing nerves and building rapport
-        Maintain professionalism while being supportive and confidence-building.`,
-
-        user_prompt_template: `Help me prepare for a {{call_type}} with {{participants}} at {{company}}. 
-        Role: {{role}}
-        Objectives: {{objectives}}
-        Key points to cover: {{key_points}}
-        Response style: {{response_style}}`,
-
-        features_enabled: {
-            live_suggestions: true,
-            conversation_insights: true,
-            emotional_guidance: false,
-            follow_up_generation: true,
-        },
-    },
-
-    'sales-call': {
-        system_prompt: `You are a sales excellence coach helping optimize sales conversations. Focus on:
-        - Understanding customer needs and pain points
-        - Value proposition articulation
-        - Objection handling and relationship building
-        - Closing techniques and next steps
-        - Professional persuasion and trust building
-        Be results-oriented while maintaining ethical sales practices.`,
-
-        user_prompt_template: `Help me prepare for a {{call_type}} with {{participants}}.
-        Objectives: {{objectives}}
-        Known challenges: {{potential_obstacles}}
-        Tone: {{desired_tone}}
-        Duration: {{estimated_duration}}`,
-
-        features_enabled: {
-            live_suggestions: true,
-            conversation_insights: true,
-            emotional_guidance: false,
-            follow_up_generation: true,
-        },
-    },
-
-    'customer-support': {
-        system_prompt: `You are a customer service excellence advisor. Focus on:
-        - Active listening and empathy
-        - Problem-solving and solution-finding
-        - De-escalation techniques
-        - Clear communication and follow-through
-        - Customer satisfaction and relationship preservation
-        Prioritize customer experience while being solution-focused.`,
-
-        user_prompt_template: `Help me handle a {{call_type}} regarding {{key_points}}.
-        Customer sentiment: {{current_sentiment}}
-        Objectives: {{objectives}}
-        Approach: {{communication_approach}}`,
-
-        features_enabled: {
-            live_suggestions: true,
-            conversation_insights: true,
-            emotional_guidance: true,
-            follow_up_generation: true,
-        },
-    },
-
-    // ===== PERSONAL TEMPLATES =====
-    'relationship-talk': {
-        system_prompt: `You are a relationship communication advisor. Focus on:
-        - Emotional intelligence and empathy
-        - Non-violent communication techniques
-        - Active listening and validation
-        - Constructive conflict resolution
-        - Relationship building and understanding
-        Be supportive, non-judgmental, and focused on healthy communication patterns.`,
-
-        user_prompt_template: `Help me prepare for a {{call_type}} with {{participants}}.
-        Relationship: {{relationship_history}}
-        Objectives: {{objectives}}
-        Sensitive topics: {{sensitive_topics}}
-        Desired tone: {{desired_tone}}`,
-
-        features_enabled: {
-            live_suggestions: false, // Too personal for live suggestions
-            conversation_insights: false,
-            emotional_guidance: true,
-            follow_up_generation: false,
-        },
-    },
-
-    'family-call': {
-        system_prompt: `You are a family communication advisor. Focus on:
-        - Understanding family dynamics
-        - Respectful and loving communication
-        - Generational and cultural sensitivity
-        - Emotional support and connection
-        - Maintaining family bonds
-        Be warm, understanding, and focused on family harmony.`,
-
-        user_prompt_template: `Help me prepare for a {{call_type}} with {{participants}}.
-        Purpose: {{objectives}}
-        Family context: {{relationship_history}}
-        Tone: {{desired_tone}}`,
-
-        features_enabled: {
-            live_suggestions: false,
-            conversation_insights: false,
-            emotional_guidance: true,
-            follow_up_generation: false,
-        },
-    },
-
-    'conflict-resolution': {
-        system_prompt: `You are a conflict resolution specialist. Focus on:
-        - De-escalation and emotional regulation
-        - Finding common ground and mutual understanding
-        - Mediation techniques and fair communication
-        - Problem-solving and compromise
-        - Rebuilding trust and relationships
-        Be neutral, calm, and focused on constructive outcomes.`,
-
-        user_prompt_template: `Help me prepare for {{call_type}} regarding {{key_points}}.
-        Participants: {{participants}}
-        Current situation: {{relationship_history}}
-        Objectives: {{objectives}}
-        Sensitivity level: {{sensitivity_level}}`,
-
-        features_enabled: {
-            live_suggestions: true,
-            conversation_insights: false,
-            emotional_guidance: true,
-            follow_up_generation: true,
-        },
-    },
-
-    // ===== SERVICE TEMPLATES =====
-    'technical-support': {
-        system_prompt: `You are a technical support excellence coach. Focus on:
-        - Clear technical communication
-        - Systematic problem diagnosis
-        - Patient explanation of solutions
-        - Managing user frustration
-        - Efficient resolution processes
-        Be methodical, patient, and solution-focused.`,
-
-        user_prompt_template: `Help me handle {{call_type}} for {{key_points}}.
-        User technical level: {{background}}
-        Problem scope: {{objectives}}
-        Approach: {{communication_approach}}`,
-
-        features_enabled: {
-            live_suggestions: true,
-            conversation_insights: true,
-            emotional_guidance: false,
-            follow_up_generation: true,
-        },
-    },
-
-    'emergency-call': {
-        system_prompt: `You are an emergency communication advisor. Focus on:
-        - Clear, calm, and direct communication
-        - Gathering critical information quickly
-        - Providing reassurance while maintaining urgency
-        - Following emergency protocols
-        - Coordinating appropriate responses
-        Be clear, calm, and focused on immediate safety and effective action.`,
-
-        user_prompt_template: `Help me handle {{call_type}} situation: {{key_points}}.
-        Urgency: {{urgency_level}}
-        Participants: {{participants}}
-        Immediate objectives: {{objectives}}`,
-
-        features_enabled: {
-            live_suggestions: false, // Too critical for AI suggestions
-            conversation_insights: false,
-            emotional_guidance: false,
-            follow_up_generation: true,
-        },
-    },
-
-    // ===== SENSITIVE TEMPLATES =====
-    'termination-call': {
-        system_prompt: `You are an HR and management advisor for difficult conversations. Focus on:
-        - Legal compliance and documentation
-        - Compassionate but clear communication
-        - Managing emotions (yours and theirs)
-        - Providing clear next steps
-        - Maintaining dignity and respect
-        Be professional, empathetic, and legally sound.`,
-
-        user_prompt_template: `Help me prepare for {{call_type}} with {{participants}}.
-        Reason: {{key_points}}
-        Company policy: {{supporting_information}}
-        Approach: {{communication_approach}}`,
-
-        features_enabled: {
-            live_suggestions: false, // Too sensitive
-            conversation_insights: false,
-            emotional_guidance: true,
-            follow_up_generation: true,
-        },
-    },
-};
-
-// Dynamic prompt generation
-export function generatePrompt(callContext: CallContext): PromptTemplate {
-    const template = PROMPT_TEMPLATES[callContext.call_type] || PROMPT_TEMPLATES['general'];
-
-    // Replace template variables with actual context
-    const userPrompt = template.user_prompt_template.replace(/\{\{(\w+)\}\}/g, (match, key) => {
-        return callContext[key as keyof CallContext]?.toString() || match;
-    });
-
-    return {
-        ...template,
-        user_prompt_template: userPrompt,
-    };
-}
diff --git a/src/types/store.ts b/src/types/store.ts
deleted file mode 100644
index 749fa2a..0000000
--- a/src/types/store.ts
+++ /dev/null
@@ -1,132 +0,0 @@
-import { InitialInterviewContext, Message, DocumentChunk } from '@/types';
-
-// Your existing types, reorganized for Zustand
-export interface IndexingProgress {
-    filesProcessed: number;
-    totalFiles: number;
-    errors: string[];
-    progress: string;
-}
-
-export interface StreamingResponse {
-    content: string;
-    isComplete: boolean;
-    timestamp: number;
-}
-
-export interface Conversation {
-    id: string;
-    messages: Message[];
-    summary?: string;
-    createdAt: Date;
-    lastUpdated: Date;
-}
-
-export interface AudioSession {
-    id: string;
-    audioBlob: Blob;
-    transcription?: string;
-    confidence?: number;
-    processedAt: Date;
-}
-
-// Domain-specific state interfaces
-export interface KnowledgeSlice {
-    // State
-    indexedDocumentsCount: number;
-    knowledgeBaseName: string;
-    isLoading: boolean;
-    error: string | null;
-    lastIndexedAt: Date | null;
-    indexingProgress: IndexingProgress;
-    searchResults: DocumentChunk[];
-
-    // Actions - these replace your KnowledgeProvider methods
-    initializeKnowledgeBase: () => Promise<void>;
-    triggerIndexing: () => Promise<boolean>;
-    searchRelevantKnowledge: (query: string, limit?: number) => Promise<DocumentChunk[]>;
-    refreshIndexedDocumentsCount: () => Promise<void>;
-}
-
-export interface LLMSlice {
-    // State - replaces your useLLMProviderOptimized state
-    conversations: Map<string, Conversation>;
-    streamingResponses: Map<string, StreamingResponse>;
-    isGenerating: boolean;
-    currentStreamId: string | null;
-    conversationSummary: string;
-    conversationSuggestions: {
-        powerUpContent: string;
-        lastAnalysis?: any;
-        analysisHistory?: any[];
-    };
-
-    // Actions - these replace your LLM hook methods
-    generateResponse: (userMessage: string) => Promise<void>;
-    generateSuggestions: () => Promise<void>;
-    summarizeConversation: (messages: Message[]) => Promise<void>;
-    stopStreaming: (streamId: string) => void;
-    clearConversation: (conversationId: string) => void;
-}
-
-export interface SpeechSlice {
-    // State - replaces your speech recognition useState calls
-    isRecording: boolean;
-    isProcessing: boolean;
-    recognitionStatus: 'inactive' | 'active' | 'error';
-    error: string | null;
-    audioSessions: Map<string, AudioSession>;
-    currentTranscript: string;
-    interimTranscripts: Message[];
-
-    // Actions - these replace your speech hook methods
-    startRecording: () => Promise<void>;
-    stopRecording: () => void;
-    processAudioSession: (sessionId: string) => Promise<string>;
-    clearTranscripts: () => void;
-    handleRecognitionResult: (finalTranscript: string, interimTranscript: string) => void;
-}
-
-export interface InterviewSlice {
-    // State - replaces your interview modal state
-    context: InitialInterviewContext | null;
-    isModalOpen: boolean;
-    currentStep: string;
-    validationErrors: Record<string, string>;
-
-    // Actions - these replace your interview context methods
-    setInterviewContext: (context: InitialInterviewContext) => void;
-    openInterviewModal: () => void;
-    closeInterviewModal: () => void;
-    updateInterviewField: <K extends keyof InitialInterviewContext>(
-        field: K,
-        value: InitialInterviewContext[K]
-    ) => void;
-    validateContext: () => boolean;
-}
-
-export interface UISlice {
-    // State - centralizes all UI state management
-    theme: 'light' | 'dark';
-    notifications: Array<{
-        id: string;
-        type: 'success' | 'error' | 'warning' | 'info';
-        message: string;
-        duration?: number;
-        timestamp: number;
-    }>;
-    modals: Record<string, { isOpen: boolean; props?: any }>;
-    isLoading: boolean;
-    loadingMessage?: string;
-
-    // Actions - these handle all UI state changes
-    setTheme: (theme: 'light' | 'dark') => void;
-    addNotification: (notification: Omit<UISlice['notifications'][0], 'id' | 'timestamp'>) => void;
-    removeNotification: (id: string) => void;
-    openModal: (modalId: string, props?: any) => void;
-    closeModal: (modalId: string) => void;
-    setLoading: (isLoading: boolean, message?: string) => void;
-}
-
-// Combined application state
-export interface AppState extends KnowledgeSlice, LLMSlice, SpeechSlice, InterviewSlice, UISlice {}
diff --git a/src/utils/featureAvailability.ts b/src/utils/featureAvailability.ts
deleted file mode 100644
index d8974a0..0000000
--- a/src/utils/featureAvailability.ts
+++ /dev/null
@@ -1,192 +0,0 @@
-// src/utils/featureAvailability.ts
-
-export interface FeatureAvailability {
-    live_suggestions: boolean;
-    conversation_insights: boolean;
-    emotional_guidance: boolean;
-    follow_up_generation: boolean;
-    conversation_analytics: boolean;
-    ai_coaching: boolean;
-    script_generation: boolean;
-    objection_handling: boolean;
-    privacy_mode: boolean;
-    recording_recommendations: boolean;
-}
-
-export const FEATURE_MATRIX: Record<string, FeatureAvailability> = {
-    // ===== PROFESSIONAL (Full Features) =====
-    'job-interview': {
-        live_suggestions: true,
-        conversation_insights: true,
-        emotional_guidance: false, // Keep professional
-        follow_up_generation: true,
-        conversation_analytics: true,
-        ai_coaching: true,
-        script_generation: true,
-        objection_handling: true,
-        privacy_mode: false,
-        recording_recommendations: true,
-    },
-
-    'sales-call': {
-        live_suggestions: true,
-        conversation_insights: true,
-        emotional_guidance: false,
-        follow_up_generation: true,
-        conversation_analytics: true,
-        ai_coaching: true,
-        script_generation: true,
-        objection_handling: true,
-        privacy_mode: false,
-        recording_recommendations: true,
-    },
-
-    'customer-support': {
-        live_suggestions: true,
-        conversation_insights: true,
-        emotional_guidance: true, // Important for de-escalation
-        follow_up_generation: true,
-        conversation_analytics: true,
-        ai_coaching: true,
-        script_generation: false, // More natural conversation needed
-        objection_handling: false,
-        privacy_mode: false,
-        recording_recommendations: true,
-    },
-
-    // ===== PERSONAL (Limited Features for Privacy) =====
-    'dating-ask': {
-        live_suggestions: false, // Too personal for live AI input
-        conversation_insights: false,
-        emotional_guidance: true,
-        follow_up_generation: false,
-        conversation_analytics: false,
-        ai_coaching: true, // Pre-call coaching only
-        script_generation: false, // Should be authentic
-        objection_handling: false,
-        privacy_mode: true,
-        recording_recommendations: false,
-    },
-
-    'relationship-talk': {
-        live_suggestions: false,
-        conversation_insights: false,
-        emotional_guidance: true,
-        follow_up_generation: false,
-        conversation_analytics: false,
-        ai_coaching: true,
-        script_generation: false,
-        objection_handling: false,
-        privacy_mode: true,
-        recording_recommendations: false,
-    },
-
-    'family-call': {
-        live_suggestions: false,
-        conversation_insights: false,
-        emotional_guidance: true,
-        follow_up_generation: false,
-        conversation_analytics: false,
-        ai_coaching: true,
-        script_generation: false,
-        objection_handling: false,
-        privacy_mode: true,
-        recording_recommendations: false,
-    },
-
-    // ===== SENSITIVE (Minimal AI Intervention) =====
-    'breakup-call': {
-        live_suggestions: false,
-        conversation_insights: false,
-        emotional_guidance: true,
-        follow_up_generation: false,
-        conversation_analytics: false,
-        ai_coaching: true, // Pre-call emotional preparation
-        script_generation: false,
-        objection_handling: false,
-        privacy_mode: true,
-        recording_recommendations: false,
-    },
-
-    'termination-call': {
-        live_suggestions: false, // Legal/HR sensitivity
-        conversation_insights: false,
-        emotional_guidance: true,
-        follow_up_generation: true, // Documentation important
-        conversation_analytics: false,
-        ai_coaching: true,
-        script_generation: true, // Legal compliance important
-        objection_handling: false,
-        privacy_mode: true,
-        recording_recommendations: true, // Legal documentation
-    },
-
-    // ===== EMERGENCY (Safety First) =====
-    'emergency-call': {
-        live_suggestions: false, // Too critical for AI suggestions
-        conversation_insights: false,
-        emotional_guidance: false,
-        follow_up_generation: true, // Documentation critical
-        conversation_analytics: false,
-        ai_coaching: false,
-        script_generation: false,
-        objection_handling: false,
-        privacy_mode: false,
-        recording_recommendations: true,
-    },
-};
-
-// Safety and ethics checking
-export interface SafetyCheck {
-    requires_consent_warning: boolean;
-    requires_privacy_notice: boolean;
-    requires_professional_disclaimer: boolean;
-    restricted_features: string[];
-    ethical_guidelines: string[];
-}
-
-export const SAFETY_MATRIX: Record<string, SafetyCheck> = {
-    'dating-ask': {
-        requires_consent_warning: true,
-        requires_privacy_notice: true,
-        requires_professional_disclaimer: true,
-        restricted_features: ['live_suggestions', 'recording'],
-        ethical_guidelines: [
-            "Respect the other person's autonomy and right to say no",
-            'Be authentic rather than following scripts',
-            'Consider the impact of your words on the other person',
-        ],
-    },
-
-    'relationship-talk': {
-        requires_consent_warning: true,
-        requires_privacy_notice: true,
-        requires_professional_disclaimer: true,
-        restricted_features: ['live_suggestions', 'analytics', 'recording'],
-        ethical_guidelines: [
-            'Prioritize honest, authentic communication',
-            "Respect your partner's feelings and perspective",
-            'Seek professional counseling for serious relationship issues',
-        ],
-    },
-
-    'termination-call': {
-        requires_consent_warning: false,
-        requires_privacy_notice: true,
-        requires_professional_disclaimer: true,
-        restricted_features: ['live_suggestions'],
-        ethical_guidelines: [
-            'Follow all applicable employment laws and company policies',
-            'Consult with HR and legal before proceeding',
-            'Treat the employee with dignity and respect',
-        ],
-    },
-};
-
-export function getFeatureAvailability(callType: string): FeatureAvailability {
-    return FEATURE_MATRIX[callType] || FEATURE_MATRIX['general'];
-}
-
-export function getSafetyRequirements(callType: string): SafetyCheck | null {
-    return SAFETY_MATRIX[callType] || null;
-}
diff --git a/src/utils/prompts/PromptInstructions.ts b/src/utils/prompts/PromptInstructions.ts
deleted file mode 100644
index fdbef80..0000000
--- a/src/utils/prompts/PromptInstructions.ts
+++ /dev/null
@@ -1,53 +0,0 @@
-// src/utils/prompts/PromptInstructions.ts
-export interface InstructionSet {
-    core: string[];
-    role_specific: Record<string, string[]>;
-    task_specific: Record<string, string[]>;
-}
-
-export const PROMPT_INSTRUCTIONS: InstructionSet = {
-    // Core instructions used once per conversation
-    core: [
-        'Provide unique perspectives with specific examples',
-        'Demonstrate strategic thinking beyond obvious solutions',
-        'Use confident, authoritative language with **bold key insights**',
-    ],
-
-    // Role-specific instructions (used in system prompt only)
-    role_specific: {
-        interview_responder: [
-            'Speak in first person as the candidate',
-            'Keep responses concise (4-6 sentences unless detail needed)',
-            'Connect responses to broader business implications',
-        ],
-        strategic_analyst: [
-            'Focus on industry insights and competitive intelligence',
-            'Provide data-driven recommendations',
-            'Identify non-obvious strategic connections',
-        ],
-    },
-
-    // Task-specific instructions (used in user prompt only)
-    task_specific: {
-        response_generation: [
-            'Include specific examples from the knowledge base if provided',
-            "Address the interviewer's underlying intent, not just the surface question",
-        ],
-        strategic_analysis: [
-            'Identify genuinely impressive insight opportunities',
-            'Ensure variety from previous analyses',
-        ],
-    },
-};
-
-export class InstructionBuilder {
-    static buildSystemInstructions(role: keyof typeof PROMPT_INSTRUCTIONS.role_specific): string {
-        return [...PROMPT_INSTRUCTIONS.core, ...PROMPT_INSTRUCTIONS.role_specific[role]]
-            .map(instruction => `• ${instruction}`)
-            .join('\n');
-    }
-
-    static buildUserInstructions(task: keyof typeof PROMPT_INSTRUCTIONS.task_specific): string {
-        return PROMPT_INSTRUCTIONS.task_specific[task].map(instruction => `- ${instruction}`).join('\n');
-    }
-}
diff --git a/src/utils/response/createSystemPrompt.ts b/src/utils/response/createSystemPrompt.ts
index 653d70e..813b40d 100644
--- a/src/utils/response/createSystemPrompt.ts
+++ b/src/utils/response/createSystemPrompt.ts
@@ -1,84 +1,59 @@
 // src\utils\createSystemPrompt.ts
 
-// ** Build the system role prompt with interview context and knowledge base info **
-
 import { logger } from '@/modules/Logger';
 import { InitialInterviewContext } from '@/types';
-import { InstructionBuilder } from '../prompts/PromptInstructions';
 
 // interface CreateSystemPromptProps {
 //     initialInterviewContext: InitialInterviewContext;
 //     goals: string[];
 // }
 
-export async function createSystemPrompt(
-    initialInterviewContext: InitialInterviewContext,
-    goals: string[]
-): Promise<string> {
-    logger.debug(`🎭 Creating streamlined system prompt...`);
-
+export async function createSystemPrompt(initialInterviewContext: InitialInterviewContext, goals: string[]): Promise<string> {
+    logger.debug(`🎭 Creating system message for question..."`);
     const goalsText = goals.length > 0 ? `Weave these objectives naturally into responses: ${goals.join(', ')}` : '';
+    const systemMessage = `
+You are generating world-class, deeply insightful first-person responses that establish thought leadership in a live interview.
 
-    // Use centralized instructions - no redundancy with user prompt
-    const systemInstructions = InstructionBuilder.buildSystemInstructions('interview_responder');
-
-    const systemMessage = `You are generating world-class, deeply insightful first-person responses that establish thought leadership in a live interview.
-  
-  ## LIVE INTERVIEW CONTEXT:
-  - Target Role: ${initialInterviewContext.targetRole} (${initialInterviewContext.seniorityLevel} level)
-  - Company: ${initialInterviewContext.targetCompany || 'Target companies'}
-  - Industry: ${initialInterviewContext.industryVertical}
-  - Interview Type: ${initialInterviewContext.interviewType}
-  
-  ## RESPONSE SETTINGS:
-  - Confidence: ${initialInterviewContext.responseConfidence}
-  - Structure: ${initialInterviewContext.responseStructure} 
-  - Include Metrics: ${initialInterviewContext.includeMetrics}
-  
-  ## CANDIDATE PROFILE:
-  ${generateDynamicProfile(initialInterviewContext)}
-  
-  ${
-      initialInterviewContext.emphasizedExperiences.length > 0
-          ? `EMPHASIZE: ${initialInterviewContext.emphasizedExperiences.join(', ')}`
-          : ''
-  }
-  
-  ## RESPONSE STANDARDS:
-  ${systemInstructions}
-  
-  ${goalsText}
-  
-  **Tone:** Confident expert who provides insights that make people think "That's brilliant."`;
-
-    logger.debug('✅ Streamlined system prompt created');
-    return systemMessage;
-}
+## LIVE INTERVIEW CONTEXT:
+- Target Role: ${initialInterviewContext.targetRole} (${initialInterviewContext.seniorityLevel} level)
+- Company: ${initialInterviewContext.targetCompany || 'Target companies'}
+- Industry: ${initialInterviewContext.industry}
+- Interview Type: ${initialInterviewContext.interviewType}
+
+## RESPONSE SETTINGS:
+- Confidence: ${initialInterviewContext.responseConfidence}
+- Structure: ${initialInterviewContext.responseStructure} 
+- Include Metrics: ${initialInterviewContext.includeMetrics}
+- Memory Depth: ${initialInterviewContext.contextDepth} exchanges
+
+## CANDIDATE PROFILE:
+- 15+ years B2B sales in regulated environments
+- Proven expertise: Manufacturing, RegTech, Quality Management
+- Key achievements: £3.2M+ deals, MEDDPICC methodology
+
+${initialInterviewContext.emphasizedExperiences.length > 0 ? `EMPHASIZE: ${initialInterviewContext.emphasizedExperiences.join(', ')}` : ''}
 
-// Helper function for dynamic profile generation
-function generateDynamicProfile(context: InitialInterviewContext): string {
-    const profile = [];
-
-    if (context.yearsOfExperience) {
-        profile.push(`${context.yearsOfExperience}+ years experience in ${context.industryVertical}`);
-    }
-
-    if (context.keyAchievements?.length > 0) {
-        profile.push(
-            `Key achievements: ${context.keyAchievements
-                .slice(0, 2)
-                .map(a => a.description)
-                .join(', ')}`
-        );
-    }
-
-    if (context.expertiseDomains?.length > 0) {
-        profile.push(`Expertise: ${context.expertiseDomains.join(', ')}`);
-    }
-
-    return profile.length > 0
-        ? profile.map(item => `- ${item}`).join('\n')
-        : '- Experienced professional with demonstrated expertise';
+${initialInterviewContext.roleDescription}
+
+**Response Excellence Standards:**
+- Provide **unique perspectives** that others wouldn't think of
+- Include **specific, memorable examples** that demonstrate deep expertise  
+- Offer **strategic insights** that reframe how they think about the challenge
+- Use **data points or industry trends** to support key arguments
+- Share **counter-intuitive truths** that showcase advanced understanding
+- Connect their question to **broader business implications** they hadn't considered
+
+**Delivery Requirements:**
+- Use **confident, authoritative language** that commands respect
+- Include **2-3 bolded key insights** for emphasis during delivery
+- Structure: Hook → Insight → Specific Example → Strategic Implication
+
+${goalsText}
+
+**Tone:** Confident expert who provides insights that make people think "I never considered that angle" or "That's brilliant."`;
+
+    logger.debug('✅ User message created successfully');
+    return systemMessage;
 }
 
 // const createSystemPrompt = (context: InterviewContext): string => {
diff --git a/src/utils/response/createUserPrompt.ts b/src/utils/response/createUserPrompt.ts
index c5dd761..e8aaca8 100644
--- a/src/utils/response/createUserPrompt.ts
+++ b/src/utils/response/createUserPrompt.ts
@@ -1,77 +1,43 @@
 // src\utils\createUserPrompt.ts
 import { logger } from '@/modules/Logger';
 
-// createUserPrompt.ts – Build the user prompt with latest question and candidate profile (dynamic verbosity)
-export async function createUserPrompt(latestTranscriptChunk: string, userProfile: string): Promise<string> {
+/**
+ * Constructs the user message for the Completions API with intelligent section handling.
+ *
+ * @param userMessage - The user's current question or statement.
+ * @param conversationSummary - A brief summary of the conversation so far.
+ * @param knowledgeContext - Knowledge from the uploaded Markdown files (intelligently selected)
+ * @returns A formatted string that consolidates all the input into a coherent message.
+ */
+export async function createUserPrompt(userMessage: string, conversationSummary: string, knowledgeContext: string): Promise<string> {
+    logger.debug(`🎭 Creating user message for question: "${userMessage}"`);
+
     const sections: string[] = [];
 
-    // Include candidate profile context if provided
-    if (userProfile && userProfile.trim()) {
-        sections.push(`**Candidate Profile:**\n${userProfile.trim()}`);
+    // Only include sections with meaningful content
+    if (knowledgeContext?.trim() && !knowledgeContext.includes('No specific knowledge context found')) {
+        sections.push(`**Deep Knowledge Base:**\n${knowledgeContext.trim()}`);
     }
-    // Latest interviewer question or statement
-    sections.push(`**Interviewer Question:**\n${latestTranscriptChunk.trim()}`);
 
-    // Instructions for generating the answer
-    const directives: string[] = [
-        "- Provide a unique angle or insight that hasn't been mentioned",
-        '- Include specific examples or **data points** (especially from personal knowledge) to support your answer',
-        '- Demonstrate deep **industry expertise** and understanding',
-        '- Offer strategic insight that goes beyond basic answers',
-        '- Position **yourself (the candidate)** as a thought leader addressing the question',
-    ];
-    // Adjust verbosity directives based on preference
-    if (userProfile && userProfile.toLowerCase().includes('verbosity: concise')) {
-        directives.push('- **Be concise**: keep the response brief and focused');
-    } else if (userProfile && userProfile.toLowerCase().includes('verbosity: detailed')) {
-        directives.push('- **Be detailed**: provide comprehensive insights and elaboration');
+    if (conversationSummary?.trim()) {
+        sections.push(`**Conversation Context:**\n${conversationSummary.trim()}`);
     }
-    sections.push('**Generate a first-person response that:**\n' + directives.join('\n'));
+
+    sections.push(`**Question/Statement to Respond To:**\n${userMessage}`);
+
+    sections.push(`
+**Generate a world-class first-person response that:**
+- Provides a unique angle they haven't considered
+- Includes specific examples or data points from the knowledge base
+- Demonstrates deep industry expertise
+- Offers strategic insights beyond the obvious
+- Positions you as a thought leader in this space`);
 
     const result = sections.join('\n\n');
+
+    // Enhanced logging
     logger.debug(`✅ User message created: ${result.length} chars across ${sections.length} sections`);
-    // logger.debug(`📊 Content breakdown: Knowledge=${knowledgeContext.length}chars, Summary=${conversationSummary.length}chars`);
+    logger.debug(`📊 Content breakdown: Knowledge=${knowledgeContext.length}chars, Summary=${conversationSummary.length}chars`);
 
     return result;
 }
-
-// /**
-//  * Constructs the user message for the Completions API with intelligent section handling.
-//  *
-//  * @param userMessage - The user's current question or statement.
-//  * @param conversationSummary - A brief summary of the conversation so far.
-//  * @param knowledgeContext - Knowledge from the uploaded Markdown files (intelligently selected)
-//  * @returns A formatted string that consolidates all the input into a coherent message.
-//  */
-// export async function createUserPrompt(userMessage: string, conversationSummary: string, knowledgeContext: string): Promise<string> {
-//     logger.debug(`🎭 Creating user message for question: "${userMessage}"`);
-
-//     const sections: string[] = [];
-
-//     // Only include sections with meaningful content
-//     if (knowledgeContext?.trim() && !knowledgeContext.includes('No specific knowledge context found')) {
-//         sections.push(`**Deep Knowledge Base:**\n${knowledgeContext.trim()}`);
-//     }
-
-//     if (conversationSummary?.trim()) {
-//         sections.push(`**Conversation Context:**\n${conversationSummary.trim()}`);
-//     }
-
-//     sections.push(`**Question/Statement to Respond To:**\n${userMessage}`);
-
-//     sections.push(`
-// **Generate a world-class first-person response that:**
-// - Provides a unique angle they haven't considered
-// - Includes specific examples or data points from the knowledge base
-// - Demonstrates deep industry expertise
-// - Offers strategic insights beyond the obvious
-// - Positions you as a thought leader in this space`);
-
-//     const result = sections.join('\n\n');
-
-//     // Enhanced logging
-// logger.debug(`✅ User message created: ${result.length} chars across ${sections.length} sections`);
-// logger.debug(`📊 Content breakdown: Knowledge=${knowledgeContext.length}chars, Summary=${conversationSummary.length}chars`);
-
-//     return result;
-// }
diff --git a/src/utils/suggestions/createGenerationUserPrompt.ts b/src/utils/suggestions/createGenerationUserPrompt.ts
index 94f56b9..74dd302 100644
--- a/src/utils/suggestions/createGenerationUserPrompt.ts
+++ b/src/utils/suggestions/createGenerationUserPrompt.ts
@@ -11,15 +11,13 @@ export async function createGenerationUserPrompt(
         ? `
 ## Strategic Interview Context:
 - **Target Role**: ${initialInterviewContext.targetRole} at ${initialInterviewContext.targetCompany}
-- **Company Profile**: ${initialInterviewContext.companySizeType} ${initialInterviewContext.industryVertical} company
+- **Company Profile**: ${initialInterviewContext.companySizeType} ${initialInterviewContext.industry} company
 - **Interview Type**: ${initialInterviewContext.interviewType}
 - **Seniority Level**: ${initialInterviewContext.seniorityLevel}
 - **Experience Assets**: ${initialInterviewContext.emphasizedExperiences.join(', ') || 'General experience'}
 - **Strategic Challenges**: ${initialInterviewContext.specificChallenges.join(', ') || 'None specified'}
 - **Company Intelligence**: ${initialInterviewContext.companyContext.join(', ') || 'Limited company context'}
-- **Response Style**: ${initialInterviewContext.responseConfidence} confidence, ${
-              initialInterviewContext.responseStructure
-          } structure
+- **Response Style**: ${initialInterviewContext.responseConfidence} confidence, ${initialInterviewContext.responseStructure} structure
 - **Metrics Focus**: ${
               initialInterviewContext.includeMetrics
                   ? 'Include quantified achievements and data points'
@@ -32,9 +30,7 @@ export async function createGenerationUserPrompt(
         ? `
 ## Strategic Knowledge Base:
 ${knowledgeContext.substring(0, 2500)}${
-              knowledgeContext.length > 2500
-                  ? '\n\n[... additional strategic intelligence available for deeper insights ...]'
-                  : ''
+              knowledgeContext.length > 2500 ? '\n\n[... additional strategic intelligence available for deeper insights ...]' : ''
           }
 `
         : '## Knowledge Base: Limited specific intelligence - rely on broader strategic knowledge';
@@ -110,9 +106,7 @@ ${
 }
 
 ## Quality Requirements:
-- **Multiple Independent Elements** - Provide 3-4 different types of valuable insights within the ${
-        analysis.strategic_opportunity
-    } theme
+- **Multiple Independent Elements** - Provide 3-4 different types of valuable insights within the ${analysis.strategic_opportunity} theme
 - **Research-Backed** - Include specific examples, data, real-world evidence where possible
 - **Strategic Depth** - Go beyond surface-level to reveal deeper patterns
 - **Impressive Factor** - Every element should genuinely impress a sophisticated interviewer
@@ -123,7 +117,5 @@ ${
 
 Focus on delivering genuine strategic intelligence that showcases exceptional thinking within the ${
         analysis.strategic_opportunity
-    } domain, specifically targeting ${
-        analysis.focus_area
-    }, while ensuring complete freshness from previous generations.`;
+    } domain, specifically targeting ${analysis.focus_area}, while ensuring complete freshness from previous generations.`;
 }
